{
  "address": "0xa79fD261a2157afBCB3C853b401C3cF2ac3DE91D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "NoTokenCitizen",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "checkedTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "surname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfBirth",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "telephone",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalAddress",
          "type": "string"
        }
      ],
      "name": "addCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingCitizen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balanceOfCitizen",
          "type": "uint256"
        }
      ],
      "name": "checkForNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUsed",
          "type": "uint256"
        }
      ],
      "name": "consumePTFromCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "deleteCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "getCitizen",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "checkedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "surname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfBirth",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct classes.Citizen",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreviousSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThisAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPollutionToken",
          "name": "ptContractAddress",
          "type": "address"
        },
        {
          "internalType": "contract IDSESCenter",
          "name": "dsesCenterAddress",
          "type": "address"
        },
        {
          "internalType": "contract IPollutionNft",
          "name": "pnftAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnBalanceOfCitizen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnNewTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returncheckedTimestamp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenToBeAssigned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddr",
          "type": "address"
        }
      ],
      "name": "updateContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "83cd613e407b821a1b64e57058cc4bb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"NoTokenCitizen\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"surname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfBirth\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"name\":\"addCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"checkExistingCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfCitizen\",\"type\":\"uint256\"}],\"name\":\"checkForNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"}],\"name\":\"consumePTFromCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"deleteCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"getCitizen\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"checkedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"surname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfBirth\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct classes.Citizen\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPollutionToken\",\"name\":\"ptContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IDSESCenter\",\"name\":\"dsesCenterAddress\",\"type\":\"address\"},{\"internalType\":\"contract IPollutionNft\",\"name\":\"pnftAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBalanceOfCitizen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnNewTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returncheckedTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToBeAssigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"updateContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CityCitizen.sol\":\"CityCitizen\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/CityCitizen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./Classes.sol\\\";\\n//import {IDSESCenter} from \\\"./DSESCenter.sol\\\";\\nimport \\\"./interfaces/IDSESCenter.sol\\\";\\nimport \\\"./interfaces/IPollutionToken.sol\\\";\\nimport \\\"./interfaces/IPollutionNft.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {methods} from \\\"./Library.sol\\\";\\n\\ncontract CityCitizen is Initializable {\\n    //for login purposes\\n\\n    mapping(address => classes.Citizen) private citizens;\\n    mapping(address => classes.Industry) private industries;\\n    uint256 private constant multiplier = 10 ** 18; //18 are the decimals\\n    IPollutionToken private pt;\\n    address private admin;\\n    IDSESCenter private dsesCenter;\\n    IPollutionNft private pnft;\\n    event NoTokenCitizen(address indexed citizenAddr);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IPollutionToken ptContractAddress,\\n        IDSESCenter dsesCenterAddress,\\n        IPollutionNft pnftAddress\\n    ) public initializer {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pnft = pnftAddress;\\n        dsesCenter = dsesCenterAddress;\\n        pnft.storeContractAddress(address(this), msg.sender);\\n        pt.storeContractAddress(address(this), msg.sender);\\n    }\\n\\n    function updateContractAddress(address newAddr) public onlyAdmin {\\n        //used when redeployed only PollutionToken contract\\n        pt = IPollutionToken(newAddr);\\n        pt.storeContractAddress(address(this), msg.sender);\\n    }\\n\\n    function getContractAddress() public view returns (address) {\\n        return address(pt);\\n    }\\n\\n    function getThisAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getAdminAddress() public view returns (address) {\\n        return admin;\\n    }\\n\\n    function addCitizen(\\n        string memory name,\\n        address citizenAddr,\\n        uint256 checkedTimestamp,\\n        string memory surname,\\n        string memory email,\\n        string memory dateOfBirth,\\n        uint256 telephone,\\n        string memory physicalAddress\\n    ) public {\\n        require(\\n            dsesCenter.checkExistingCity(msg.sender) &&\\n                !checkExistingCitizen(citizenAddr),\\n            \\\"You are not a city or citizen already exist\\\"\\n        );\\n\\n        //uint256 tokensAssigned = tokenToBeAssigned(); //this is omitted for semplicity and testing and it is used a constant value\\n        //uint256 tokensAssigned = 30 * multiplier;\\n        pt.transferForCities(msg.sender, citizenAddr, tokenToBeAssigned());\\n        uint256 id = pt.getUserCount();\\n        citizens[citizenAddr] = classes.Citizen(\\n            name,\\n            checkedTimestamp,\\n            surname,\\n            email,\\n            dateOfBirth,\\n            telephone,\\n            physicalAddress,\\n            id\\n        );\\n        //\\n    }\\n\\n    function tokenToBeAssigned() public view returns (uint256) {\\n        /*\\n        classes.City memory city = dsesCenter.getCityByAddr(msg.sender);\\n        return\\n            (pt.getBalanceOf(msg.sender) / //balanceOfCity/(cityPopulation+20*cityNumberOfIndustries). 20 is an arbitrary number, just to allocate more tokens to industries\\n                (city.population + 20 * city.numberOfIndustries)) * multiplier; //getCityByAddr used because A struct is an example of a dynamically sized type that can only be passed around internally\\n    */\\n        return 30 * multiplier;\\n    }\\n\\n    function consumePTFromCitizen(uint256 amountUsed) public {\\n        uint256 balanceOfCitizen = pt.getBalanceOf(msg.sender);\\n        address previousSender = pt.getPreviousSender(msg.sender);\\n        checkForExpiredToken(balanceOfCitizen, previousSender);\\n        if (balanceOfCitizen != 0) {\\n            pt.transferExtended(\\n                msg.sender,\\n                previousSender,\\n                amountUsed * multiplier //can be also used a formula to calculate the amount of token to transfer\\n            );\\n        } else {\\n            emit NoTokenCitizen(msg.sender);\\n        }\\n    }\\n\\n    function returnBalanceOfCitizen() public view returns (uint256) {\\n        return pt.getBalanceOf(msg.sender);\\n    }\\n\\n    function checkForExpiredToken(\\n        uint256 balanceOfCitizen,\\n        address previousSender\\n    ) private {\\n        if (\\n            (block.timestamp - citizens[msg.sender].checkedTimestamp) >= //check if 30 days as passed\\n            methods.dayTimestamp(30)\\n        ) {\\n            //uint256 balanceOfCitizen = pt.getBalanceOf(msg.sender);\\n            checkForNft(balanceOfCitizen);\\n            pt.transferExtended(\\n                previousSender,\\n                msg.sender,\\n                tokenToBeAssigned() - balanceOfCitizen //example: 30 fixed tokens - 17 of balanceOfCitizen=13 token to be refilled to the citizen\\n            ); //return back to the state the tokens remained\\n            citizens[msg.sender].checkedTimestamp = block.timestamp; //update citizen timestamp with the new timestamp of the actual date\\n        }\\n    }\\n\\n    function getCitizen(\\n        address citizenAddr\\n    ) public view returns (classes.Citizen memory) {\\n        return citizens[citizenAddr];\\n    }\\n\\n    function checkForNft(uint256 balanceOfCitizen) public {\\n        //modify to private after testing\\n        {\\n            //uint256 balanceOfCitizen = pt.getBalanceOf(msg.sender);\\n            if (\\n                (balanceOfCitizen > 5 * multiplier) &&\\n                (balanceOfCitizen <= 10 * multiplier)\\n            ) //5 and 10 are random numbers, we want to check that 5<=balanceOfCitizen<=10 Pollution tokens\\n            {\\n                pnft.mintNftCitizen(msg.sender, 0); //level 1 nft\\n            } else if (\\n                (balanceOfCitizen > 10 * multiplier) &&\\n                (balanceOfCitizen <= 28 * multiplier)\\n            ) {\\n                pnft.mintNftCitizen(msg.sender, 1);\\n            }\\n        }\\n    }\\n\\n    function getPreviousSender() public view returns (address) {\\n        return pt.getPreviousSender(msg.sender);\\n    }\\n\\n    function returnBalanceOf() public view returns (uint256) {\\n        return pt.getBalanceOf(msg.sender);\\n    }\\n\\n    //PROVA AD EREDITARE METODI PER I CHECK, USA EREDIT\\u00e0 CONTRATTI\\n    function checkExistingCitizen(\\n        address citizenAddr\\n    ) public view returns (bool) {\\n        return bytes(citizens[citizenAddr].name).length > 0;\\n    }\\n\\n    function deleteCitizen(address citizenAddr) public onlyCity {\\n        pt.transferExtended(\\n            citizenAddr,\\n            msg.sender,\\n            pt.getBalanceOf(citizenAddr)\\n        );\\n        delete citizens[citizenAddr];\\n    }\\n\\n    function returncheckedTimestamp() public view returns (bool) {\\n        return\\n            block.timestamp - citizens[msg.sender].checkedTimestamp >\\n            methods.dayTimestamp(30);\\n    }\\n\\n    function returnBlockTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function returnNewTimestamp() public view returns (uint256) {\\n        return citizens[msg.sender].checkedTimestamp;\\n    }\\n\\n    modifier onlyCity() {\\n        require(\\n            dsesCenter.checkExistingCity(msg.sender),\\n            \\\"You are not allowed to do that. You are not a city\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyAdmin() {\\n        require(\\n            (msg.sender == admin),\\n            \\\"You are not the owner of this contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier checkMonthHasPassed() {\\n        if (\\n            (block.timestamp - citizens[msg.sender].checkedTimestamp) >=\\n            methods.dayTimestamp(30)\\n        ) _;\\n    }\\n}\\n\",\"keccak256\":\"0x8660aa79df1ef5427acab4d440691fe1a2dce9c8d34813c0803c7e3343684a00\",\"license\":\"MIT\"},\"contracts/Classes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary classes {\\n    struct State {\\n        string name;\\n        string iso;\\n        int numberOfCities;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct City {\\n        string name;\\n        uint256 population;\\n        uint256 numberOfIndustries;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct Citizen {\\n        string name;\\n        uint256 checkedTimestamp;\\n        string surname;\\n        string email;\\n        string dateOfBirth;\\n        uint256 telephone;\\n        string physicalAddress;\\n        uint256 id; //used for bip44 wallet\\n    }\\n    struct Industry {\\n        string name;\\n        uint256 registrationTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x6c9b5f31fb593d10d8359ffb11b7a255351827bb5db42da6832ab73124bd3d32\",\"license\":\"MIT\"},\"contracts/Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary methods {\\n    function dayTimestamp(\\n        uint256 numberOfDays\\n    ) internal pure returns (uint256) {\\n        return numberOfDays * 86400; //86400 is the number of seconds in one day\\n    }\\n}\\n\",\"keccak256\":\"0x68e38688f0d7e6774c7f661f6e9964f843f721b2ce64a8108c3af0100dade71c\",\"license\":\"MIT\"},\"contracts/interfaces/IDSESCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"../Classes.sol\\\";\\n\\ninterface IDSESCenter {\\n    function getCityByAddr(\\n        address cityAddr\\n    ) external view returns (classes.City memory);\\n\\n    function checkExistingCity(address cityAddr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xae9557919ffee5b25fcb016ed925f56f28f3233c04a6d857560b4a6c2d006527\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionNft {\\n    function mintNftIndustry(address to, uint256 level) external;\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function mintNftCitizen(address to, uint256 level) external;\\n}\\n\",\"keccak256\":\"0xa40b3b917229cf13af49f57fa2559a960001869b5f554913000e49307edbdd11\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionToken {\\n    function transferExtended(address from, address to, uint256 value) external;\\n\\n    function getPreviousSender(address from) external view returns (address);\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function getBalanceOf(address addr) external view returns (uint256);\\n\\n    function transferForCities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function getUserCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d656106009916eb1696c7a4f17ca815fa2d5e61baab653a986e368c1922dbf6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b6129d280620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063b7e39a43116100a2578063c335963d11610071578063c335963d146102ab578063c6e92e6a146102db578063d3953822146102f7578063f556d1d414610315578063f907306e1461033357610116565b8063b7e39a4314610225578063bdf3e08814610243578063c0c53b8b1461025f578063c2411dab1461027b57610116565b80634db1b468116100e95780634db1b468146101915780638cc6ffe0146101af5780638d68d807146101cd578063a5c540bd146101e9578063b2e6b9121461020757610116565b80631de3b3281461011b5780632b86a4491461013957806332a2c5d0146101575780634a2aeeef14610175575b600080fd5b61012361034f565b6040516101309190611ade565b60405180910390f35b6101416103f2565b60405161014e9190611b3a565b60405180910390f35b61015f610495565b60405161016c9190611b3a565b60405180910390f35b61018f600480360381019061018a9190611d07565b6104bf565b005b6101996107ec565b6040516101a69190611ade565b60405180910390f35b6101b7610836565b6040516101c49190611e64565b60405180910390f35b6101e760048036038101906101e29190611e7f565b610896565b005b6101f1610b4a565b6040516101fe9190611ade565b60405180910390f35b61020f610bed565b60405161021c9190611b3a565b60405180910390f35b61022d610c17565b60405161023a9190611ade565b60405180910390f35b61025d60048036038101906102589190611e7f565b610c33565b005b61027960048036038101906102749190611f66565b610d96565b005b61029560048036038101906102909190611e7f565b6110f1565b6040516102a29190612113565b60405180910390f35b6102c560048036038101906102c09190611e7f565b611443565b6040516102d29190611e64565b60405180910390f35b6102f560048036038101906102f09190612135565b61149d565b005b6102ff61163f565b60405161030c9190611b3a565b60405180910390f35b61031d611647565b60405161032a9190611ade565b60405180910390f35b61034d60048036038101906103489190612135565b61164f565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b81526004016103ac9190611b3a565b602060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190612177565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b815260040161044f9190611b3a565b602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049091906121b9565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b815260040161051a9190611b3a565b602060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190612212565b801561056d575061056b87611443565b155b6105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a3906122c2565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c285b37133896105f4610c17565b6040518463ffffffff1660e01b8152600401610612939291906122e2565b600060405180830381600087803b15801561062c57600080fd5b505af1158015610640573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5cb15f76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190612177565b90506040518061010001604052808a815260200188815260200187815260200186815260200185815260200184815260200183815260200182815250600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816107679190612525565b506020820151816001015560408201518160020190816107879190612525565b50606082015181600301908161079d9190612525565b5060808201518160040190816107b39190612525565b5060a0820151816005015560c08201518160060190816107d39190612525565b5060e08201518160070155905050505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b6000610842601e611893565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426108909190612626565b11905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b81526004016108f19190611b3a565b602060405180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190612212565b610971576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610968906126cc565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece866040518263ffffffff1660e01b8152600401610a0c9190611b3a565b602060405180830381865afa158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d9190612177565b6040518463ffffffff1660e01b8152600401610a6b939291906122e2565b600060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b50505050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000610aed9190611a23565b6001820160009055600282016000610b059190611a23565b600382016000610b159190611a23565b600482016000610b259190611a23565b6005820160009055600682016000610b3d9190611a23565b6007820160009055505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b8152600401610ba79190611b3a565b602060405180830381865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190612177565b905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000670de0b6b3a7640000601e610c2e91906126ec565b905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba906127a0565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610d619291906127c0565b600060405180830381600087803b158015610d7b57600080fd5b505af1158015610d8f573d6000803e3d6000fd5b5050505050565b60008060019054906101000a900460ff16159050808015610dc75750600160008054906101000a900460ff1660ff16105b80610df45750610dd6306118ab565b158015610df35750600160008054906101000a900460ff1660ff16145b5b610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a9061285b565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610e70576001600060016101000a81548160ff0219169083151502179055505b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610fd19291906127c0565b600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b81526004016110609291906127c0565b600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b5050505080156110eb5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516110e291906128c3565b60405180910390a15b50505050565b6110f9611a63565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201805461115490612348565b80601f016020809104026020016040519081016040528092919081815260200182805461118090612348565b80156111cd5780601f106111a2576101008083540402835291602001916111cd565b820191906000526020600020905b8154815290600101906020018083116111b057829003601f168201915b50505050508152602001600182015481526020016002820180546111f090612348565b80601f016020809104026020016040519081016040528092919081815260200182805461121c90612348565b80156112695780601f1061123e57610100808354040283529160200191611269565b820191906000526020600020905b81548152906001019060200180831161124c57829003601f168201915b5050505050815260200160038201805461128290612348565b80601f01602080910402602001604051908101604052809291908181526020018280546112ae90612348565b80156112fb5780601f106112d0576101008083540402835291602001916112fb565b820191906000526020600020905b8154815290600101906020018083116112de57829003601f168201915b5050505050815260200160048201805461131490612348565b80601f016020809104026020016040519081016040528092919081815260200182805461134090612348565b801561138d5780601f106113625761010080835404028352916020019161138d565b820191906000526020600020905b81548152906001019060200180831161137057829003601f168201915b50505050508152602001600582015481526020016006820180546113b090612348565b80601f01602080910402602001604051908101604052809291908181526020018280546113dc90612348565b80156114295780601f106113fe57610100808354040283529160200191611429565b820191906000526020600020905b81548152906001019060200180831161140c57829003601f168201915b505050505081526020016007820154815250509050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461149390612348565b9050119050919050565b670de0b6b3a764000060056114b291906126ec565b811180156114d45750670de0b6b3a7640000600a6114d091906126ec565b8111155b1561156e57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360006040518363ffffffff1660e01b8152600401611537929190612919565b600060405180830381600087803b15801561155157600080fd5b505af1158015611565573d6000803e3d6000fd5b5050505061163c565b670de0b6b3a7640000600a61158391906126ec565b811180156115a55750670de0b6b3a7640000601c6115a191906126ec565b8111155b1561163b57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360016040518363ffffffff1660e01b8152600401611608929190612973565b600060405180830381600087803b15801561162257600080fd5b505af1158015611636573d6000803e3d6000fd5b505050505b5b50565b600030905090565b600042905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b81526004016116ac9190611b3a565b602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612177565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b815260040161174c9190611b3a565b602060405180830381865afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906121b9565b905061179982826118ce565b6000821461184a57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23383670de0b6b3a7640000876117f591906126ec565b6040518463ffffffff1660e01b8152600401611813939291906122e2565b600060405180830381600087803b15801561182d57600080fd5b505af1158015611841573d6000803e3d6000fd5b5050505061188e565b3373ffffffffffffffffffffffffffffffffffffffff167f7a7230630292a4612abe2c86d2590f073249f753951d2032d1263cc156a47ce260405160405180910390a25b505050565b600062015180826118a491906126ec565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6118d8601e611893565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426119269190612626565b10611a1f576119348261149d565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f282338561197d610c17565b6119879190612626565b6040518463ffffffff1660e01b81526004016119a5939291906122e2565b600060405180830381600087803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b5050505042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5050565b508054611a2f90612348565b6000825580601f10611a415750611a60565b601f016020900490600052602060002090810190611a5f9190611aa8565b5b50565b60405180610100016040528060608152602001600081526020016060815260200160608152602001606081526020016000815260200160608152602001600081525090565b5b80821115611ac1576000816000905550600101611aa9565b5090565b6000819050919050565b611ad881611ac5565b82525050565b6000602082019050611af36000830184611acf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2482611af9565b9050919050565b611b3481611b19565b82525050565b6000602082019050611b4f6000830184611b2b565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bbc82611b73565b810181811067ffffffffffffffff82111715611bdb57611bda611b84565b5b80604052505050565b6000611bee611b55565b9050611bfa8282611bb3565b919050565b600067ffffffffffffffff821115611c1a57611c19611b84565b5b611c2382611b73565b9050602081019050919050565b82818337600083830152505050565b6000611c52611c4d84611bff565b611be4565b905082815260208101848484011115611c6e57611c6d611b6e565b5b611c79848285611c30565b509392505050565b600082601f830112611c9657611c95611b69565b5b8135611ca6848260208601611c3f565b91505092915050565b611cb881611b19565b8114611cc357600080fd5b50565b600081359050611cd581611caf565b92915050565b611ce481611ac5565b8114611cef57600080fd5b50565b600081359050611d0181611cdb565b92915050565b600080600080600080600080610100898b031215611d2857611d27611b5f565b5b600089013567ffffffffffffffff811115611d4657611d45611b64565b5b611d528b828c01611c81565b9850506020611d638b828c01611cc6565b9750506040611d748b828c01611cf2565b965050606089013567ffffffffffffffff811115611d9557611d94611b64565b5b611da18b828c01611c81565b955050608089013567ffffffffffffffff811115611dc257611dc1611b64565b5b611dce8b828c01611c81565b94505060a089013567ffffffffffffffff811115611def57611dee611b64565b5b611dfb8b828c01611c81565b93505060c0611e0c8b828c01611cf2565b92505060e089013567ffffffffffffffff811115611e2d57611e2c611b64565b5b611e398b828c01611c81565b9150509295985092959890939650565b60008115159050919050565b611e5e81611e49565b82525050565b6000602082019050611e796000830184611e55565b92915050565b600060208284031215611e9557611e94611b5f565b5b6000611ea384828501611cc6565b91505092915050565b6000611eb782611b19565b9050919050565b611ec781611eac565b8114611ed257600080fd5b50565b600081359050611ee481611ebe565b92915050565b6000611ef582611b19565b9050919050565b611f0581611eea565b8114611f1057600080fd5b50565b600081359050611f2281611efc565b92915050565b6000611f3382611b19565b9050919050565b611f4381611f28565b8114611f4e57600080fd5b50565b600081359050611f6081611f3a565b92915050565b600080600060608486031215611f7f57611f7e611b5f565b5b6000611f8d86828701611ed5565b9350506020611f9e86828701611f13565b9250506040611faf86828701611f51565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ff3578082015181840152602081019050611fd8565b60008484015250505050565b600061200a82611fb9565b6120148185611fc4565b9350612024818560208601611fd5565b61202d81611b73565b840191505092915050565b61204181611ac5565b82525050565b60006101008301600083015184820360008601526120658282611fff565b915050602083015161207a6020860182612038565b50604083015184820360408601526120928282611fff565b915050606083015184820360608601526120ac8282611fff565b915050608083015184820360808601526120c68282611fff565b91505060a08301516120db60a0860182612038565b5060c083015184820360c08601526120f38282611fff565b91505060e083015161210860e0860182612038565b508091505092915050565b6000602082019050818103600083015261212d8184612047565b905092915050565b60006020828403121561214b5761214a611b5f565b5b600061215984828501611cf2565b91505092915050565b60008151905061217181611cdb565b92915050565b60006020828403121561218d5761218c611b5f565b5b600061219b84828501612162565b91505092915050565b6000815190506121b381611caf565b92915050565b6000602082840312156121cf576121ce611b5f565b5b60006121dd848285016121a4565b91505092915050565b6121ef81611e49565b81146121fa57600080fd5b50565b60008151905061220c816121e6565b92915050565b60006020828403121561222857612227611b5f565b5b6000612236848285016121fd565b91505092915050565b600082825260208201905092915050565b7f596f7520617265206e6f7420612063697479206f7220636974697a656e20616c60008201527f7265616479206578697374000000000000000000000000000000000000000000602082015250565b60006122ac602b8361223f565b91506122b782612250565b604082019050919050565b600060208201905081810360008301526122db8161229f565b9050919050565b60006060820190506122f76000830186611b2b565b6123046020830185611b2b565b6123116040830184611acf565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061236057607f821691505b60208210810361237357612372612319565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261239e565b6123e5868361239e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061242261241d61241884611ac5565b6123fd565b611ac5565b9050919050565b6000819050919050565b61243c83612407565b61245061244882612429565b8484546123ab565b825550505050565b600090565b612465612458565b612470818484612433565b505050565b5b818110156124945761248960008261245d565b600181019050612476565b5050565b601f8211156124d9576124aa81612379565b6124b38461238e565b810160208510156124c2578190505b6124d66124ce8561238e565b830182612475565b50505b505050565b600082821c905092915050565b60006124fc600019846008026124de565b1980831691505092915050565b600061251583836124eb565b9150826002028217905092915050565b61252e82611fb9565b67ffffffffffffffff81111561254757612546611b84565b5b6125518254612348565b61255c828285612498565b600060209050601f83116001811461258f576000841561257d578287015190505b6125878582612509565b8655506125ef565b601f19841661259d86612379565b60005b828110156125c5578489015182556001820191506020850194506020810190506125a0565b868310156125e257848901516125de601f8916826124eb565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061263182611ac5565b915061263c83611ac5565b9250828203905081811115612654576126536125f7565b5b92915050565b7f596f7520617265206e6f7420616c6c6f77656420746f20646f20746861742e2060008201527f596f7520617265206e6f74206120636974790000000000000000000000000000602082015250565b60006126b660328361223f565b91506126c18261265a565b604082019050919050565b600060208201905081810360008301526126e5816126a9565b9050919050565b60006126f782611ac5565b915061270283611ac5565b925082820261271081611ac5565b91508282048414831517612727576127266125f7565b5b5092915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061278a60268361223f565b91506127958261272e565b604082019050919050565b600060208201905081810360008301526127b98161277d565b9050919050565b60006040820190506127d56000830185611b2b565b6127e26020830184611b2b565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612845602e8361223f565b9150612850826127e9565b604082019050919050565b6000602082019050818103600083015261287481612838565b9050919050565b6000819050919050565b600060ff82169050919050565b60006128ad6128a86128a38461287b565b6123fd565b612885565b9050919050565b6128bd81612892565b82525050565b60006020820190506128d860008301846128b4565b92915050565b6000819050919050565b60006129036128fe6128f9846128de565b6123fd565b611ac5565b9050919050565b612913816128e8565b82525050565b600060408201905061292e6000830185611b2b565b61293b602083018461290a565b9392505050565b600061295d6129586129538461287b565b6123fd565b611ac5565b9050919050565b61296d81612942565b82525050565b60006040820190506129886000830185611b2b565b6129956020830184612964565b939250505056fea2646970667358221220ae890c24ade19f9491a30d2144aaba8e31e4eb9c4f5ddd231adf6d0eb043cc9b64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063b7e39a43116100a2578063c335963d11610071578063c335963d146102ab578063c6e92e6a146102db578063d3953822146102f7578063f556d1d414610315578063f907306e1461033357610116565b8063b7e39a4314610225578063bdf3e08814610243578063c0c53b8b1461025f578063c2411dab1461027b57610116565b80634db1b468116100e95780634db1b468146101915780638cc6ffe0146101af5780638d68d807146101cd578063a5c540bd146101e9578063b2e6b9121461020757610116565b80631de3b3281461011b5780632b86a4491461013957806332a2c5d0146101575780634a2aeeef14610175575b600080fd5b61012361034f565b6040516101309190611ade565b60405180910390f35b6101416103f2565b60405161014e9190611b3a565b60405180910390f35b61015f610495565b60405161016c9190611b3a565b60405180910390f35b61018f600480360381019061018a9190611d07565b6104bf565b005b6101996107ec565b6040516101a69190611ade565b60405180910390f35b6101b7610836565b6040516101c49190611e64565b60405180910390f35b6101e760048036038101906101e29190611e7f565b610896565b005b6101f1610b4a565b6040516101fe9190611ade565b60405180910390f35b61020f610bed565b60405161021c9190611b3a565b60405180910390f35b61022d610c17565b60405161023a9190611ade565b60405180910390f35b61025d60048036038101906102589190611e7f565b610c33565b005b61027960048036038101906102749190611f66565b610d96565b005b61029560048036038101906102909190611e7f565b6110f1565b6040516102a29190612113565b60405180910390f35b6102c560048036038101906102c09190611e7f565b611443565b6040516102d29190611e64565b60405180910390f35b6102f560048036038101906102f09190612135565b61149d565b005b6102ff61163f565b60405161030c9190611b3a565b60405180910390f35b61031d611647565b60405161032a9190611ade565b60405180910390f35b61034d60048036038101906103489190612135565b61164f565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b81526004016103ac9190611b3a565b602060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190612177565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b815260040161044f9190611b3a565b602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049091906121b9565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b815260040161051a9190611b3a565b602060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190612212565b801561056d575061056b87611443565b155b6105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a3906122c2565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c285b37133896105f4610c17565b6040518463ffffffff1660e01b8152600401610612939291906122e2565b600060405180830381600087803b15801561062c57600080fd5b505af1158015610640573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5cb15f76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190612177565b90506040518061010001604052808a815260200188815260200187815260200186815260200185815260200184815260200183815260200182815250600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816107679190612525565b506020820151816001015560408201518160020190816107879190612525565b50606082015181600301908161079d9190612525565b5060808201518160040190816107b39190612525565b5060a0820151816005015560c08201518160060190816107d39190612525565b5060e08201518160070155905050505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b6000610842601e611893565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426108909190612626565b11905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b81526004016108f19190611b3a565b602060405180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190612212565b610971576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610968906126cc565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece866040518263ffffffff1660e01b8152600401610a0c9190611b3a565b602060405180830381865afa158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d9190612177565b6040518463ffffffff1660e01b8152600401610a6b939291906122e2565b600060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b50505050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000610aed9190611a23565b6001820160009055600282016000610b059190611a23565b600382016000610b159190611a23565b600482016000610b259190611a23565b6005820160009055600682016000610b3d9190611a23565b6007820160009055505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b8152600401610ba79190611b3a565b602060405180830381865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190612177565b905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000670de0b6b3a7640000601e610c2e91906126ec565b905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba906127a0565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610d619291906127c0565b600060405180830381600087803b158015610d7b57600080fd5b505af1158015610d8f573d6000803e3d6000fd5b5050505050565b60008060019054906101000a900460ff16159050808015610dc75750600160008054906101000a900460ff1660ff16105b80610df45750610dd6306118ab565b158015610df35750600160008054906101000a900460ff1660ff16145b5b610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a9061285b565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610e70576001600060016101000a81548160ff0219169083151502179055505b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610fd19291906127c0565b600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b81526004016110609291906127c0565b600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b5050505080156110eb5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516110e291906128c3565b60405180910390a15b50505050565b6110f9611a63565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201805461115490612348565b80601f016020809104026020016040519081016040528092919081815260200182805461118090612348565b80156111cd5780601f106111a2576101008083540402835291602001916111cd565b820191906000526020600020905b8154815290600101906020018083116111b057829003601f168201915b50505050508152602001600182015481526020016002820180546111f090612348565b80601f016020809104026020016040519081016040528092919081815260200182805461121c90612348565b80156112695780601f1061123e57610100808354040283529160200191611269565b820191906000526020600020905b81548152906001019060200180831161124c57829003601f168201915b5050505050815260200160038201805461128290612348565b80601f01602080910402602001604051908101604052809291908181526020018280546112ae90612348565b80156112fb5780601f106112d0576101008083540402835291602001916112fb565b820191906000526020600020905b8154815290600101906020018083116112de57829003601f168201915b5050505050815260200160048201805461131490612348565b80601f016020809104026020016040519081016040528092919081815260200182805461134090612348565b801561138d5780601f106113625761010080835404028352916020019161138d565b820191906000526020600020905b81548152906001019060200180831161137057829003601f168201915b50505050508152602001600582015481526020016006820180546113b090612348565b80601f01602080910402602001604051908101604052809291908181526020018280546113dc90612348565b80156114295780601f106113fe57610100808354040283529160200191611429565b820191906000526020600020905b81548152906001019060200180831161140c57829003601f168201915b505050505081526020016007820154815250509050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461149390612348565b9050119050919050565b670de0b6b3a764000060056114b291906126ec565b811180156114d45750670de0b6b3a7640000600a6114d091906126ec565b8111155b1561156e57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360006040518363ffffffff1660e01b8152600401611537929190612919565b600060405180830381600087803b15801561155157600080fd5b505af1158015611565573d6000803e3d6000fd5b5050505061163c565b670de0b6b3a7640000600a61158391906126ec565b811180156115a55750670de0b6b3a7640000601c6115a191906126ec565b8111155b1561163b57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360016040518363ffffffff1660e01b8152600401611608929190612973565b600060405180830381600087803b15801561162257600080fd5b505af1158015611636573d6000803e3d6000fd5b505050505b5b50565b600030905090565b600042905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b81526004016116ac9190611b3a565b602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612177565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b815260040161174c9190611b3a565b602060405180830381865afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906121b9565b905061179982826118ce565b6000821461184a57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23383670de0b6b3a7640000876117f591906126ec565b6040518463ffffffff1660e01b8152600401611813939291906122e2565b600060405180830381600087803b15801561182d57600080fd5b505af1158015611841573d6000803e3d6000fd5b5050505061188e565b3373ffffffffffffffffffffffffffffffffffffffff167f7a7230630292a4612abe2c86d2590f073249f753951d2032d1263cc156a47ce260405160405180910390a25b505050565b600062015180826118a491906126ec565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6118d8601e611893565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426119269190612626565b10611a1f576119348261149d565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f282338561197d610c17565b6119879190612626565b6040518463ffffffff1660e01b81526004016119a5939291906122e2565b600060405180830381600087803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b5050505042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5050565b508054611a2f90612348565b6000825580601f10611a415750611a60565b601f016020900490600052602060002090810190611a5f9190611aa8565b5b50565b60405180610100016040528060608152602001600081526020016060815260200160608152602001606081526020016000815260200160608152602001600081525090565b5b80821115611ac1576000816000905550600101611aa9565b5090565b6000819050919050565b611ad881611ac5565b82525050565b6000602082019050611af36000830184611acf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2482611af9565b9050919050565b611b3481611b19565b82525050565b6000602082019050611b4f6000830184611b2b565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bbc82611b73565b810181811067ffffffffffffffff82111715611bdb57611bda611b84565b5b80604052505050565b6000611bee611b55565b9050611bfa8282611bb3565b919050565b600067ffffffffffffffff821115611c1a57611c19611b84565b5b611c2382611b73565b9050602081019050919050565b82818337600083830152505050565b6000611c52611c4d84611bff565b611be4565b905082815260208101848484011115611c6e57611c6d611b6e565b5b611c79848285611c30565b509392505050565b600082601f830112611c9657611c95611b69565b5b8135611ca6848260208601611c3f565b91505092915050565b611cb881611b19565b8114611cc357600080fd5b50565b600081359050611cd581611caf565b92915050565b611ce481611ac5565b8114611cef57600080fd5b50565b600081359050611d0181611cdb565b92915050565b600080600080600080600080610100898b031215611d2857611d27611b5f565b5b600089013567ffffffffffffffff811115611d4657611d45611b64565b5b611d528b828c01611c81565b9850506020611d638b828c01611cc6565b9750506040611d748b828c01611cf2565b965050606089013567ffffffffffffffff811115611d9557611d94611b64565b5b611da18b828c01611c81565b955050608089013567ffffffffffffffff811115611dc257611dc1611b64565b5b611dce8b828c01611c81565b94505060a089013567ffffffffffffffff811115611def57611dee611b64565b5b611dfb8b828c01611c81565b93505060c0611e0c8b828c01611cf2565b92505060e089013567ffffffffffffffff811115611e2d57611e2c611b64565b5b611e398b828c01611c81565b9150509295985092959890939650565b60008115159050919050565b611e5e81611e49565b82525050565b6000602082019050611e796000830184611e55565b92915050565b600060208284031215611e9557611e94611b5f565b5b6000611ea384828501611cc6565b91505092915050565b6000611eb782611b19565b9050919050565b611ec781611eac565b8114611ed257600080fd5b50565b600081359050611ee481611ebe565b92915050565b6000611ef582611b19565b9050919050565b611f0581611eea565b8114611f1057600080fd5b50565b600081359050611f2281611efc565b92915050565b6000611f3382611b19565b9050919050565b611f4381611f28565b8114611f4e57600080fd5b50565b600081359050611f6081611f3a565b92915050565b600080600060608486031215611f7f57611f7e611b5f565b5b6000611f8d86828701611ed5565b9350506020611f9e86828701611f13565b9250506040611faf86828701611f51565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ff3578082015181840152602081019050611fd8565b60008484015250505050565b600061200a82611fb9565b6120148185611fc4565b9350612024818560208601611fd5565b61202d81611b73565b840191505092915050565b61204181611ac5565b82525050565b60006101008301600083015184820360008601526120658282611fff565b915050602083015161207a6020860182612038565b50604083015184820360408601526120928282611fff565b915050606083015184820360608601526120ac8282611fff565b915050608083015184820360808601526120c68282611fff565b91505060a08301516120db60a0860182612038565b5060c083015184820360c08601526120f38282611fff565b91505060e083015161210860e0860182612038565b508091505092915050565b6000602082019050818103600083015261212d8184612047565b905092915050565b60006020828403121561214b5761214a611b5f565b5b600061215984828501611cf2565b91505092915050565b60008151905061217181611cdb565b92915050565b60006020828403121561218d5761218c611b5f565b5b600061219b84828501612162565b91505092915050565b6000815190506121b381611caf565b92915050565b6000602082840312156121cf576121ce611b5f565b5b60006121dd848285016121a4565b91505092915050565b6121ef81611e49565b81146121fa57600080fd5b50565b60008151905061220c816121e6565b92915050565b60006020828403121561222857612227611b5f565b5b6000612236848285016121fd565b91505092915050565b600082825260208201905092915050565b7f596f7520617265206e6f7420612063697479206f7220636974697a656e20616c60008201527f7265616479206578697374000000000000000000000000000000000000000000602082015250565b60006122ac602b8361223f565b91506122b782612250565b604082019050919050565b600060208201905081810360008301526122db8161229f565b9050919050565b60006060820190506122f76000830186611b2b565b6123046020830185611b2b565b6123116040830184611acf565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061236057607f821691505b60208210810361237357612372612319565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261239e565b6123e5868361239e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061242261241d61241884611ac5565b6123fd565b611ac5565b9050919050565b6000819050919050565b61243c83612407565b61245061244882612429565b8484546123ab565b825550505050565b600090565b612465612458565b612470818484612433565b505050565b5b818110156124945761248960008261245d565b600181019050612476565b5050565b601f8211156124d9576124aa81612379565b6124b38461238e565b810160208510156124c2578190505b6124d66124ce8561238e565b830182612475565b50505b505050565b600082821c905092915050565b60006124fc600019846008026124de565b1980831691505092915050565b600061251583836124eb565b9150826002028217905092915050565b61252e82611fb9565b67ffffffffffffffff81111561254757612546611b84565b5b6125518254612348565b61255c828285612498565b600060209050601f83116001811461258f576000841561257d578287015190505b6125878582612509565b8655506125ef565b601f19841661259d86612379565b60005b828110156125c5578489015182556001820191506020850194506020810190506125a0565b868310156125e257848901516125de601f8916826124eb565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061263182611ac5565b915061263c83611ac5565b9250828203905081811115612654576126536125f7565b5b92915050565b7f596f7520617265206e6f7420616c6c6f77656420746f20646f20746861742e2060008201527f596f7520617265206e6f74206120636974790000000000000000000000000000602082015250565b60006126b660328361223f565b91506126c18261265a565b604082019050919050565b600060208201905081810360008301526126e5816126a9565b9050919050565b60006126f782611ac5565b915061270283611ac5565b925082820261271081611ac5565b91508282048414831517612727576127266125f7565b5b5092915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061278a60268361223f565b91506127958261272e565b604082019050919050565b600060208201905081810360008301526127b98161277d565b9050919050565b60006040820190506127d56000830185611b2b565b6127e26020830184611b2b565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612845602e8361223f565b9150612850826127e9565b604082019050919050565b6000602082019050818103600083015261287481612838565b9050919050565b6000819050919050565b600060ff82169050919050565b60006128ad6128a86128a38461287b565b6123fd565b612885565b9050919050565b6128bd81612892565b82525050565b60006020820190506128d860008301846128b4565b92915050565b6000819050919050565b60006129036128fe6128f9846128de565b6123fd565b611ac5565b9050919050565b612913816128e8565b82525050565b600060408201905061292e6000830185611b2b565b61293b602083018461290a565b9392505050565b600061295d6129586129538461287b565b6123fd565b611ac5565b9050919050565b61296d81612942565b82525050565b60006040820190506129886000830185611b2b565b6129956020830184612964565b939250505056fea2646970667358221220ae890c24ade19f9491a30d2144aaba8e31e4eb9c4f5ddd231adf6d0eb043cc9b64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 514,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "citizens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Citizen)1116_storage)"
      },
      {
        "astId": 519,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "industries",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Industry)1121_storage)"
      },
      {
        "astId": 527,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "pt",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPollutionToken)1227"
      },
      {
        "astId": 529,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 532,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "dsesCenter",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IDSESCenter)1156"
      },
      {
        "astId": 535,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "pnft",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPollutionNft)1180"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDSESCenter)1156": {
        "encoding": "inplace",
        "label": "contract IDSESCenter",
        "numberOfBytes": "20"
      },
      "t_contract(IPollutionNft)1180": {
        "encoding": "inplace",
        "label": "contract IPollutionNft",
        "numberOfBytes": "20"
      },
      "t_contract(IPollutionToken)1227": {
        "encoding": "inplace",
        "label": "contract IPollutionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Citizen)1116_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.Citizen)",
        "numberOfBytes": "32",
        "value": "t_struct(Citizen)1116_storage"
      },
      "t_mapping(t_address,t_struct(Industry)1121_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.Industry)",
        "numberOfBytes": "32",
        "value": "t_struct(Industry)1121_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Citizen)1116_storage": {
        "encoding": "inplace",
        "label": "struct classes.Citizen",
        "members": [
          {
            "astId": 1101,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1103,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "checkedTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1105,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "surname",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1107,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1109,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "dateOfBirth",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1111,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "telephone",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1113,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "physicalAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1115,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "id",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Industry)1121_storage": {
        "encoding": "inplace",
        "label": "struct classes.Industry",
        "members": [
          {
            "astId": 1118,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1120,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}