{
  "address": "0xF9C0Eb9dCb5E7eC83Af9b3A01167844583eb5E0C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "industryAddr",
          "type": "address"
        }
      ],
      "name": "NoTokenIndustry",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "industryAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "addIndustry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "industryAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingIndustry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkForCity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkForNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUsed",
          "type": "uint256"
        }
      ],
      "name": "consumePTFromIndustry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "industryAddr",
          "type": "address"
        }
      ],
      "name": "deleteIndustry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThisAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPollutionToken",
          "name": "ptContractAddress",
          "type": "address"
        },
        {
          "internalType": "contract IDSESCenter",
          "name": "dsesCenterAddress",
          "type": "address"
        },
        {
          "internalType": "contract IPollutionNft",
          "name": "pnftAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensToBeAssigned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6246357c6666943825883f94555e2e3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"industryAddr\",\"type\":\"address\"}],\"name\":\"NoTokenIndustry\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"industryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"name\":\"addIndustry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"industryAddr\",\"type\":\"address\"}],\"name\":\"checkExistingIndustry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkForCity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkForNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"}],\"name\":\"consumePTFromIndustry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"industryAddr\",\"type\":\"address\"}],\"name\":\"deleteIndustry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPollutionToken\",\"name\":\"ptContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IDSESCenter\",\"name\":\"dsesCenterAddress\",\"type\":\"address\"},{\"internalType\":\"contract IPollutionNft\",\"name\":\"pnftAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToBeAssigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CityIndustry.sol\":\"CityIndustry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/CityIndustry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./Classes.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {methods} from \\\"./Library.sol\\\";\\nimport \\\"./interfaces/IDSESCenter.sol\\\";\\nimport \\\"./interfaces/IPollutionToken.sol\\\";\\nimport \\\"./interfaces/IPollutionNft.sol\\\";\\n\\ncontract CityIndustry is Initializable {\\n    //for login purposes\\n    mapping(address => classes.Industry) private industries;\\n    uint256 private constant multiplier = 10 ** 18; //18 are the decimals\\n    IPollutionToken private pt;\\n    address private admin;\\n    IDSESCenter private dsesCenter;\\n    IPollutionNft private pnft;\\n    event NoTokenIndustry(address indexed industryAddr);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IPollutionToken ptContractAddress,\\n        IDSESCenter dsesCenterAddress,\\n        IPollutionNft pnftAddress\\n    ) public initializer {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pnft = pnftAddress;\\n        dsesCenter = dsesCenterAddress;\\n        pnft.storeContractAddress(address(this), msg.sender);\\n        pt.storeContractAddress(address(this), msg.sender);\\n    }\\n\\n    function getContractAddress() public view returns (address) {\\n        return address(pt);\\n    }\\n\\n    function getThisAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getAdminAddress() public view returns (address) {\\n        return admin;\\n    }\\n\\n    function consumePTFromIndustry(\\n        //used by industries and Industry\\n        uint256 amountUsed\\n    ) public {\\n        if (pt.getBalanceOf(msg.sender) != 0) {\\n            pt.transferExtended(\\n                msg.sender,\\n                pt.getPreviousSender(msg.sender),\\n                amountUsed //can be also used a formula to calculate the amount of token to transfer\\n            );\\n        } else {\\n            emit NoTokenIndustry(msg.sender);\\n        }\\n    }\\n\\n    function addIndustry(\\n        string memory name,\\n        address industryAddr,\\n        uint256 registrationTimestamp\\n    ) public {\\n        require(\\n            dsesCenter.checkExistingCity(msg.sender) &&\\n                !checkExistingIndustry(industryAddr),\\n            \\\"You are not a city or industry already exist\\\"\\n        );\\n\\n        industries[industryAddr] = classes.Industry(\\n            name,\\n            registrationTimestamp\\n        );\\n        // uint256 tokensAssigned = tokensToBeAssigned(); //this is omitted for semplicity and testing and it is used a constant value\\n        uint256 tokensAssigned = 50 * multiplier;\\n        pt.transferExtended(msg.sender, industryAddr, tokensAssigned);\\n    }\\n\\n    function tokensToBeAssigned() public view returns (uint256) {\\n        classes.City memory city = dsesCenter.getCityByAddr(msg.sender);\\n        return\\n            ((20 * pt.getBalanceOf(msg.sender)) / //balanceOfCity/(cityPopulation+20*cityNumberOfIndustries). 20 is an arbitrary number, just to allocate more tokens to industries\\n                (city.population + 20 * city.numberOfIndustries)) * multiplier; //getCityByAddr used because A struct is an example of a dynamically sized type that can only be passed around internally\\n    }\\n\\n    function checkForNft() public {\\n        if (\\n            (block.timestamp - industries[msg.sender].registrationTimestamp) >=\\n            methods.dayTimestamp(30)\\n        ) {\\n            uint256 balanceOfIndustry = pt.getBalanceOf(msg.sender);\\n            if (\\n                balanceOfIndustry >= 5 * multiplier &&\\n                balanceOfIndustry <= 10 * multiplier\\n            ) //5 and 10 are random numbers, we want to check that 5<=balanceOfIndustry<=10 Pollution tokens\\n            {\\n                pnft.mintNftIndustry(msg.sender, 1); //level 1 nft\\n            } else if (\\n                balanceOfIndustry >= 11 * multiplier &&\\n                balanceOfIndustry <= 30 * multiplier\\n            ) {\\n                pnft.mintNftIndustry(msg.sender, 2); //level 2 nft\\n            }\\n        }\\n    }\\n\\n    function checkForExpiredToken() private checkMonthHasPassed {\\n        {\\n            uint256 balanceOfIndustry = pt.getBalanceOf(msg.sender);\\n            if (balanceOfIndustry != 0) {\\n                pt.transferExtended(\\n                    msg.sender,\\n                    pt.getPreviousSender(msg.sender),\\n                    balanceOfIndustry\\n                ); //return back to the state the tokens remained\\n            } else {\\n                pt.transferExtended(\\n                    pt.getPreviousSender(msg.sender),\\n                    msg.sender,\\n                    50 * multiplier\\n                    //tokenToBeAssigned() //this is omitted for semplicity and testing and it is used a constant value\\n                );\\n            }\\n        }\\n    }\\n\\n    function checkExistingIndustry(\\n        address industryAddr\\n    ) public view returns (bool) {\\n        return bytes(industries[industryAddr].name).length > 0;\\n    }\\n\\n    function deleteIndustry(address industryAddr) public onlyCity {\\n        delete industries[industryAddr];\\n    }\\n\\n    function checkForCity() public view returns (uint256) {\\n        return dsesCenter.getCityByAddr(msg.sender).population;\\n    }\\n\\n    modifier onlyCity() {\\n        require(\\n            dsesCenter.checkExistingCity(msg.sender),\\n            \\\"You are not allowed to do that. You are not a City\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier checkMonthHasPassed() {\\n        if (\\n            (block.timestamp - industries[msg.sender].registrationTimestamp) >=\\n            methods.dayTimestamp(30)\\n        ) _;\\n    }\\n}\\n\",\"keccak256\":\"0x8a7b70cf7fd69862553d9981e3bce5835afc90350ee3cd81702b46585ba7d818\",\"license\":\"MIT\"},\"contracts/Classes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary classes {\\n    struct State {\\n        string name;\\n        string iso;\\n        int numberOfCities;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct City {\\n        string name;\\n        uint256 population;\\n        uint256 numberOfIndustries;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct Citizen {\\n        string name;\\n        uint256 checkedTimestamp;\\n        string surname;\\n        string email;\\n        string dateOfBirth;\\n        uint256 telephone;\\n        string physicalAddress;\\n        uint256 id; //used for bip44 wallet\\n    }\\n    struct Industry {\\n        string name;\\n        uint256 registrationTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x6c9b5f31fb593d10d8359ffb11b7a255351827bb5db42da6832ab73124bd3d32\",\"license\":\"MIT\"},\"contracts/Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary methods {\\n    function dayTimestamp(\\n        uint256 numberOfDays\\n    ) internal pure returns (uint256) {\\n        return numberOfDays * 86400; //86400 is the number of seconds in one day\\n    }\\n}\\n\",\"keccak256\":\"0x68e38688f0d7e6774c7f661f6e9964f843f721b2ce64a8108c3af0100dade71c\",\"license\":\"MIT\"},\"contracts/interfaces/IDSESCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"../Classes.sol\\\";\\n\\ninterface IDSESCenter {\\n    function getCityByAddr(\\n        address cityAddr\\n    ) external view returns (classes.City memory);\\n\\n    function checkExistingCity(address cityAddr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xae9557919ffee5b25fcb016ed925f56f28f3233c04a6d857560b4a6c2d006527\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionNft {\\n    function mintNftIndustry(address to, uint256 level) external;\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function mintNftCitizen(address to, uint256 level) external;\\n}\\n\",\"keccak256\":\"0xa40b3b917229cf13af49f57fa2559a960001869b5f554913000e49307edbdd11\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionToken {\\n    function transferExtended(address from, address to, uint256 value) external;\\n\\n    function getPreviousSender(address from) external view returns (address);\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function getBalanceOf(address addr) external view returns (uint256);\\n\\n    function transferForCities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function getUserCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d656106009916eb1696c7a4f17ca815fa2d5e61baab653a986e368c1922dbf6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063b2e6b91211610071578063b2e6b9121461013e578063c0c53b8b1461015c578063c1ca209614610178578063c86b73bd14610196578063d3953822146101b2578063e8ebdba8146101d0576100a9565b80630382db6e146100ae5780632c5901c0146100de57806332a2c5d0146100fa57806373a3b3ee146101185780639930272b14610134575b600080fd5b6100c860048036038101906100c3919061114f565b6101ee565b6040516100d59190611197565b60405180910390f35b6100f860048036038101906100f391906111e8565b610248565b005b610102610463565b60405161010f9190611224565b60405180910390f35b610132600480360381019061012d919061114f565b61048d565b005b61013c6105c5565b005b610146610867565b6040516101539190611224565b60405180910390f35b610176600480360381019061017191906112f9565b610891565b005b610180610bec565b60405161018d919061135b565b60405180910390f35b6101b060048036038101906101ab91906114bc565b610c98565b005b6101ba610eac565b6040516101c79190611224565b60405180910390f35b6101d8610eb4565b6040516101e5919061135b565b60405180910390f35b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461023e9061155a565b9050119050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b81526004016102a59190611224565b602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906115a0565b1461041c57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b81526004016103859190611224565b602060405180830381865afa1580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c691906115e2565b846040518463ffffffff1660e01b81526004016103e59392919061160f565b600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b50505050610460565b3373ffffffffffffffffffffffffffffffffffffffff167fc9faa43a0cf9f11d06a4f856b7ae6eb03286b04a69cdbbdb74ea90288d4a431a60405160405180910390a25b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b81526004016104e89190611224565b602060405180830381865afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611672565b610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055f90611722565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006105b89190611080565b6001820160009055505050565b6105cf601e611045565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101544261061d9190611771565b10610865576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b815260040161067f9190611224565b602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c091906115a0565b9050670de0b6b3a764000060056106d791906117a5565b81101580156106fa5750670de0b6b3a7640000600a6106f691906117a5565b8111155b1561079457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663890cd4f33360016040518363ffffffff1660e01b815260040161075d92919061182c565b600060405180830381600087803b15801561077757600080fd5b505af115801561078b573d6000803e3d6000fd5b50505050610863565b670de0b6b3a7640000600b6107a991906117a5565b81101580156107cc5750670de0b6b3a7640000601e6107c891906117a5565b8111155b1561086257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663890cd4f33360026040518363ffffffff1660e01b815260040161082f929190611890565b600060405180830381600087803b15801561084957600080fd5b505af115801561085d573d6000803e3d6000fd5b505050505b5b505b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900460ff161590508080156108c25750600160008054906101000a900460ff1660ff16105b806108ef57506108d13061105d565b1580156108ee5750600160008054906101000a900460ff1660ff16145b5b61092e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109259061192b565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561096b576001600060016101000a81548160ff0219169083151502179055505b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610acc92919061194b565b600060405180830381600087803b158015610ae657600080fd5b505af1158015610afa573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610b5b92919061194b565b600060405180830381600087803b158015610b7557600080fd5b505af1158015610b89573d6000803e3d6000fd5b505050508015610be65760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610bdd91906119b2565b60405180910390a15b50505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352a3ca02336040518263ffffffff1660e01b8152600401610c499190611224565b600060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c8f9190611bc7565b60200151905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b8152600401610cf39190611224565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190611672565b8015610d465750610d44826101ee565b155b610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c90611c82565b60405180910390fd5b604051806040016040528084815260200182815250600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610dee9190611e4f565b50602082015181600101559050506000670de0b6b3a76400006032610e1391906117a5565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23385846040518463ffffffff1660e01b8152600401610e749392919061160f565b600060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b5050505050505050565b600030905090565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352a3ca02336040518263ffffffff1660e01b8152600401610f129190611224565b600060405180830381865afa158015610f2f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f589190611bc7565b9050670de0b6b3a764000081604001516014610f7491906117a5565b8260200151610f839190611f21565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b96eece336040518263ffffffff1660e01b8152600401610fde9190611224565b602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f91906115a0565b601461102b91906117a5565b6110359190611f84565b61103f91906117a5565b91505090565b6000620151808261105691906117a5565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b50805461108c9061155a565b6000825580601f1061109e57506110bd565b601f0160209004906000526020600020908101906110bc91906110c0565b5b50565b5b808211156110d95760008160009055506001016110c1565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061111c826110f1565b9050919050565b61112c81611111565b811461113757600080fd5b50565b60008135905061114981611123565b92915050565b600060208284031215611165576111646110e7565b5b60006111738482850161113a565b91505092915050565b60008115159050919050565b6111918161117c565b82525050565b60006020820190506111ac6000830184611188565b92915050565b6000819050919050565b6111c5816111b2565b81146111d057600080fd5b50565b6000813590506111e2816111bc565b92915050565b6000602082840312156111fe576111fd6110e7565b5b600061120c848285016111d3565b91505092915050565b61121e81611111565b82525050565b60006020820190506112396000830184611215565b92915050565b600061124a82611111565b9050919050565b61125a8161123f565b811461126557600080fd5b50565b60008135905061127781611251565b92915050565b600061128882611111565b9050919050565b6112988161127d565b81146112a357600080fd5b50565b6000813590506112b58161128f565b92915050565b60006112c682611111565b9050919050565b6112d6816112bb565b81146112e157600080fd5b50565b6000813590506112f3816112cd565b92915050565b600080600060608486031215611312576113116110e7565b5b600061132086828701611268565b9350506020611331868287016112a6565b9250506040611342868287016112e4565b9150509250925092565b611355816111b2565b82525050565b6000602082019050611370600083018461134c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113c982611380565b810181811067ffffffffffffffff821117156113e8576113e7611391565b5b80604052505050565b60006113fb6110dd565b905061140782826113c0565b919050565b600067ffffffffffffffff82111561142757611426611391565b5b61143082611380565b9050602081019050919050565b82818337600083830152505050565b600061145f61145a8461140c565b6113f1565b90508281526020810184848401111561147b5761147a61137b565b5b61148684828561143d565b509392505050565b600082601f8301126114a3576114a2611376565b5b81356114b384826020860161144c565b91505092915050565b6000806000606084860312156114d5576114d46110e7565b5b600084013567ffffffffffffffff8111156114f3576114f26110ec565b5b6114ff8682870161148e565b93505060206115108682870161113a565b9250506040611521868287016111d3565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061157257607f821691505b6020821081036115855761158461152b565b5b50919050565b60008151905061159a816111bc565b92915050565b6000602082840312156115b6576115b56110e7565b5b60006115c48482850161158b565b91505092915050565b6000815190506115dc81611123565b92915050565b6000602082840312156115f8576115f76110e7565b5b6000611606848285016115cd565b91505092915050565b60006060820190506116246000830186611215565b6116316020830185611215565b61163e604083018461134c565b949350505050565b61164f8161117c565b811461165a57600080fd5b50565b60008151905061166c81611646565b92915050565b600060208284031215611688576116876110e7565b5b60006116968482850161165d565b91505092915050565b600082825260208201905092915050565b7f596f7520617265206e6f7420616c6c6f77656420746f20646f20746861742e2060008201527f596f7520617265206e6f74206120436974790000000000000000000000000000602082015250565b600061170c60328361169f565b9150611717826116b0565b604082019050919050565b6000602082019050818103600083015261173b816116ff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061177c826111b2565b9150611787836111b2565b925082820390508181111561179f5761179e611742565b5b92915050565b60006117b0826111b2565b91506117bb836111b2565b92508282026117c9816111b2565b915082820484148315176117e0576117df611742565b5b5092915050565b6000819050919050565b6000819050919050565b600061181661181161180c846117e7565b6117f1565b6111b2565b9050919050565b611826816117fb565b82525050565b60006040820190506118416000830185611215565b61184e602083018461181d565b9392505050565b6000819050919050565b600061187a61187561187084611855565b6117f1565b6111b2565b9050919050565b61188a8161185f565b82525050565b60006040820190506118a56000830185611215565b6118b26020830184611881565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611915602e8361169f565b9150611920826118b9565b604082019050919050565b6000602082019050818103600083015261194481611908565b9050919050565b60006040820190506119606000830185611215565b61196d6020830184611215565b9392505050565b600060ff82169050919050565b600061199c611997611992846117e7565b6117f1565b611974565b9050919050565b6119ac81611981565b82525050565b60006020820190506119c760008301846119a3565b92915050565b600080fd5b600080fd5b60005b838110156119f55780820151818401526020810190506119da565b60008484015250505050565b6000611a14611a0f8461140c565b6113f1565b905082815260208101848484011115611a3057611a2f61137b565b5b611a3b8482856119d7565b509392505050565b600082601f830112611a5857611a57611376565b5b8151611a68848260208601611a01565b91505092915050565b60006101008284031215611a8857611a876119cd565b5b611a936101006113f1565b9050600082015167ffffffffffffffff811115611ab357611ab26119d2565b5b611abf84828501611a43565b6000830152506020611ad38482850161158b565b6020830152506040611ae78482850161158b565b604083015250606082015167ffffffffffffffff811115611b0b57611b0a6119d2565b5b611b1784828501611a43565b606083015250608082015167ffffffffffffffff811115611b3b57611b3a6119d2565b5b611b4784828501611a43565b60808301525060a082015167ffffffffffffffff811115611b6b57611b6a6119d2565b5b611b7784828501611a43565b60a08301525060c0611b8b8482850161158b565b60c08301525060e082015167ffffffffffffffff811115611baf57611bae6119d2565b5b611bbb84828501611a43565b60e08301525092915050565b600060208284031215611bdd57611bdc6110e7565b5b600082015167ffffffffffffffff811115611bfb57611bfa6110ec565b5b611c0784828501611a71565b91505092915050565b7f596f7520617265206e6f7420612063697479206f7220696e647573747279206160008201527f6c72656164792065786973740000000000000000000000000000000000000000602082015250565b6000611c6c602c8361169f565b9150611c7782611c10565b604082019050919050565b60006020820190508181036000830152611c9b81611c5f565b9050919050565b600081519050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611d0f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611cd2565b611d198683611cd2565b95508019841693508086168417925050509392505050565b6000611d4c611d47611d42846111b2565b6117f1565b6111b2565b9050919050565b6000819050919050565b611d6683611d31565b611d7a611d7282611d53565b848454611cdf565b825550505050565b600090565b611d8f611d82565b611d9a818484611d5d565b505050565b5b81811015611dbe57611db3600082611d87565b600181019050611da0565b5050565b601f821115611e0357611dd481611cad565b611ddd84611cc2565b81016020851015611dec578190505b611e00611df885611cc2565b830182611d9f565b50505b505050565b600082821c905092915050565b6000611e2660001984600802611e08565b1980831691505092915050565b6000611e3f8383611e15565b9150826002028217905092915050565b611e5882611ca2565b67ffffffffffffffff811115611e7157611e70611391565b5b611e7b825461155a565b611e86828285611dc2565b600060209050601f831160018114611eb95760008415611ea7578287015190505b611eb18582611e33565b865550611f19565b601f198416611ec786611cad565b60005b82811015611eef57848901518255600182019150602085019450602081019050611eca565b86831015611f0c5784890151611f08601f891682611e15565b8355505b6001600288020188555050505b505050505050565b6000611f2c826111b2565b9150611f37836111b2565b9250828201905080821115611f4f57611f4e611742565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f8f826111b2565b9150611f9a836111b2565b925082611faa57611fa9611f55565b5b82820490509291505056fea2646970667358221220b84662e56a666e4e1b7cc5798f662dcd044349c424755322dea03563c0b936a464736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2369,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2372,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3665,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "industries",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Industry)4153_storage)"
      },
      {
        "astId": 3673,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "pt",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPollutionToken)5413"
      },
      {
        "astId": 3675,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3678,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "dsesCenter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDSESCenter)5342"
      },
      {
        "astId": 3681,
        "contract": "contracts/CityIndustry.sol:CityIndustry",
        "label": "pnft",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPollutionNft)5366"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDSESCenter)5342": {
        "encoding": "inplace",
        "label": "contract IDSESCenter",
        "numberOfBytes": "20"
      },
      "t_contract(IPollutionNft)5366": {
        "encoding": "inplace",
        "label": "contract IPollutionNft",
        "numberOfBytes": "20"
      },
      "t_contract(IPollutionToken)5413": {
        "encoding": "inplace",
        "label": "contract IPollutionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Industry)4153_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.Industry)",
        "numberOfBytes": "32",
        "value": "t_struct(Industry)4153_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Industry)4153_storage": {
        "encoding": "inplace",
        "label": "struct classes.Industry",
        "members": [
          {
            "astId": 4150,
            "contract": "contracts/CityIndustry.sol:CityIndustry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4152,
            "contract": "contracts/CityIndustry.sol:CityIndustry",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}