{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/CityCitizen.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./Classes.sol\";\n//import {IDSESCenter} from \"./DSESCenter.sol\";\nimport \"./interfaces/IDSESCenter.sol\";\nimport \"./interfaces/IPollutionToken.sol\";\nimport \"./interfaces/IPollutionNft.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {methods} from \"./Library.sol\";\n\n/// @title A contract to be used by Cities and Citizens\n/// @author Giuseppe La Vecchia\n/// @notice Used for CRUD operations and for consuming PT by the Citizen\n/// @dev for testing the checkingForExpiredToken function, it is needed to the \"if\" statement, because it will trigger the content only once every 30 days\n/// @custom:experimental This is an experimental contract.\n\ncontract CityCitizen is Initializable {\n    //for login purposes\n\n    mapping(address => classes.Citizen) private citizens;\n    uint256 private constant multiplier = 10 ** 18; //18 are the decimals\n    IPollutionToken private pt;\n    address private admin;\n    IDSESCenter private dsesCenter;\n    IPollutionNft private pnft;\n    event NoTokenCitizen(address indexed citizenAddr, uint256 timestamp);\n    error CityCitizen__Citizen_Not_Found();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers(); //An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. This function in the constructor automatically lock it when it is deployed.\n        //to get further information you can visit https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable\n    }\n\n    /**\n     * Initialize function for the proxy upgradable pattern by OpenZeppelin\n     *\n     * @notice Initialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract and pollution nft contract, allowing this contract to call its functions\n     *\n     * @param ptContractAddress the contract address of the PollutionToken contract, used by this contract.\n     * @param dsesCenterAddress the contract address of the DSESCenter contract, used by this contract.\n     * @param pnftAddress the contract address of the PollutionNft contract, used by this contract.\n     *\n     */\n    function initialize(\n        IPollutionToken ptContractAddress,\n        IDSESCenter dsesCenterAddress,\n        IPollutionNft pnftAddress\n    ) public initializer {\n        admin = msg.sender;\n        pt = ptContractAddress;\n        pnft = pnftAddress;\n        dsesCenter = dsesCenterAddress;\n        pnft.storeContractAddress(address(this), msg.sender);\n        pt.storeContractAddress(address(this), msg.sender);\n    }\n\n    /*\n    function updateContractAddress(address newAddr) public onlyAdmin {\n        //used when redeployed only PollutionToken contract\n        pt = IPollutionToken(newAddr);\n        pt.storeContractAddress(address(this), msg.sender);\n    }\n*/\n    function getAdminAddress() public view returns (address) {\n        return admin;\n    }\n\n    /**\n     * Add a new citizen instance\n     *\n     * @notice Allows a City to add a new citizen giving an initial amount of PollutionTokens. It can also be used for editing purpose of the Citizen's parameters.\n     * @dev all the require means that you can enter the function in 2 cases: 1)if you are a city and you are going to modify an existing citizen (added previously by the city) 2)If you are a city and you want to add a non-existing citizen, so you are not going to modify\n     * @param isModify if true, it means that the caller of this function want to change something in a Citizen. Otherwise it is an addition operation.\n     * @dev if it is not a modify action, the getUserCount is called. In the other case, the citizen with an already id is provided (in id = getCitizen(citizenAddr).id; code line)\n     */\n    function addCitizen(\n        string memory name,\n        address citizenAddr,\n        uint256 checkedTimestamp,\n        string memory surname,\n        string memory email,\n        string memory dateOfBirth,\n        uint256 telephone,\n        string memory physicalAddress,\n        bool isModify\n    ) public {\n        bool isCityExisting = dsesCenter.checkExistingCity(msg.sender);\n        address cityAddrExisting = pt.getPreviousSender(citizenAddr);\n        require(\n            (isCityExisting && isModify && cityAddrExisting == msg.sender) ||\n                (isCityExisting && !isModify && cityAddrExisting == address(0)),\n            \"You are not a city or citizen already exist\"\n        );\n        uint256 id;\n        //uint256 tokensAssigned = tokenToBeAssigned(); //this is omitted for semplicity and testing and it is used a constant value\n        //uint256 tokensAssigned = 30 * multiplier;\n        if (!isModify) {\n            pt.transferForAddingEntities(\n                msg.sender,\n                citizenAddr,\n                tokenToBeAssigned()\n            );\n            id = pt.getUserCount();\n        } else {\n            id = getCitizen(citizenAddr).id;\n        }\n        citizens[citizenAddr] = classes.Citizen(\n            name,\n            checkedTimestamp,\n            surname,\n            email,\n            dateOfBirth,\n            telephone,\n            physicalAddress,\n            id\n        );\n        //\n    }\n\n    function tokenToBeAssigned() public pure returns (uint256) {\n        /*\n        classes.City memory city = dsesCenter.getCityByAddr(msg.sender);\n        return\n            (pt.balanceOf(msg.sender) / //balanceOfCity/(cityPopulation+20*cityNumberOfIndustries). 20 is an arbitrary number, just to allocate more tokens to industries\n                (city.population + 20 * city.numberOfIndustries)) * multiplier; //getCityByAddr used because A struct is an example of a dynamically sized type that can only be passed around internally\n    */\n        return 30 * multiplier;\n    }\n\n    /**\n     * Consume PollutionToken by Citizen\n     *\n     * @notice a Citizen equipped with a sensor will send a certain amount of data produced ('amountUsed') periodically. If its PollutionToken balance is not 0, he send back to the City that amountUsed of PT, otherwise he emit an Event notifying States that he finished his tokens. Before doing that,it is necessary to check that 1 month has not passed since the beginning of a new cycle (Start of the cycle->consumingPT->end of a month->give back to city the remaining PT->if any, give NFTs to Citizen).\n     *\n     * @param amountUsed the contract address of the PollutionToken contract, used by this contract.\n     *\n     */\n    function consumePTFromCitizen(uint256 amountUsed) public {\n        uint256 balanceOfCitizen = pt.balanceOf(msg.sender);\n        address previousSender = pt.getPreviousSender(msg.sender);\n        checkForExpiredToken(balanceOfCitizen, previousSender);\n        if (balanceOfCitizen != 0) {\n            pt.transferExtended(\n                msg.sender,\n                previousSender,\n                amountUsed //can be also used a formula to calculate the amount of token to transfer\n            );\n        } else {\n            uint256 currentTimestamp = block.timestamp;\n            emit NoTokenCitizen(msg.sender, currentTimestamp);\n        }\n    }\n\n    /**\n     * Check if a month has passed\n     *\n     * @notice first it check if a month has passed since the last execution of the content of the first \"if\" condition. If so, it will check if an NFT can be given to the Citizen checking its current balance, then it will refill the citizen's tokens\n     *\n     * @param balanceOfCitizen the citizen's balance\n     * @param previousSender it is the city that added the citizen\n     *\n     */\n    function checkForExpiredToken(\n        uint256 balanceOfCitizen,\n        address previousSender\n    ) private {\n        if (\n            (block.timestamp - citizens[msg.sender].checkedTimestamp) >= //check if 30 days has passed.\n            methods.dayTimestamp(30)\n        ) {\n            //uint256 balanceOfCitizen = pt.balanceOf(msg.sender);\n            checkForNft(balanceOfCitizen);\n            pt.transferExtended(\n                previousSender,\n                msg.sender,\n                tokenToBeAssigned() - balanceOfCitizen //example: 30 fixed tokens - 17 of balanceOfCitizen=13 token to be refilled to the citizen\n            ); //return back to the state the tokens remained\n            citizens[msg.sender].checkedTimestamp = block.timestamp; //update citizen timestamp with the new timestamp of the actual date\n        }\n    }\n\n    function getCitizen(\n        address citizenAddr\n    ) public view returns (classes.Citizen memory) {\n        if (!checkExistingCitizen(citizenAddr)) {\n            revert CityCitizen__Citizen_Not_Found();\n        }\n        return citizens[citizenAddr];\n    }\n\n    /**\n     *\n     * @notice This will return true if citizen was added by a city, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like city add citizen.\n     *\n     * @param citizenAddr address of that citizen to check\n     */\n    function checkExistingCitizenOfACity(\n        address citizenAddr\n    ) public view returns (bool) {\n        if (pt.getPreviousSender(citizenAddr) == msg.sender) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkForNft(uint256 balanceOfCitizen) public {\n        //modify to private after testing\n        {\n            //uint256 balanceOfCitizen = pt.balanceOf(msg.sender);\n            if (\n                (balanceOfCitizen > 5 * multiplier) &&\n                (balanceOfCitizen <= 10 * multiplier)\n            ) //5 and 10 are random numbers, we want to check that 5<=balanceOfCitizen<=10 Pollution tokens\n            {\n                pnft.mintNftCitizen(msg.sender, 0); //level 1 nft\n            } else if (\n                (balanceOfCitizen > 10 * multiplier) &&\n                (balanceOfCitizen <= 29 * multiplier)\n            ) {\n                pnft.mintNftCitizen(msg.sender, 1);\n            }\n        }\n    }\n\n    function checkExistingCitizen(\n        address citizenAddr\n    ) public view returns (bool) {\n        return bytes(citizens[citizenAddr].name).length > 0;\n    }\n\n    function deleteCitizen(\n        address citizenAddr\n    ) public onlyBelongingCity(citizenAddr) {\n        pt.transferExtended(citizenAddr, msg.sender, pt.balanceOf(citizenAddr));\n        delete citizens[citizenAddr];\n        pt.deletePreviousSender(citizenAddr);\n    }\n\n    modifier onlyAdmin() {\n        require(\n            (msg.sender == admin),\n            \"You are not the owner of this contract\"\n        );\n        _;\n    }\n\n    /**\n     *\n     * @notice if City (the msg.sender) isn't the same that added that specific citizen with citizenAddr, revert the transaction\n     *\n     * @param citizenAddr address of that citizen that you want to check\n     */\n    modifier onlyBelongingCity(address citizenAddr) {\n        if (pt.getPreviousSender(citizenAddr) != msg.sender) {\n            revert CityCitizen__Citizen_Not_Found();\n        }\n        _;\n    }\n}\n"
    },
    "contracts/Classes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary classes {\n    struct State {\n        string name;\n        string iso;\n        uint256 numberOfCities;\n        string attorneyName;\n        string attorneySurname;\n        string attorneyEmail;\n        uint256 telephone;\n        string physicalAddress;\n    }\n\n    struct City {\n        string name;\n        uint256 population;\n        uint256 numberOfIndustries;\n        string attorneyName;\n        string attorneySurname;\n        string attorneyEmail;\n        uint256 telephone;\n        string physicalAddress;\n    }\n\n    struct Citizen {\n        string name;\n        uint256 checkedTimestamp;\n        string surname;\n        string email;\n        string dateOfBirth;\n        uint256 telephone;\n        string physicalAddress;\n        uint256 id; //used for bip44 wallet\n    } /*\n    struct Industry {\n        string name;\n        uint256 registrationTimestamp;\n    }*/\n}\n"
    },
    "contracts/DSESCenter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"./interfaces/IPollutionToken.sol\";\nimport \"./Classes.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/// @title A contract to be used by Admin(deployer) and States\n/// @author Giuseppe La Vecchia\n/// @notice Used for CRUD operations by States and Admin\n/// @custom:experimental This is an experimental contract.\n\ncontract DSESCenter is Initializable {\n    address private admin;\n    IPollutionToken private pt;\n    //ChainlinkTools private ct;\n    uint256 private constant multiplier = 10 ** 18;\n\n    mapping(address => classes.State) private states; //for login purposes\n    mapping(address => classes.City) private cities;\n\n    error DSESCenter__Only_Admin_Allowed();\n    error DSESCenter__State_Not_Found();\n    error DSESCenter__City_Not_Found();\n\n    /*\n    constructor(PollutionToken ptContractAddress) {\n        admin = msg.sender;\n        pt = ptContractAddress;\n        pt.storeContractAddress(address(this), msg.sender);\n        ct = new ChainlinkTools();\n    }\n*/\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers(); //An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. This function in the constructor automatically lock it when it is deployed.\n        //to get further information you can visit https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable\n    }\n\n    /**\n     * Initialize function for the proxy upgradable pattern by OpenZeppelin\n     *\n     * @notice Initialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract, allowing this contract to call its functions\n     *\n     * @param ptContractAddress the contract address of the PollutionToken contract, used by this contract.\n     *\n     *\n     */\n    function initialize(IPollutionToken ptContractAddress) public initializer {\n        admin = msg.sender;\n        pt = ptContractAddress;\n        pt.storeContractAddress(address(this), msg.sender);\n    }\n\n    function getCityByAddr(\n        address cityAddr\n    ) public view returns (classes.City memory) {\n        return cities[cityAddr];\n    }\n\n    function getContractAddress() public view returns (address) {\n        return address(pt);\n    }\n\n    /**\n     * Add a new state instance\n     *\n     * @notice Allows an Admin to add a new state giving an initial amount of PollutionTokens.It can also be used for editing purpose of the State's parameters.\n     * @dev all the require means that you can enter the function in 2 cases: 1)if you are an admin and you are going to modify an existing state (added previously by an Admin) 2)If you are an admin and you want to add a non-existing state, so you are not going to modify\n     * @param isModify if true, it means that the caller of this function want to change something in a State. Otherwise it is an addition operation.\n     */\n\n    function addState(\n        string memory name,\n        string memory iso,\n        address stateAddr,\n        uint256 numberOfCities,\n        string memory attorneyName,\n        string memory attorneySurname,\n        string memory attorneyEmail,\n        uint256 telephone,\n        string memory physicalAddress,\n        bool isModify\n    ) external {\n        bool isAdmin = (msg.sender == admin);\n        address adminAddrExisting = pt.getPreviousSender(stateAddr);\n        require(\n            (isAdmin && isModify && adminAddrExisting == admin) ||\n                (isAdmin && !isModify && adminAddrExisting == address(0)),\n            \"Error while adding a new state. Maybe you are not the owner or the state already exist\"\n        );\n        states[stateAddr] = classes.State(\n            name,\n            iso,\n            numberOfCities,\n            attorneyName,\n            attorneySurname,\n            attorneyEmail,\n            telephone,\n            physicalAddress\n        );\n        if (!isModify) {\n            pt.transferForAddingEntities(\n                msg.sender,\n                stateAddr,\n                300000 * multiplier\n            ); //modificable}\n        }\n    }\n\n    /**\n     *\n     * @notice Allows an admin to delete a state\n     * @dev deletes mapping location here and in the previousSender mapping. PreviousSenderMapping is a relation between a sender of PT(the one who add an entity, like the admin) and a receiver of PT (the one who was added by an entity, like a state)\n     * @param stateAddr stateAddress to delete\n     */\n\n    function deleteState(address stateAddr) external onlyAdmin {\n        if (checkExistingState(stateAddr)) {\n            pt.transferExtended(stateAddr, msg.sender, pt.balanceOf(stateAddr));\n            delete states[stateAddr];\n            pt.deletePreviousSender(stateAddr);\n        } else {\n            revert DSESCenter__State_Not_Found();\n        }\n    }\n\n    function getState(\n        address stateAddr\n    ) public view returns (classes.State memory) {\n        return states[stateAddr];\n    }\n\n    function checkExistingState(address addr) public view returns (bool) {\n        return bytes(states[addr].name).length > 0; //mapping are initialized as 0.\n    }\n\n    function checkExistingAdmin(address addr) public view returns (bool) {\n        return admin == addr;\n    }\n\n    /**\n     * Add a new city instance\n     *\n     * @notice Allows a State to add a new city giving an initial amount of PollutionTokens.It can also be used for editing purpose of the City's parameters.\n     * @dev all the require means that you can enter the function in 2 cases: 1)if you are a state and you are going to modify an existing city (added previously by an state) 2)If you are a state and you want to add a non-existing city, so you are not going to modify\n     * @param isModify if true, it means that the caller of this function want to change something in a City. Otherwise it is an addition operation and a transfer of PT will be done\n     */\n    function addCity(\n        string memory name,\n        uint256 population,\n        uint256 numberOfIndustries,\n        address cityAddr,\n        string memory attorneyName,\n        string memory attorneySurname,\n        string memory attorneyEmail,\n        uint256 telephone,\n        string memory physicalAddress,\n        bool isModify\n    ) external {\n        bool isStateExisting = checkExistingState(msg.sender);\n        address stateAddrExisting = pt.getPreviousSender(cityAddr);\n\n        require(\n            (isStateExisting && isModify && stateAddrExisting == msg.sender) ||\n                (isStateExisting &&\n                    !isModify &&\n                    stateAddrExisting == address(0)),\n            \"Error while adding a new city. Maybe you are not a state or the city already exist\"\n        );\n\n        cities[cityAddr] = classes.City(\n            name,\n            population,\n            numberOfIndustries,\n            attorneyName,\n            attorneySurname,\n            attorneyEmail,\n            telephone,\n            physicalAddress\n        );\n        /*\n        uint256 tokenAssigned = (\n            (pt.balanceOf(msg.sender) / states[msg.sender].numberOfCities)\n        ) * multiplier; //#(tokenState/numberOfCitiesState)/cityPopulation\n        */\n        if (!isModify) {\n            uint256 tokenAssigned = 10000 * multiplier;\n            pt.transferForAddingEntities(msg.sender, cityAddr, tokenAssigned);\n        }\n    }\n\n    function checkExistingCity(address cityAddr) public view returns (bool) {\n        return bytes(cities[cityAddr].name).length > 0; //mapping are initialized as 0.\n    }\n\n    function deleteCity(\n        address cityAddr\n    ) external onlyBelongingState(cityAddr) {\n        pt.transferExtended(cityAddr, msg.sender, pt.balanceOf(cityAddr));\n        delete cities[cityAddr];\n        pt.deletePreviousSender(cityAddr);\n    }\n\n    function getCity(\n        address cityAddr\n    ) public view returns (classes.City memory) {\n        return cities[cityAddr];\n    }\n\n    /**\n     *\n     * @notice This will return true if city was added by a state, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like state add city.\n     *\n     * @param cityAddr address of that city to check\n     */\n    function checkExistingCityOfAState(\n        address cityAddr,\n        address stateAddr\n    ) public view returns (bool) {\n        if (pt.getPreviousSender(cityAddr) == stateAddr) {\n            return true;\n        }\n        return false;\n    }\n\n    modifier onlyAdmin() {\n        if ((msg.sender != admin)) {\n            revert DSESCenter__Only_Admin_Allowed();\n        }\n        _;\n    }\n    /**\n     *\n     * @notice if State (the msg.sender) isn't the same that added that specific city with cityAddr, revert the transaction\n     *\n     * @param cityAddr address of that city that you want to check\n     */\n    modifier onlyBelongingState(address cityAddr) {\n        if (pt.getPreviousSender(cityAddr) != msg.sender) {\n            revert DSESCenter__City_Not_Found();\n        }\n        _;\n    }\n}\n"
    },
    "contracts/interfaces/IDSESCenter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"../Classes.sol\";\n\ninterface IDSESCenter {\n    function getCityByAddr(\n        address cityAddr\n    ) external view returns (classes.City memory);\n\n    function checkExistingCity(address cityAddr) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPollutionNft.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface IPollutionNft {\n    function mintNftIndustry(address to, uint256 level) external;\n\n    function storeContractAddress(\n        address contractAddr,\n        address sender\n    ) external;\n\n    function mintNftCitizen(address to, uint256 level) external;\n}\n"
    },
    "contracts/interfaces/IPollutionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface IPollutionToken {\n    function transferExtended(address from, address to, uint256 value) external;\n\n    function getPreviousSender(address from) external view returns (address);\n\n    function deletePreviousSender(address receiver) external;\n\n    function storeContractAddress(\n        address contractAddr,\n        address sender\n    ) external;\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transferForAddingEntities(\n        address from,\n        address to,\n        uint256 value\n    ) external;\n\n    function getUserCount() external view returns (uint256);\n\n    function getPTtoEthRate() external view returns (uint256);\n}\n"
    },
    "contracts/Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n//import \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary methods {\n    function dayTimestamp(\n        uint256 numberOfDays\n    ) internal pure returns (uint256) {\n        return numberOfDays * 86400; //86400 is the number of seconds in one day\n    }\n}\n\nlibrary conversionMethods {\n    /*\n    function getPrice(address currencyAddress) internal view returns (uint256) {\n        // Sepolia ETH / USD Address\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            //0x694AA1769357215DE4FAC081bf1f309aDC325306\n            currencyAddress\n        );\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        int256 convertValue = int256(10 ** (18 - priceFeed.decimals()));\n        return uint256(answer * convertValue); //it has 8 decimals precisions, so need to add 10 decimals\n        // or (Both will do the same thing)\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\n    }\n\n    // 1000000000\n    function getConversionRate(\n        uint256 ethAmount,\n        address currencyAddress\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(currencyAddress);\n        uint256 ethAmountInCurrency = (ethPrice * ethAmount) / 1e18;\n        // or (Both will do the same thing)\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n        return ethAmountInCurrency;\n    }*/\n}\n"
    },
    "contracts/PollutionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nerror PollutionToken__Only_Allowed_Contracts();\nerror PollutionToken__Not_Enough_PT();\nerror Not_Your_Entity();\n\n/// @title ERC-20 Contract for Pollution Tokens\n/// @author Giuseppe La Vecchia\n/// @notice It contains ERC-20 methods to maintain interoperability with other contracts or users, but it implement some methods for use in DSES dApp\n/// @dev ERC721Enumerable is used because of tokenOfOwnerByIndex method.\n/// @custom:experimental This is an experimental contract.\n\ncontract PollutionToken is Initializable {\n    string private tokenName;\n    string private tokenSymbol;\n    uint8 private tokenDecimals;\n    uint256 public _totalSupply;\n    address private admin;\n    uint256 private userCount; //number of DSES users\n    mapping(address => address) contractAddresses; //used to store contract addresses allowed by admin that interact with this contract\n\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => address) public reversePartecipants; //used for the transfer from citizens/industry back to city and from city to state\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    event Burn(address indexed from, uint256 value);\n    uint256 private ptInEthRate; //rate conversion PT to ETH\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n\n    /*\n    constructor(\n        uint256 initialSupply,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) {\n        _totalSupply = initialSupply * 10 ** uint256(tokenDecimals); // Update total supply with the decimal amount\n        balances[msg.sender] = _totalSupply; // Give the creator all initial tokens\n        admin = msg.sender;\n        name = _tokenName; // Set the name for display purposes\n        symbol = _tokenSymbol; // Set the symbol for display purposes\n    }*/\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers(); //An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. This function in the constructor automatically lock it when it is deployed.\n        //to get further information you can visit https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable\n    }\n\n    /**\n     * Initialize function for the proxy upgradable pattern by OpenZeppelin\n     *\n     * @notice Initialize variables\n     *\n     * @param initialSupply the initial supply number of tokens\n     * @param _tokenName token name\n     * @param _tokenSymbol token symbol\n     *\n     */\n    function initialize(\n        uint256 initialSupply,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) public initializer {\n        tokenDecimals = 18;\n        _totalSupply = initialSupply * 10 ** uint256(tokenDecimals); // Update total supply with the decimal amount\n        balances[msg.sender] = _totalSupply; // Give the creator all initial tokens\n        admin = msg.sender;\n        tokenName = _tokenName; // Set the name for display purposes\n        tokenSymbol = _tokenSymbol; // Set the symbol for display purposes\n        ptInEthRate = 23 * 10 ** 12; //1 PT is equal to 0.0000023ETH, so 10**14 gwei\n    }\n\n    function getAdminAddress() public view returns (address) {\n        return admin;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function name() public view returns (string memory) {\n        return tokenName;\n    }\n\n    function symbol() public view returns (string memory) {\n        return tokenSymbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return tokenDecimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * Transfer tokens sub-function\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     * @param _from the sender address\n     * @notice the content of the second \"if\" condition is used by entities that will consume PT (actually citizens) to make them reach exactly 0 also when they consume more than that balance\n     * while the else condition is for every other user\n     *\n     */\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != address(0x0));\n\n        if (\n            balances[_from] <= _value && contractAddresses[msg.sender] != admin\n        ) {\n            revert PollutionToken__Not_Enough_PT();\n        }\n\n        require(balances[_to] + _value >= balances[_to]);\n        uint256 previousBalances = balances[_from] + balances[_to];\n        if (\n            balances[_from] <= _value && contractAddresses[msg.sender] == admin\n        ) {\n            balances[_to] = balances[_to] + balances[_from];\n            emit Transfer(_from, _to, balances[_from]);\n            balances[_from] = 0;\n        } else {\n            // Subtract from the sender\n            balances[_from] -= _value;\n            // Add the same to the recipient\n            balances[_to] += _value;\n            emit Transfer(_from, _to, _value);\n        }\n        assert(balances[_from] + balances[_to] == previousBalances);\n        // Asserts are used to use static analysis to find bugs in the code. They should never fail\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(\n        address _to,\n        uint256 _value\n    ) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens with the \"from\" parameter\n     *\n     * Send `value` tokens to `to` 'from' your account\n     *\n     * @param to The address of the recipient\n     * @param value the amount to send\n     * @param from the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol\n     */\n    function transferExtended(\n        address from,\n        address to,\n        uint256 value\n    ) public onlyAllowedContracts {\n        _transfer(from, to, value);\n    }\n\n    /**\n     * Transfer tokens with the \"from\" parameter, used only for adding new entities to the system, like States,Cities or Citizens.\n     *\n     * Send `value` tokens to `to` 'from' your account\n     *\n     * @param to The address of the recipient\n     * @param value the amount to send\n     * @param from the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol\n     * @notice userCount is used to count how many entities get registered to the system. It is used also for Citizens to generate a wallet for them with BIP44. ReversePartecipants is used to map the added entity (like Citizen) with the adding entity (like City) for rollback purpose, like giving back tokens to the \"from\" entity from the \"to\" entity.\n     */\n\n    function transferForAddingEntities(\n        address from,\n        address to,\n        uint256 value\n    ) public onlyAllowedContracts {\n        if (balances[from] <= value) {\n            revert PollutionToken__Not_Enough_PT();\n        }\n        reversePartecipants[to] = from;\n        userCount = userCount + 1;\n        transferExtended(from, to, value);\n    }\n\n    function getUserCount() public view returns (uint256) {\n        return userCount;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool success) {\n        //require(_value <= allowance[_from][msg.sender]); // Check allowance\n        require(\n            (_value <= allowance[_from][_to]) &&\n                contractAddresses[msg.sender] == admin,\n            \"you are not allowed to do transferFrom function\"\n        );\n        //allowance[_from][msg.sender] -= _value;\n        allowance[_from][_to] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     *\n     * @param receiver the address of the one who received tokens in transferForAddingEntities function\n     */\n    function getPreviousSender(address receiver) public view returns (address) {\n        return reversePartecipants[receiver];\n    }\n\n    function deletePreviousSender(\n        address receiver\n    ) public onlyAllowedContracts {\n        delete reversePartecipants[receiver];\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public returns (bool success) {\n        //allowance[msg.sender][_spender] = _value;\n        require(contractAddresses[msg.sender] == admin, \"you are not approved\");\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Store contract addresses that will interact with this contract\n     *\n     * @notice Allows 'contractAddr' to call some special function on behalf of the original msg.sender user.\n     *\n     * @param contractAddr The contract address authorized\n     * @param sender the admin address\n     */\n\n    function storeContractAddress(address contractAddr, address sender) public {\n        //sender will be msg.sender that has to be the admin\n        require(\n            sender == admin,\n            \"you are not allowed to do that, you are not the admin\"\n        );\n        contractAddresses[contractAddr] = sender;\n    }\n\n    function getContractAddress() public view returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value); // Check if the sender has enough\n        balances[msg.sender] -= _value; // Subtract from the sender\n        _totalSupply -= _value; // Updates _totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function getAllowance(\n        address master,\n        address slave\n    ) public view returns (uint256) {\n        return allowance[master][slave];\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(\n        address _from,\n        uint256 _value\n    ) public returns (bool success) {\n        require(balances[_from] >= _value); // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]); // Check allowance\n        balances[_from] -= _value; // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\n        _totalSupply -= _value; // Update _totalSupply\n        emit Burn(_from, _value); //updat\n        return true;\n    }\n\n    function getPTtoEthRate() public view returns (uint256) {\n        return ptInEthRate;\n    }\n\n    function setPTtoEthRate(uint256 newRate) public onlyAllowedContracts {\n        ptInEthRate = newRate;\n    }\n\n    modifier onlyAllowedContracts() {\n        if (contractAddresses[msg.sender] != admin) {\n            revert PollutionToken__Only_Allowed_Contracts();\n        }\n        _;\n    }\n\n    /*\n    function getPTValueInCurrency(\n        uint256 ptAmount,\n        address currencyAddress\n    ) public view returns (uint256) {\n        uint256 ethAmount = ptAmount * ptInEthRate;\n        uint256 ethAmountConverted = conversionMethods.getConversionRate(\n            ethAmount,\n            currencyAddress\n        );\n        return ethAmountConverted;\n    }*/\n}\n"
    },
    "contracts/TradeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"./interfaces/IPollutionToken.sol\";\nerror Trade__Only_Receiver_Allowed();\nerror Trade__Need_Receiver_Differ_From_Sender();\n\n/// @title Contract for trading PollutionTokens for ETH\n/// @author Giuseppe La Vecchia\n/// @notice It can be possible to start a new trade by a sender, accept or refuse it by a receiver.\n/// @custom:experimental This is an experimental contract.\ncontract TradeToken {\n    struct TradeData {\n        address sender;\n        address receiver;\n        uint256 ptAmount;\n        uint256 id;\n    }\n\n    mapping(address => TradeData[]) private receiverTrades;\n    IPollutionToken private immutable tokenAddress;\n    uint256 private id = 1; //used for trades instance identification\n    event TradeCompleted(uint256 indexed id, bool hasSucceded);\n\n    constructor(IPollutionToken _tokenAddress) {\n        tokenAddress = IPollutionToken(_tokenAddress);\n        tokenAddress.storeContractAddress(address(this), msg.sender);\n    }\n\n    /**\n     * Begin a PollutionToken trade\n     *\n     * Allows 'sender' to start a trade of 'ptAmount' of tokens with the 'receiver'\n     *\n     * @param ptAmount amount of PollutionToken that you want to trade\n     * @param receiver the receiver address\n     */\n\n    function startTrade(uint256 ptAmount, address receiver) public {\n        require(\n            tokenAddress.balanceOf(msg.sender) >= ptAmount,\n            \"Not enough tokens\"\n        );\n        if (msg.sender == receiver) {\n            revert Trade__Need_Receiver_Differ_From_Sender();\n        }\n        TradeData memory tdInstance = TradeData(\n            msg.sender,\n            receiver,\n            ptAmount,\n            id\n        );\n        id = id + 1;\n        receiverTrades[receiver].push(tdInstance);\n    }\n\n    /**\n     * Returning instances of all the trades of the 'receiver'\n     *\n     * @param receiver the receiver address\n     */\n\n    function returnTrades(\n        address receiver\n    ) public view returns (TradeData[] memory) {\n        TradeData[] memory _receiverTrades = receiverTrades[receiver];\n        return _receiverTrades;\n    }\n\n    function getTradeById(\n        uint256 _id,\n        address receiver\n    ) public view returns (TradeData memory) {\n        TradeData memory tdInstance;\n        for (uint256 i = 0; i < receiverTrades[receiver].length; i++) {\n            if (receiverTrades[receiver][i].id == _id) {\n                tdInstance = receiverTrades[receiver][i];\n                break;\n            }\n        }\n        return tdInstance;\n    }\n\n    /**\n     * Ending the trade instance\n     *\n     * This follow the startTrade execution. When a startTrade is called by a sender, the receiver must respond to the request, accepting and paying in ETH that ptAmount.\n     * or refusing, simply emitting an event. In both cases the trade instance will be removed from the trade list.\n     *\n     * @param _id the trade identificator\n     * @param receiver the receiver address\n     * @param isSucceded true if 'receiver' accept the trade, false if he refuse\n     *\n     */\n    function endTrade(\n        uint256 _id,\n        address receiver,\n        bool isSucceded\n    ) public payable {\n        if ((receiver != msg.sender)) {\n            revert Trade__Only_Receiver_Allowed();\n        }\n\n        TradeData[] memory _receiverTrades = receiverTrades[receiver];\n        TradeData memory tdInstance;\n        //uint256 ethCost = tdInstance.ptAmount * tokenAddress.getPTtoEthRate();\n        for (uint256 i = 0; i < _receiverTrades.length; i++) {\n            if (_receiverTrades[i].id == _id) {\n                tdInstance = _receiverTrades[i];\n                removeIndex(i, receiver);\n                break;\n            }\n        }\n        if (isSucceded) {\n            //if accepted\n            (bool sent, ) = payable(tdInstance.sender).call{value: msg.value}(\n                \"\"\n            );\n            require(sent, \"Failed to send Ether\");\n\n            tokenAddress.transferExtended(\n                tdInstance.sender,\n                receiver,\n                tdInstance.ptAmount * 10 ** 18\n            );\n\n            emit TradeCompleted(tdInstance.id, true);\n        } else {\n            emit TradeCompleted(tdInstance.id, false);\n        }\n    }\n\n    /**\n     * Removing a specific index from a list\n     *\n     * For a better and safer delete without using the 'delete' keyword, the last element of the array replace the one in the 'index' position of the array.\n     * Then the pop function is called, deleting the trade instance in the previous 'index' position.\n     *\n     * @param index the index of the array of trades of the trade instance that we want to delete\n     * @param receiver the receiver address\n     *\n     */\n    function removeIndex(uint256 index, address receiver) private {\n        receiverTrades[receiver][index] = receiverTrades[receiver][\n            receiverTrades[receiver].length - 1\n        ];\n        receiverTrades[receiver].pop();\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}