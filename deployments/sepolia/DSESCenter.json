{
  "address": "0xCb89E707DdD8A3F452830D564dD5f7FbF6f039F8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DSESCenter__City_Not_Found",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSESCenter__Only_Admin_Allowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSESCenter__Only_State_Allowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSESCenter__State_Not_Found",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "population",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfIndustries",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "attorneyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneySurname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneyEmail",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "telephone",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalAddress",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModify",
          "type": "bool"
        }
      ],
      "name": "addCity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "iso",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfCities",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "attorneyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneySurname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneyEmail",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "telephone",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalAddress",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModify",
          "type": "bool"
        }
      ],
      "name": "addState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkExistingAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingCity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkExistingState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "deleteCity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        }
      ],
      "name": "deleteState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "getCity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "population",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfIndustries",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "attorneyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneySurname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneyEmail",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            }
          ],
          "internalType": "struct classes.City",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "getCityByAddr",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "population",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfIndustries",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "attorneyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneySurname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneyEmail",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            }
          ],
          "internalType": "struct classes.City",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iso",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "numberOfCities",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "attorneyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneySurname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneyEmail",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            }
          ],
          "internalType": "struct classes.State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPollutionToken",
          "name": "ptContractAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateAddrDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferToState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 11,
  "solcInputHash": "2825ed847de941e71d09f377b6f99afe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DSESCenter__City_Not_Found\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSESCenter__Only_Admin_Allowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSESCenter__Only_State_Allowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSESCenter__State_Not_Found\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIndustries\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModify\",\"type\":\"bool\"}],\"name\":\"addCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iso\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCities\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModify\",\"type\":\"bool\"}],\"name\":\"addState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkExistingAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"checkExistingCity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkExistingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"deleteCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"}],\"name\":\"deleteState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"getCity\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIndustries\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct classes.City\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"getCityByAddr\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIndustries\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct classes.City\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iso\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCities\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct classes.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPollutionToken\",\"name\":\"ptContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateAddrDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DSESCenter.sol\":\"DSESCenter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Classes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary classes {\\n    struct State {\\n        string name;\\n        string iso;\\n        uint256 numberOfCities;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct City {\\n        string name;\\n        uint256 population;\\n        uint256 numberOfIndustries;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct Citizen {\\n        string name;\\n        uint256 checkedTimestamp;\\n        string surname;\\n        string email;\\n        string dateOfBirth;\\n        uint256 telephone;\\n        string physicalAddress;\\n        uint256 id; //used for bip44 wallet\\n    }\\n    struct Industry {\\n        string name;\\n        uint256 registrationTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8bd31cd79e30fa2465e62a4b928ac17e78fa8c7eccfcd029c6eb8c9ea66320ea\",\"license\":\"MIT\"},\"contracts/DSESCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"./interfaces/IPollutionToken.sol\\\";\\nimport \\\"./Classes.sol\\\";\\n//import \\\"./ChainlinkTools.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IDSESCenter {\\n    function getCityByAddr(\\n        address cityAddr\\n    ) external view returns (classes.City memory);\\n\\n    function checkExistingCity(address cityAddr) external view returns (bool);\\n}\\n\\ncontract DSESCenter is Initializable {\\n    address private admin;\\n    IPollutionToken private pt;\\n    //ChainlinkTools private ct;\\n    uint256 private constant INITIAL_SUPPLY = 100000;\\n    uint256 private constant multiplier = 10 ** 18;\\n\\n    mapping(address => classes.State) private states; //for login purposes\\n    mapping(address => classes.City) private cities;\\n\\n    error DSESCenter__Only_State_Allowed();\\n    error DSESCenter__Only_Admin_Allowed();\\n    error DSESCenter__State_Not_Found();\\n    error DSESCenter__City_Not_Found();\\n\\n    /*\\n    constructor(PollutionToken ptContractAddress) {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pt.storeContractAddress(address(this), msg.sender);\\n        ct = new ChainlinkTools();\\n    }\\n*/\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IPollutionToken ptContractAddress) public initializer {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pt.storeContractAddress(address(this), msg.sender);\\n        //ct = new ChainlinkTools();\\n    }\\n\\n    /*\\n    function updateContractAddress(address newAddr) public onlyAdmin {\\n        //DEPRECATED\\n        //used when redeployed only PollutionToken contract\\n        pt = IPollutionToken(newAddr);\\n        pt.storeContractAddress(address(this), msg.sender);\\n    }\\n*/\\n    function getCityByAddr(\\n        address cityAddr\\n    ) public view returns (classes.City memory) {\\n        return cities[cityAddr];\\n    }\\n\\n    function getContractAddress() public view returns (address) {\\n        return address(pt);\\n    }\\n\\n    function addState(\\n        //FAI DEI TEST GAS USANDO MEMORY E CLASSE DERIVATA E SENZA CLASSE DERIVATA\\n        string memory name,\\n        string memory iso,\\n        address stateAddr,\\n        uint256 numberOfCities,\\n        string memory attorneyName,\\n        string memory attorneySurname,\\n        string memory attorneyEmail,\\n        uint256 telephone,\\n        string memory physicalAddress,\\n        bool isModify\\n    ) external {\\n        //only callable by admin\\n\\n        require(\\n            msg.sender == admin && (!checkExistingState(stateAddr) || isModify),\\n            \\\"Error while adding a new state. Maybe you are not the owner or the state already exist\\\"\\n        );\\n        states[stateAddr] = classes.State(\\n            name,\\n            iso,\\n            numberOfCities,\\n            attorneyName,\\n            attorneySurname,\\n            attorneyEmail,\\n            telephone,\\n            physicalAddress\\n        );\\n        if (!isModify) {\\n            pt.transferExtended(msg.sender, stateAddr, 30000 * multiplier); //modificable}\\n        }\\n    }\\n\\n    function deleteState(address stateAddr) external onlyAdmin {\\n        if (checkExistingState(stateAddr)) {\\n            pt.transferExtended(stateAddr, msg.sender, pt.balanceOf(stateAddr));\\n            delete states[stateAddr];\\n        } else {\\n            revert DSESCenter__State_Not_Found();\\n        }\\n    }\\n\\n    function getState(\\n        address stateAddr\\n    ) public view returns (classes.State memory) {\\n        return states[stateAddr];\\n    }\\n\\n    function checkExistingState(address addr) public view returns (bool) {\\n        return bytes(states[addr].name).length > 0; //mapping are initialized as 0.\\n    }\\n\\n    function checkExistingAdmin(address addr) public view returns (bool) {\\n        return admin == addr;\\n    }\\n\\n    function transferToState(\\n        address stateAddrDestination,\\n        uint256 amount\\n    ) external onlyState {\\n        if (checkExistingState(stateAddrDestination)) {\\n            pt.transferExtended(\\n                msg.sender,\\n                stateAddrDestination,\\n                amount * 10 ** 18\\n            );\\n        } else {\\n            revert DSESCenter__State_Not_Found();\\n        }\\n    }\\n\\n    function addCity(\\n        string memory name,\\n        uint256 population,\\n        uint256 numberOfIndustries,\\n        address cityAddr,\\n        string memory attorneyName,\\n        string memory attorneySurname,\\n        string memory attorneyEmail,\\n        uint256 telephone,\\n        string memory physicalAddress,\\n        bool isModify\\n    ) external {\\n        require(\\n            checkExistingState(msg.sender) &&\\n                (!checkExistingCity(cityAddr) || isModify),\\n            \\\"Error while adding a new city. Maybe you are not a state or the city already exist\\\"\\n        );\\n\\n        cities[cityAddr] = classes.City(\\n            name,\\n            population,\\n            numberOfIndustries,\\n            attorneyName,\\n            attorneySurname,\\n            attorneyEmail,\\n            telephone,\\n            physicalAddress\\n        );\\n        /*\\n        uint256 tokenAssigned = (\\n            (pt.balanceOf(msg.sender) / states[msg.sender].numberOfCities)\\n        ) * multiplier; //#(tokenState/numberOfCitiesState)/cityPopulation\\n        */\\n        if (!isModify) {\\n            uint256 tokenAssigned = 1000 * multiplier;\\n            pt.transferExtended(msg.sender, cityAddr, tokenAssigned);\\n        }\\n    }\\n\\n    function checkExistingCity(address cityAddr) public view returns (bool) {\\n        return bytes(cities[cityAddr].name).length > 0; //mapping are initialized as 0.\\n    }\\n\\n    function deleteCity(address cityAddr) external onlyState {\\n        if (checkExistingCity(cityAddr)) {\\n            pt.transferExtended(cityAddr, msg.sender, pt.balanceOf(cityAddr));\\n            delete cities[cityAddr];\\n        } else {\\n            revert DSESCenter__City_Not_Found();\\n        }\\n    }\\n\\n    function getCity(\\n        address cityAddr\\n    ) public view returns (classes.City memory) {\\n        return cities[cityAddr];\\n    }\\n\\n    modifier onlyAdmin() {\\n        if ((msg.sender != admin)) {\\n            revert DSESCenter__Only_Admin_Allowed();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyState() {\\n        if ((!checkExistingState(msg.sender))) {\\n            revert DSESCenter__Only_State_Allowed();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbff5ce7ea086cc3397b2abbf2c54e6944299bee7a09fc1ae5dc0062079e09d19\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionToken {\\n    function transferExtended(address from, address to, uint256 value) external;\\n\\n    function getPreviousSender(address from) external view returns (address);\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transferForCities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function getUserCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc45c0827b00ea65aa388143d92cc821b8a924d3e0ac61ef8602663a65572f4d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b612bf780620001e26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806352a3ca021161008c578063a18d4f7111610066578063a18d4f7114610222578063a376e4d81461023e578063b8f2eac11461026e578063c4d66de81461029e576100cf565b806352a3ca02146101ba5780635a9c0e8c146101ea578063a0e3720a14610206576100cf565b80631142bd4e146100d45780631bab58f5146100f05780631fef660914610120578063259ed8a11461015057806332a2c5d01461018057806338a2b9f91461019e575b600080fd5b6100ee60048036038101906100e99190611ebc565b6102ba565b005b61010a60048036038101906101059190612043565b610530565b60405161011791906121d1565b60405180910390f35b61013a60048036038101906101359190612043565b61090a565b6040516101479190612202565b60405180910390f35b61016a60048036038101906101659190612043565b610964565b60405161017791906122e9565b60405180910390f35b610188610cb6565b604051610195919061231a565b60405180910390f35b6101b860048036038101906101b39190612043565b610ce0565b005b6101d460048036038101906101cf9190612043565b610f3d565b6040516101e191906122e9565b60405180910390f35b61020460048036038101906101ff9190612335565b61128f565b005b610220600480360381019061021b9190612043565b6114b7565b005b61023c600480360381019061023791906124a0565b611764565b005b61025860048036038101906102539190612043565b611890565b6040516102659190612202565b60405180910390f35b61028860048036038101906102839190612043565b6118ea565b6040516102959190612202565b60405180910390f35b6102b860048036038101906102b3919061251e565b611944565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610325575061031b886118ea565b15806103245750805b5b610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b906125f4565b60405180910390fd5b6040518061010001604052808b81526020018a815260200188815260200187815260200186815260200185815260200184815260200183815250600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816103f29190612820565b5060208201518160010190816104089190612820565b506040820151816002015560608201518160030190816104289190612820565b50608082015181600401908161043e9190612820565b5060a08201518160050190816104549190612820565b5060c0820151816006015560e08201518160070190816104749190612820565b509050508061052457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f2338a670de0b6b3a76400006175306104d39190612921565b6040518463ffffffff1660e01b81526004016104f193929190612972565b600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b505050505b50505050505050505050565b610538611baf565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201805461059390612643565b80601f01602080910402602001604051908101604052809291908181526020018280546105bf90612643565b801561060c5780601f106105e15761010080835404028352916020019161060c565b820191906000526020600020905b8154815290600101906020018083116105ef57829003601f168201915b5050505050815260200160018201805461062590612643565b80601f016020809104026020016040519081016040528092919081815260200182805461065190612643565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b50505050508152602001600282015481526020016003820180546106c190612643565b80601f01602080910402602001604051908101604052809291908181526020018280546106ed90612643565b801561073a5780601f1061070f5761010080835404028352916020019161073a565b820191906000526020600020905b81548152906001019060200180831161071d57829003601f168201915b5050505050815260200160048201805461075390612643565b80601f016020809104026020016040519081016040528092919081815260200182805461077f90612643565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b505050505081526020016005820180546107e590612643565b80601f016020809104026020016040519081016040528092919081815260200182805461081190612643565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b505050505081526020016006820154815260200160078201805461088190612643565b80601f01602080910402602001604051908101604052809291908181526020018280546108ad90612643565b80156108fa5780601f106108cf576101008083540402835291602001916108fa565b820191906000526020600020905b8154815290600101906020018083116108dd57829003601f168201915b5050505050815250509050919050565b60008173ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b61096c611bf4565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820180546109c790612643565b80601f01602080910402602001604051908101604052809291908181526020018280546109f390612643565b8015610a405780601f10610a1557610100808354040283529160200191610a40565b820191906000526020600020905b815481529060010190602001808311610a2357829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382018054610a6d90612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9990612643565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b50505050508152602001600482018054610aff90612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2b90612643565b8015610b785780601f10610b4d57610100808354040283529160200191610b78565b820191906000526020600020905b815481529060010190602001808311610b5b57829003601f168201915b50505050508152602001600582018054610b9190612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbd90612643565b8015610c0a5780601f10610bdf57610100808354040283529160200191610c0a565b820191906000526020600020905b815481529060010190602001808311610bed57829003601f168201915b5050505050815260200160068201548152602001600782018054610c2d90612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5990612643565b8015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b5050505050815250509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ce9336118ea565b610d1f576040517fddbd314a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d2881611890565b15610f0857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401610dc8919061231a565b602060405180830381865afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0991906129be565b6040518463ffffffff1660e01b8152600401610e2793929190612972565b600060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b50505050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000610ea99190611c39565b60018201600090556002820160009055600382016000610ec99190611c39565b600482016000610ed99190611c39565b600582016000610ee99190611c39565b6006820160009055600782016000610f019190611c39565b5050610f3a565b6040517ffba73c2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b610f45611bf4565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610fa090612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcc90612643565b80156110195780601f10610fee57610100808354040283529160200191611019565b820191906000526020600020905b815481529060010190602001808311610ffc57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201805461104690612643565b80601f016020809104026020016040519081016040528092919081815260200182805461107290612643565b80156110bf5780601f10611094576101008083540402835291602001916110bf565b820191906000526020600020905b8154815290600101906020018083116110a257829003601f168201915b505050505081526020016004820180546110d890612643565b80601f016020809104026020016040519081016040528092919081815260200182805461110490612643565b80156111515780601f1061112657610100808354040283529160200191611151565b820191906000526020600020905b81548152906001019060200180831161113457829003601f168201915b5050505050815260200160058201805461116a90612643565b80601f016020809104026020016040519081016040528092919081815260200182805461119690612643565b80156111e35780601f106111b8576101008083540402835291602001916111e3565b820191906000526020600020905b8154815290600101906020018083116111c657829003601f168201915b505050505081526020016006820154815260200160078201805461120690612643565b80601f016020809104026020016040519081016040528092919081815260200182805461123290612643565b801561127f5780601f106112545761010080835404028352916020019161127f565b820191906000526020600020905b81548152906001019060200180831161126257829003601f168201915b5050505050815250509050919050565b611298336118ea565b80156112b257506112a887611890565b15806112b15750805b5b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890612a83565b60405180910390fd5b6040518061010001604052808b81526020018a815260200189815260200187815260200186815260200185815260200184815260200183815250600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161137f9190612820565b50602082015181600101556040820151816002015560608201518160030190816113a99190612820565b5060808201518160040190816113bf9190612820565b5060a08201518160050190816113d59190612820565b5060c0820151816006015560e08201518160070190816113f59190612820565b50905050806114ab576000670de0b6b3a76400006103e86114169190612921565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f2338a846040518463ffffffff1660e01b815260040161147793929190612972565b600060405180830381600087803b15801561149157600080fd5b505af11580156114a5573d6000803e3d6000fd5b50505050505b50505050505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153e576040517ffc7b657100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611547816118ea565b1561172f57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016115e7919061231a565b602060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162891906129be565b6040518463ffffffff1660e01b815260040161164693929190612972565b600060405180830381600087803b15801561166057600080fd5b505af1158015611674573d6000803e3d6000fd5b50505050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006116c89190611c39565b6001820160006116d89190611c39565b60028201600090556003820160006116f09190611c39565b6004820160006117009190611c39565b6005820160006117109190611c39565b60068201600090556007820160006117289190611c39565b5050611761565b6040517f70f1a5c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b61176d336118ea565b6117a3576040517fddbd314a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117ac826118ea565b1561185a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23384670de0b6b3a7640000856118059190612921565b6040518463ffffffff1660e01b815260040161182393929190612972565b600060405180830381600087803b15801561183d57600080fd5b505af1158015611851573d6000803e3d6000fd5b5050505061188c565b6040517f70f1a5c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180546118e090612643565b9050119050919050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461193a90612643565b9050119050919050565b60008060019054906101000a900460ff161590508080156119755750600160008054906101000a900460ff1660ff16105b806119a2575061198430611b8c565b1580156119a15750600160008054906101000a900460ff1660ff16145b5b6119e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d890612b15565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a1e576001600060016101000a81548160ff0219169083151502179055505b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401611afd929190612b35565b600060405180830381600087803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b505050508015611b885760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b7f9190612ba6565b60405180910390a15b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60405180610100016040528060608152602001606081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b60405180610100016040528060608152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b508054611c4590612643565b6000825580601f10611c575750611c76565b601f016020900490600052602060002090810190611c759190611c79565b5b50565b5b80821115611c92576000816000905550600101611c7a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cfd82611cb4565b810181811067ffffffffffffffff82111715611d1c57611d1b611cc5565b5b80604052505050565b6000611d2f611c96565b9050611d3b8282611cf4565b919050565b600067ffffffffffffffff821115611d5b57611d5a611cc5565b5b611d6482611cb4565b9050602081019050919050565b82818337600083830152505050565b6000611d93611d8e84611d40565b611d25565b905082815260208101848484011115611daf57611dae611caf565b5b611dba848285611d71565b509392505050565b600082601f830112611dd757611dd6611caa565b5b8135611de7848260208601611d80565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e1b82611df0565b9050919050565b611e2b81611e10565b8114611e3657600080fd5b50565b600081359050611e4881611e22565b92915050565b6000819050919050565b611e6181611e4e565b8114611e6c57600080fd5b50565b600081359050611e7e81611e58565b92915050565b60008115159050919050565b611e9981611e84565b8114611ea457600080fd5b50565b600081359050611eb681611e90565b92915050565b6000806000806000806000806000806101408b8d031215611ee057611edf611ca0565b5b60008b013567ffffffffffffffff811115611efe57611efd611ca5565b5b611f0a8d828e01611dc2565b9a505060208b013567ffffffffffffffff811115611f2b57611f2a611ca5565b5b611f378d828e01611dc2565b9950506040611f488d828e01611e39565b9850506060611f598d828e01611e6f565b97505060808b013567ffffffffffffffff811115611f7a57611f79611ca5565b5b611f868d828e01611dc2565b96505060a08b013567ffffffffffffffff811115611fa757611fa6611ca5565b5b611fb38d828e01611dc2565b95505060c08b013567ffffffffffffffff811115611fd457611fd3611ca5565b5b611fe08d828e01611dc2565b94505060e0611ff18d828e01611e6f565b9350506101008b013567ffffffffffffffff81111561201357612012611ca5565b5b61201f8d828e01611dc2565b9250506101206120318d828e01611ea7565b9150509295989b9194979a5092959850565b60006020828403121561205957612058611ca0565b5b600061206784828501611e39565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120aa57808201518184015260208101905061208f565b60008484015250505050565b60006120c182612070565b6120cb818561207b565b93506120db81856020860161208c565b6120e481611cb4565b840191505092915050565b6120f881611e4e565b82525050565b600061010083016000830151848203600086015261211c82826120b6565b9150506020830151848203602086015261213682826120b6565b915050604083015161214b60408601826120ef565b506060830151848203606086015261216382826120b6565b9150506080830151848203608086015261217d82826120b6565b91505060a083015184820360a086015261219782826120b6565b91505060c08301516121ac60c08601826120ef565b5060e083015184820360e08601526121c482826120b6565b9150508091505092915050565b600060208201905081810360008301526121eb81846120fe565b905092915050565b6121fc81611e84565b82525050565b600060208201905061221760008301846121f3565b92915050565b600061010083016000830151848203600086015261223b82826120b6565b915050602083015161225060208601826120ef565b50604083015161226360408601826120ef565b506060830151848203606086015261227b82826120b6565b9150506080830151848203608086015261229582826120b6565b91505060a083015184820360a08601526122af82826120b6565b91505060c08301516122c460c08601826120ef565b5060e083015184820360e08601526122dc82826120b6565b9150508091505092915050565b60006020820190508181036000830152612303818461221d565b905092915050565b61231481611e10565b82525050565b600060208201905061232f600083018461230b565b92915050565b6000806000806000806000806000806101408b8d03121561235957612358611ca0565b5b60008b013567ffffffffffffffff81111561237757612376611ca5565b5b6123838d828e01611dc2565b9a505060206123948d828e01611e6f565b99505060406123a58d828e01611e6f565b98505060606123b68d828e01611e39565b97505060808b013567ffffffffffffffff8111156123d7576123d6611ca5565b5b6123e38d828e01611dc2565b96505060a08b013567ffffffffffffffff81111561240457612403611ca5565b5b6124108d828e01611dc2565b95505060c08b013567ffffffffffffffff81111561243157612430611ca5565b5b61243d8d828e01611dc2565b94505060e061244e8d828e01611e6f565b9350506101008b013567ffffffffffffffff8111156124705761246f611ca5565b5b61247c8d828e01611dc2565b92505061012061248e8d828e01611ea7565b9150509295989b9194979a5092959850565b600080604083850312156124b7576124b6611ca0565b5b60006124c585828601611e39565b92505060206124d685828601611e6f565b9150509250929050565b60006124eb82611e10565b9050919050565b6124fb816124e0565b811461250657600080fd5b50565b600081359050612518816124f2565b92915050565b60006020828403121561253457612533611ca0565b5b600061254284828501612509565b91505092915050565b600082825260208201905092915050565b7f4572726f72207768696c6520616464696e672061206e65772073746174652e2060008201527f4d6179626520796f7520617265206e6f7420746865206f776e6572206f72207460208201527f686520737461746520616c726561647920657869737400000000000000000000604082015250565b60006125de60568361254b565b91506125e98261255c565b606082019050919050565b6000602082019050818103600083015261260d816125d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265b57607f821691505b60208210810361266e5761266d612614565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026126d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612699565b6126e08683612699565b95508019841693508086168417925050509392505050565b6000819050919050565b600061271d61271861271384611e4e565b6126f8565b611e4e565b9050919050565b6000819050919050565b61273783612702565b61274b61274382612724565b8484546126a6565b825550505050565b600090565b612760612753565b61276b81848461272e565b505050565b5b8181101561278f57612784600082612758565b600181019050612771565b5050565b601f8211156127d4576127a581612674565b6127ae84612689565b810160208510156127bd578190505b6127d16127c985612689565b830182612770565b50505b505050565b600082821c905092915050565b60006127f7600019846008026127d9565b1980831691505092915050565b600061281083836127e6565b9150826002028217905092915050565b61282982612070565b67ffffffffffffffff81111561284257612841611cc5565b5b61284c8254612643565b612857828285612793565b600060209050601f83116001811461288a5760008415612878578287015190505b6128828582612804565b8655506128ea565b601f19841661289886612674565b60005b828110156128c05784890151825560018201915060208501945060208101905061289b565b868310156128dd57848901516128d9601f8916826127e6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061292c82611e4e565b915061293783611e4e565b925082820261294581611e4e565b9150828204841483151761295c5761295b6128f2565b5b5092915050565b61296c81611e4e565b82525050565b6000606082019050612987600083018661230b565b612994602083018561230b565b6129a16040830184612963565b949350505050565b6000815190506129b881611e58565b92915050565b6000602082840312156129d4576129d3611ca0565b5b60006129e2848285016129a9565b91505092915050565b7f4572726f72207768696c6520616464696e672061206e657720636974792e204d60008201527f6179626520796f7520617265206e6f742061207374617465206f72207468652060208201527f6369747920616c72656164792065786973740000000000000000000000000000604082015250565b6000612a6d60528361254b565b9150612a78826129eb565b606082019050919050565b60006020820190508181036000830152612a9c81612a60565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612aff602e8361254b565b9150612b0a82612aa3565b604082019050919050565b60006020820190508181036000830152612b2e81612af2565b9050919050565b6000604082019050612b4a600083018561230b565b612b57602083018461230b565b9392505050565b6000819050919050565b600060ff82169050919050565b6000612b90612b8b612b8684612b5e565b6126f8565b612b68565b9050919050565b612ba081612b75565b82525050565b6000602082019050612bbb6000830184612b97565b9291505056fea26469706673582212202bb102224fc9a7450c9650ebde68e9ab5ad0fe3777dcc5cc732df720dc7e6be864736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806352a3ca021161008c578063a18d4f7111610066578063a18d4f7114610222578063a376e4d81461023e578063b8f2eac11461026e578063c4d66de81461029e576100cf565b806352a3ca02146101ba5780635a9c0e8c146101ea578063a0e3720a14610206576100cf565b80631142bd4e146100d45780631bab58f5146100f05780631fef660914610120578063259ed8a11461015057806332a2c5d01461018057806338a2b9f91461019e575b600080fd5b6100ee60048036038101906100e99190611ebc565b6102ba565b005b61010a60048036038101906101059190612043565b610530565b60405161011791906121d1565b60405180910390f35b61013a60048036038101906101359190612043565b61090a565b6040516101479190612202565b60405180910390f35b61016a60048036038101906101659190612043565b610964565b60405161017791906122e9565b60405180910390f35b610188610cb6565b604051610195919061231a565b60405180910390f35b6101b860048036038101906101b39190612043565b610ce0565b005b6101d460048036038101906101cf9190612043565b610f3d565b6040516101e191906122e9565b60405180910390f35b61020460048036038101906101ff9190612335565b61128f565b005b610220600480360381019061021b9190612043565b6114b7565b005b61023c600480360381019061023791906124a0565b611764565b005b61025860048036038101906102539190612043565b611890565b6040516102659190612202565b60405180910390f35b61028860048036038101906102839190612043565b6118ea565b6040516102959190612202565b60405180910390f35b6102b860048036038101906102b3919061251e565b611944565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610325575061031b886118ea565b15806103245750805b5b610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b906125f4565b60405180910390fd5b6040518061010001604052808b81526020018a815260200188815260200187815260200186815260200185815260200184815260200183815250600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816103f29190612820565b5060208201518160010190816104089190612820565b506040820151816002015560608201518160030190816104289190612820565b50608082015181600401908161043e9190612820565b5060a08201518160050190816104549190612820565b5060c0820151816006015560e08201518160070190816104749190612820565b509050508061052457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f2338a670de0b6b3a76400006175306104d39190612921565b6040518463ffffffff1660e01b81526004016104f193929190612972565b600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b505050505b50505050505050505050565b610538611baf565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201805461059390612643565b80601f01602080910402602001604051908101604052809291908181526020018280546105bf90612643565b801561060c5780601f106105e15761010080835404028352916020019161060c565b820191906000526020600020905b8154815290600101906020018083116105ef57829003601f168201915b5050505050815260200160018201805461062590612643565b80601f016020809104026020016040519081016040528092919081815260200182805461065190612643565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b50505050508152602001600282015481526020016003820180546106c190612643565b80601f01602080910402602001604051908101604052809291908181526020018280546106ed90612643565b801561073a5780601f1061070f5761010080835404028352916020019161073a565b820191906000526020600020905b81548152906001019060200180831161071d57829003601f168201915b5050505050815260200160048201805461075390612643565b80601f016020809104026020016040519081016040528092919081815260200182805461077f90612643565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b505050505081526020016005820180546107e590612643565b80601f016020809104026020016040519081016040528092919081815260200182805461081190612643565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b505050505081526020016006820154815260200160078201805461088190612643565b80601f01602080910402602001604051908101604052809291908181526020018280546108ad90612643565b80156108fa5780601f106108cf576101008083540402835291602001916108fa565b820191906000526020600020905b8154815290600101906020018083116108dd57829003601f168201915b5050505050815250509050919050565b60008173ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b61096c611bf4565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820180546109c790612643565b80601f01602080910402602001604051908101604052809291908181526020018280546109f390612643565b8015610a405780601f10610a1557610100808354040283529160200191610a40565b820191906000526020600020905b815481529060010190602001808311610a2357829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382018054610a6d90612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9990612643565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b50505050508152602001600482018054610aff90612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2b90612643565b8015610b785780601f10610b4d57610100808354040283529160200191610b78565b820191906000526020600020905b815481529060010190602001808311610b5b57829003601f168201915b50505050508152602001600582018054610b9190612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbd90612643565b8015610c0a5780601f10610bdf57610100808354040283529160200191610c0a565b820191906000526020600020905b815481529060010190602001808311610bed57829003601f168201915b5050505050815260200160068201548152602001600782018054610c2d90612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5990612643565b8015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b5050505050815250509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ce9336118ea565b610d1f576040517fddbd314a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d2881611890565b15610f0857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401610dc8919061231a565b602060405180830381865afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0991906129be565b6040518463ffffffff1660e01b8152600401610e2793929190612972565b600060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b50505050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000610ea99190611c39565b60018201600090556002820160009055600382016000610ec99190611c39565b600482016000610ed99190611c39565b600582016000610ee99190611c39565b6006820160009055600782016000610f019190611c39565b5050610f3a565b6040517ffba73c2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b610f45611bf4565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610fa090612643565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcc90612643565b80156110195780601f10610fee57610100808354040283529160200191611019565b820191906000526020600020905b815481529060010190602001808311610ffc57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201805461104690612643565b80601f016020809104026020016040519081016040528092919081815260200182805461107290612643565b80156110bf5780601f10611094576101008083540402835291602001916110bf565b820191906000526020600020905b8154815290600101906020018083116110a257829003601f168201915b505050505081526020016004820180546110d890612643565b80601f016020809104026020016040519081016040528092919081815260200182805461110490612643565b80156111515780601f1061112657610100808354040283529160200191611151565b820191906000526020600020905b81548152906001019060200180831161113457829003601f168201915b5050505050815260200160058201805461116a90612643565b80601f016020809104026020016040519081016040528092919081815260200182805461119690612643565b80156111e35780601f106111b8576101008083540402835291602001916111e3565b820191906000526020600020905b8154815290600101906020018083116111c657829003601f168201915b505050505081526020016006820154815260200160078201805461120690612643565b80601f016020809104026020016040519081016040528092919081815260200182805461123290612643565b801561127f5780601f106112545761010080835404028352916020019161127f565b820191906000526020600020905b81548152906001019060200180831161126257829003601f168201915b5050505050815250509050919050565b611298336118ea565b80156112b257506112a887611890565b15806112b15750805b5b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890612a83565b60405180910390fd5b6040518061010001604052808b81526020018a815260200189815260200187815260200186815260200185815260200184815260200183815250600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161137f9190612820565b50602082015181600101556040820151816002015560608201518160030190816113a99190612820565b5060808201518160040190816113bf9190612820565b5060a08201518160050190816113d59190612820565b5060c0820151816006015560e08201518160070190816113f59190612820565b50905050806114ab576000670de0b6b3a76400006103e86114169190612921565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f2338a846040518463ffffffff1660e01b815260040161147793929190612972565b600060405180830381600087803b15801561149157600080fd5b505af11580156114a5573d6000803e3d6000fd5b50505050505b50505050505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153e576040517ffc7b657100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611547816118ea565b1561172f57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016115e7919061231a565b602060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162891906129be565b6040518463ffffffff1660e01b815260040161164693929190612972565b600060405180830381600087803b15801561166057600080fd5b505af1158015611674573d6000803e3d6000fd5b50505050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006116c89190611c39565b6001820160006116d89190611c39565b60028201600090556003820160006116f09190611c39565b6004820160006117009190611c39565b6005820160006117109190611c39565b60068201600090556007820160006117289190611c39565b5050611761565b6040517f70f1a5c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b61176d336118ea565b6117a3576040517fddbd314a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117ac826118ea565b1561185a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23384670de0b6b3a7640000856118059190612921565b6040518463ffffffff1660e01b815260040161182393929190612972565b600060405180830381600087803b15801561183d57600080fd5b505af1158015611851573d6000803e3d6000fd5b5050505061188c565b6040517f70f1a5c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180546118e090612643565b9050119050919050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461193a90612643565b9050119050919050565b60008060019054906101000a900460ff161590508080156119755750600160008054906101000a900460ff1660ff16105b806119a2575061198430611b8c565b1580156119a15750600160008054906101000a900460ff1660ff16145b5b6119e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d890612b15565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a1e576001600060016101000a81548160ff0219169083151502179055505b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401611afd929190612b35565b600060405180830381600087803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b505050508015611b885760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b7f9190612ba6565b60405180910390a15b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60405180610100016040528060608152602001606081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b60405180610100016040528060608152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b508054611c4590612643565b6000825580601f10611c575750611c76565b601f016020900490600052602060002090810190611c759190611c79565b5b50565b5b80821115611c92576000816000905550600101611c7a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cfd82611cb4565b810181811067ffffffffffffffff82111715611d1c57611d1b611cc5565b5b80604052505050565b6000611d2f611c96565b9050611d3b8282611cf4565b919050565b600067ffffffffffffffff821115611d5b57611d5a611cc5565b5b611d6482611cb4565b9050602081019050919050565b82818337600083830152505050565b6000611d93611d8e84611d40565b611d25565b905082815260208101848484011115611daf57611dae611caf565b5b611dba848285611d71565b509392505050565b600082601f830112611dd757611dd6611caa565b5b8135611de7848260208601611d80565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e1b82611df0565b9050919050565b611e2b81611e10565b8114611e3657600080fd5b50565b600081359050611e4881611e22565b92915050565b6000819050919050565b611e6181611e4e565b8114611e6c57600080fd5b50565b600081359050611e7e81611e58565b92915050565b60008115159050919050565b611e9981611e84565b8114611ea457600080fd5b50565b600081359050611eb681611e90565b92915050565b6000806000806000806000806000806101408b8d031215611ee057611edf611ca0565b5b60008b013567ffffffffffffffff811115611efe57611efd611ca5565b5b611f0a8d828e01611dc2565b9a505060208b013567ffffffffffffffff811115611f2b57611f2a611ca5565b5b611f378d828e01611dc2565b9950506040611f488d828e01611e39565b9850506060611f598d828e01611e6f565b97505060808b013567ffffffffffffffff811115611f7a57611f79611ca5565b5b611f868d828e01611dc2565b96505060a08b013567ffffffffffffffff811115611fa757611fa6611ca5565b5b611fb38d828e01611dc2565b95505060c08b013567ffffffffffffffff811115611fd457611fd3611ca5565b5b611fe08d828e01611dc2565b94505060e0611ff18d828e01611e6f565b9350506101008b013567ffffffffffffffff81111561201357612012611ca5565b5b61201f8d828e01611dc2565b9250506101206120318d828e01611ea7565b9150509295989b9194979a5092959850565b60006020828403121561205957612058611ca0565b5b600061206784828501611e39565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120aa57808201518184015260208101905061208f565b60008484015250505050565b60006120c182612070565b6120cb818561207b565b93506120db81856020860161208c565b6120e481611cb4565b840191505092915050565b6120f881611e4e565b82525050565b600061010083016000830151848203600086015261211c82826120b6565b9150506020830151848203602086015261213682826120b6565b915050604083015161214b60408601826120ef565b506060830151848203606086015261216382826120b6565b9150506080830151848203608086015261217d82826120b6565b91505060a083015184820360a086015261219782826120b6565b91505060c08301516121ac60c08601826120ef565b5060e083015184820360e08601526121c482826120b6565b9150508091505092915050565b600060208201905081810360008301526121eb81846120fe565b905092915050565b6121fc81611e84565b82525050565b600060208201905061221760008301846121f3565b92915050565b600061010083016000830151848203600086015261223b82826120b6565b915050602083015161225060208601826120ef565b50604083015161226360408601826120ef565b506060830151848203606086015261227b82826120b6565b9150506080830151848203608086015261229582826120b6565b91505060a083015184820360a08601526122af82826120b6565b91505060c08301516122c460c08601826120ef565b5060e083015184820360e08601526122dc82826120b6565b9150508091505092915050565b60006020820190508181036000830152612303818461221d565b905092915050565b61231481611e10565b82525050565b600060208201905061232f600083018461230b565b92915050565b6000806000806000806000806000806101408b8d03121561235957612358611ca0565b5b60008b013567ffffffffffffffff81111561237757612376611ca5565b5b6123838d828e01611dc2565b9a505060206123948d828e01611e6f565b99505060406123a58d828e01611e6f565b98505060606123b68d828e01611e39565b97505060808b013567ffffffffffffffff8111156123d7576123d6611ca5565b5b6123e38d828e01611dc2565b96505060a08b013567ffffffffffffffff81111561240457612403611ca5565b5b6124108d828e01611dc2565b95505060c08b013567ffffffffffffffff81111561243157612430611ca5565b5b61243d8d828e01611dc2565b94505060e061244e8d828e01611e6f565b9350506101008b013567ffffffffffffffff8111156124705761246f611ca5565b5b61247c8d828e01611dc2565b92505061012061248e8d828e01611ea7565b9150509295989b9194979a5092959850565b600080604083850312156124b7576124b6611ca0565b5b60006124c585828601611e39565b92505060206124d685828601611e6f565b9150509250929050565b60006124eb82611e10565b9050919050565b6124fb816124e0565b811461250657600080fd5b50565b600081359050612518816124f2565b92915050565b60006020828403121561253457612533611ca0565b5b600061254284828501612509565b91505092915050565b600082825260208201905092915050565b7f4572726f72207768696c6520616464696e672061206e65772073746174652e2060008201527f4d6179626520796f7520617265206e6f7420746865206f776e6572206f72207460208201527f686520737461746520616c726561647920657869737400000000000000000000604082015250565b60006125de60568361254b565b91506125e98261255c565b606082019050919050565b6000602082019050818103600083015261260d816125d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265b57607f821691505b60208210810361266e5761266d612614565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026126d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612699565b6126e08683612699565b95508019841693508086168417925050509392505050565b6000819050919050565b600061271d61271861271384611e4e565b6126f8565b611e4e565b9050919050565b6000819050919050565b61273783612702565b61274b61274382612724565b8484546126a6565b825550505050565b600090565b612760612753565b61276b81848461272e565b505050565b5b8181101561278f57612784600082612758565b600181019050612771565b5050565b601f8211156127d4576127a581612674565b6127ae84612689565b810160208510156127bd578190505b6127d16127c985612689565b830182612770565b50505b505050565b600082821c905092915050565b60006127f7600019846008026127d9565b1980831691505092915050565b600061281083836127e6565b9150826002028217905092915050565b61282982612070565b67ffffffffffffffff81111561284257612841611cc5565b5b61284c8254612643565b612857828285612793565b600060209050601f83116001811461288a5760008415612878578287015190505b6128828582612804565b8655506128ea565b601f19841661289886612674565b60005b828110156128c05784890151825560018201915060208501945060208101905061289b565b868310156128dd57848901516128d9601f8916826127e6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061292c82611e4e565b915061293783611e4e565b925082820261294581611e4e565b9150828204841483151761295c5761295b6128f2565b5b5092915050565b61296c81611e4e565b82525050565b6000606082019050612987600083018661230b565b612994602083018561230b565b6129a16040830184612963565b949350505050565b6000815190506129b881611e58565b92915050565b6000602082840312156129d4576129d3611ca0565b5b60006129e2848285016129a9565b91505092915050565b7f4572726f72207768696c6520616464696e672061206e657720636974792e204d60008201527f6179626520796f7520617265206e6f742061207374617465206f72207468652060208201527f6369747920616c72656164792065786973740000000000000000000000000000604082015250565b6000612a6d60528361254b565b9150612a78826129eb565b606082019050919050565b60006020820190508181036000830152612a9c81612a60565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612aff602e8361254b565b9150612b0a82612aa3565b604082019050919050565b60006020820190508181036000830152612b2e81612af2565b9050919050565b6000604082019050612b4a600083018561230b565b612b57602083018461230b565b9392505050565b6000819050919050565b600060ff82169050919050565b6000612b90612b8b612b8684612b5e565b6126f8565b612b68565b9050919050565b612ba081612b75565b82525050565b6000602082019050612bbb6000830184612b97565b9291505056fea26469706673582212202bb102224fc9a7450c9650ebde68e9ab5ad0fe3777dcc5cc732df720dc7e6be864736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1038,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1041,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "pt",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPollutionToken)1585"
      },
      {
        "astId": 1054,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "states",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(State)973_storage)"
      },
      {
        "astId": 1059,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "cities",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(City)990_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPollutionToken)1585": {
        "encoding": "inplace",
        "label": "contract IPollutionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(City)990_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.City)",
        "numberOfBytes": "32",
        "value": "t_struct(City)990_storage"
      },
      "t_mapping(t_address,t_struct(State)973_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)973_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(City)990_storage": {
        "encoding": "inplace",
        "label": "struct classes.City",
        "members": [
          {
            "astId": 975,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 977,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "population",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 979,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "numberOfIndustries",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 981,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 983,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneySurname",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 985,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyEmail",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 987,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "telephone",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "physicalAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(State)973_storage": {
        "encoding": "inplace",
        "label": "struct classes.State",
        "members": [
          {
            "astId": 958,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 960,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "iso",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 962,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "numberOfCities",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 964,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 966,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneySurname",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 968,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyEmail",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 970,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "telephone",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 972,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "physicalAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}