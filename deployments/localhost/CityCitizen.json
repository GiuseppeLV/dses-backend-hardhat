{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CityCitizen__Citizen_Not_Found",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NoTokenCitizen",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "checkedTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "surname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfBirth",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "telephone",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModify",
          "type": "bool"
        }
      ],
      "name": "addCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingCitizen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingCitizenOfACity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balanceOfCitizen",
          "type": "uint256"
        }
      ],
      "name": "checkForNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUsed",
          "type": "uint256"
        }
      ],
      "name": "consumePTFromCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "deleteCitizen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddr",
          "type": "address"
        }
      ],
      "name": "getCitizen",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "checkedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "surname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfBirth",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            }
          ],
          "internalType": "struct classes.Citizen",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPollutionToken",
          "name": "ptContractAddress",
          "type": "address"
        },
        {
          "internalType": "contract IDSESCenter",
          "name": "dsesCenterAddress",
          "type": "address"
        },
        {
          "internalType": "contract IPollutionNft",
          "name": "pnftAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenToBeAssigned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "ad285fe72c307a87df03b844c5953281",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CityCitizen__Citizen_Not_Found\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NoTokenCitizen\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"surname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfBirth\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModify\",\"type\":\"bool\"}],\"name\":\"addCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"checkExistingCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"checkExistingCitizenOfACity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfCitizen\",\"type\":\"uint256\"}],\"name\":\"checkForNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"}],\"name\":\"consumePTFromCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"deleteCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizenAddr\",\"type\":\"address\"}],\"name\":\"getCitizen\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"checkedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"surname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfBirth\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"internalType\":\"struct classes.Citizen\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPollutionToken\",\"name\":\"ptContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IDSESCenter\",\"name\":\"dsesCenterAddress\",\"type\":\"address\"},{\"internalType\":\"contract IPollutionNft\",\"name\":\"pnftAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToBeAssigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Giuseppe La Vecchia\",\"custom:experimental\":\"This is an experimental contract.\",\"details\":\"for testing the checkingForExpiredToken function, it is needed to the \\\"if\\\" statement, because it will trigger the content only once every 30 days\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addCitizen(string,address,uint256,string,string,string,uint256,string,string,bool)\":{\"details\":\"all the require means that you can enter the function in 2 cases: 1)if you are a city and you are going to modify an existing citizen (added previously by the city) 2)If you are a city and you want to add a non-existing citizen, so you are not going to modifyif it is not a modify action, the getUserCount is called. In the other case, the citizen with an already id is provided (in id = getCitizen(citizenAddr).id; code line)\",\"params\":{\"isModify\":\"if true, it means that the caller of this function want to change something in a Citizen. Otherwise it is an addition operation.\"}},\"checkExistingCitizenOfACity(address,address)\":{\"params\":{\"citizenAddr\":\"address of that citizen to check\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"consumePTFromCitizen(uint256)\":{\"params\":{\"amountUsed\":\"the contract address of the PollutionToken contract, used by this contract.\"}},\"initialize(address,address,address)\":{\"params\":{\"dsesCenterAddress\":\"the contract address of the DSESCenter contract, used by this contract.\",\"pnftAddress\":\"the contract address of the PollutionNft contract, used by this contract.\",\"ptContractAddress\":\"the contract address of the PollutionToken contract, used by this contract.\"}}},\"title\":\"A contract to be used by Cities and Citizens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCitizen(string,address,uint256,string,string,string,uint256,string,string,bool)\":{\"notice\":\"Add a new citizen instanceAllows a City to add a new citizen giving an initial amount of PollutionTokens. It can also be used for editing purpose of the Citizen's parameters.\"},\"checkExistingCitizenOfACity(address,address)\":{\"notice\":\"This will return true if citizen was added by a city, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like city add citizen.\"},\"consumePTFromCitizen(uint256)\":{\"notice\":\"Consume PollutionToken by Citizena Citizen equipped with a sensor will send a certain amount of data produced ('amountUsed') periodically. If its PollutionToken balance is not 0, he send back to the City that amountUsed of PT, otherwise he emit an Event notifying States that he finished his tokens. Before doing that,it is necessary to check that 1 month has not passed since the beginning of a new cycle (Start of the cycle->consumingPT->end of a month->give back to city the remaining PT->if any, give NFTs to Citizen).\"},\"initialize(address,address,address)\":{\"notice\":\"Initialize function for the proxy upgradable pattern by OpenZeppelinInitialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract and pollution nft contract, allowing this contract to call its functions\"}},\"notice\":\"Used for CRUD operations and for consuming PT by the Citizen\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CityCitizen.sol\":\"CityCitizen\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/CityCitizen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./Classes.sol\\\";\\n//import {IDSESCenter} from \\\"./DSESCenter.sol\\\";\\nimport \\\"./interfaces/IDSESCenter.sol\\\";\\nimport \\\"./interfaces/IPollutionToken.sol\\\";\\nimport \\\"./interfaces/IPollutionNft.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {methods} from \\\"./Library.sol\\\";\\n\\n/// @title A contract to be used by Cities and Citizens\\n/// @author Giuseppe La Vecchia\\n/// @notice Used for CRUD operations and for consuming PT by the Citizen\\n/// @dev for testing the checkingForExpiredToken function, it is needed to the \\\"if\\\" statement, because it will trigger the content only once every 30 days\\n/// @custom:experimental This is an experimental contract.\\n\\ncontract CityCitizen is Initializable {\\n    //for login purposes\\n\\n    mapping(address => classes.Citizen) private citizens;\\n    uint256 private constant multiplier = 10 ** 18; //18 are the decimals\\n    IPollutionToken private pt;\\n    address private admin;\\n    IDSESCenter private dsesCenter;\\n    IPollutionNft private pnft;\\n    event NoTokenCitizen(address indexed citizenAddr, uint256 timestamp);\\n    error CityCitizen__Citizen_Not_Found();\\n    bool private locked;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers(); //An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. This function in the constructor automatically lock it when it is deployed.\\n        //to get further information you can visit https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable\\n    }\\n\\n    /**\\n     * Initialize function for the proxy upgradable pattern by OpenZeppelin\\n     *\\n     * @notice Initialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract and pollution nft contract, allowing this contract to call its functions\\n     *\\n     * @param ptContractAddress the contract address of the PollutionToken contract, used by this contract.\\n     * @param dsesCenterAddress the contract address of the DSESCenter contract, used by this contract.\\n     * @param pnftAddress the contract address of the PollutionNft contract, used by this contract.\\n     *\\n     */\\n    function initialize(\\n        IPollutionToken ptContractAddress,\\n        IDSESCenter dsesCenterAddress,\\n        IPollutionNft pnftAddress\\n    ) public initializer {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pnft = pnftAddress;\\n        dsesCenter = dsesCenterAddress;\\n        pnft.storeContractAddress(address(this), msg.sender);\\n        pt.storeContractAddress(address(this), msg.sender);\\n    }\\n\\n    function getAdminAddress() public view returns (address) {\\n        return admin;\\n    }\\n\\n    /**\\n     * Add a new citizen instance\\n     *\\n     * @notice Allows a City to add a new citizen giving an initial amount of PollutionTokens. It can also be used for editing purpose of the Citizen's parameters.\\n     * @dev all the require means that you can enter the function in 2 cases: 1)if you are a city and you are going to modify an existing citizen (added previously by the city) 2)If you are a city and you want to add a non-existing citizen, so you are not going to modify\\n     * @param isModify if true, it means that the caller of this function want to change something in a Citizen. Otherwise it is an addition operation.\\n     * @dev if it is not a modify action, the getUserCount is called. In the other case, the citizen with an already id is provided (in id = getCitizen(citizenAddr).id; code line)\\n     */\\n    function addCitizen(\\n        string memory name,\\n        address citizenAddr,\\n        uint256 checkedTimestamp,\\n        string memory surname,\\n        string memory email,\\n        string memory dateOfBirth,\\n        uint256 telephone,\\n        string memory physicalAddress,\\n        string memory id,\\n        bool isModify\\n    ) public {\\n        bool isCityExisting = dsesCenter.checkExistingCity(msg.sender);\\n        address cityAddrExisting = pt.getPreviousSender(citizenAddr);\\n        require(\\n            (isCityExisting && isModify && cityAddrExisting == msg.sender) ||\\n                (isCityExisting && !isModify && cityAddrExisting == address(0)),\\n            \\\"You are not a city or citizen already exist\\\"\\n        );\\n        //uint256 id;\\n        //uint256 tokensAssigned = tokenToBeAssigned(); //this is omitted for semplicity and testing and it is used a constant value\\n        //uint256 tokensAssigned = 30 * multiplier;\\n        if (!isModify) {\\n            pt.transferForAddingEntities(\\n                msg.sender,\\n                citizenAddr,\\n                tokenToBeAssigned()\\n            );\\n            //id = pt.getUserCount();\\n        } else {\\n            id = getCitizen(citizenAddr).id;\\n        }\\n        citizens[citizenAddr] = classes.Citizen(\\n            name,\\n            checkedTimestamp,\\n            surname,\\n            email,\\n            dateOfBirth,\\n            telephone,\\n            physicalAddress,\\n            id\\n        );\\n        //\\n    }\\n\\n    function tokenToBeAssigned() public pure returns (uint256) {\\n        /*\\n        classes.City memory city = dsesCenter.getCityByAddr(msg.sender);\\n        return\\n            (pt.balanceOf(msg.sender) / //balanceOfCity/(cityPopulation+20*cityNumberOfIndustries). 20 is an arbitrary number, just to allocate more tokens to industries\\n                (city.population + 20 * city.numberOfIndustries)) * multiplier; //getCityByAddr used because A struct is an example of a dynamically sized type that can only be passed around internally\\n    */\\n        return 30 * multiplier;\\n    }\\n\\n    /**\\n     * Consume PollutionToken by Citizen\\n     *\\n     * @notice a Citizen equipped with a sensor will send a certain amount of data produced ('amountUsed') periodically. If its PollutionToken balance is not 0, he send back to the City that amountUsed of PT, otherwise he emit an Event notifying States that he finished his tokens. Before doing that,it is necessary to check that 1 month has not passed since the beginning of a new cycle (Start of the cycle->consumingPT->end of a month->give back to city the remaining PT->if any, give NFTs to Citizen).\\n     *\\n     * @param amountUsed the contract address of the PollutionToken contract, used by this contract.\\n     *\\n     */\\n    function consumePTFromCitizen(uint256 amountUsed) public {\\n        uint256 balanceOfCitizen = pt.balanceOf(msg.sender);\\n        address previousSender = pt.getPreviousSender(msg.sender);\\n        checkForExpiredToken(balanceOfCitizen, previousSender);\\n        if (balanceOfCitizen != 0) {\\n            pt.transferExtended(\\n                msg.sender,\\n                previousSender,\\n                amountUsed //can be also used a formula to calculate the amount of token to transfer\\n            );\\n        } else {\\n            uint256 currentTimestamp = block.timestamp;\\n            emit NoTokenCitizen(msg.sender, currentTimestamp);\\n        }\\n    }\\n\\n    /**\\n     * Check if a month has passed\\n     *\\n     * @notice first it check if a month has passed since the last execution of the content of the first \\\"if\\\" condition. If so, it will check if an NFT can be given to the Citizen checking its current balance, then it will refill the citizen's tokens\\n     *\\n     * @param balanceOfCitizen the citizen's balance\\n     * @param previousSender it is the city that added the citizen\\n     *\\n     */\\n    function checkForExpiredToken(\\n        uint256 balanceOfCitizen,\\n        address previousSender\\n    ) private {\\n        if (\\n            (block.timestamp - citizens[msg.sender].checkedTimestamp) >= //check if 30 days has passed.\\n            methods.dayTimestamp(30)\\n        ) {\\n            //uint256 balanceOfCitizen = pt.balanceOf(msg.sender);\\n            checkForNft(balanceOfCitizen);\\n            pt.transferExtended(\\n                previousSender,\\n                msg.sender,\\n                tokenToBeAssigned() - balanceOfCitizen //example: 30 fixed tokens - 17 of balanceOfCitizen=13 token to be refilled to the citizen\\n            ); //return back to the state the tokens remained\\n            citizens[msg.sender].checkedTimestamp = block.timestamp; //update citizen timestamp with the new timestamp of the actual date\\n        }\\n    }\\n\\n    function getCitizen(\\n        address citizenAddr\\n    ) public view returns (classes.Citizen memory) {\\n        if (!checkExistingCitizen(citizenAddr)) {\\n            revert CityCitizen__Citizen_Not_Found();\\n        }\\n        return citizens[citizenAddr];\\n    }\\n\\n    /**\\n     *\\n     * @notice This will return true if citizen was added by a city, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like city add citizen.\\n     *\\n     * @param citizenAddr address of that citizen to check\\n     */\\n    function checkExistingCitizenOfACity(\\n        address citizenAddr,\\n        address cityAddr\\n    ) public view returns (bool) {\\n        if (pt.getPreviousSender(citizenAddr) == cityAddr) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function checkForNft(uint256 balanceOfCitizen) public {\\n        //modify to private after testing\\n        {\\n            //uint256 balanceOfCitizen = pt.balanceOf(msg.sender);\\n            if (\\n                (balanceOfCitizen > 5 * multiplier) &&\\n                (balanceOfCitizen <= 10 * multiplier)\\n            ) //5 and 10 are random numbers, we want to check that 5<=balanceOfCitizen<=10 Pollution tokens\\n            {\\n                pnft.mintNftCitizen(msg.sender, 0); //level 1 nft\\n            } else if (\\n                (balanceOfCitizen > 10 * multiplier) &&\\n                (balanceOfCitizen <= 29 * multiplier)\\n            ) {\\n                pnft.mintNftCitizen(msg.sender, 1);\\n            }\\n        }\\n    }\\n\\n    function checkExistingCitizen(\\n        address citizenAddr\\n    ) public view returns (bool) {\\n        return bytes(citizens[citizenAddr].name).length > 0;\\n    }\\n\\n    function deleteCitizen(\\n        address citizenAddr\\n    ) public onlyBelongingCity(citizenAddr) {\\n        pt.transferExtended(citizenAddr, msg.sender, pt.balanceOf(citizenAddr));\\n        delete citizens[citizenAddr];\\n        pt.deletePreviousSender(citizenAddr);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            (msg.sender == admin),\\n            \\\"You are not the owner of this contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     *\\n     * @notice if City (the msg.sender) isn't the same that added that specific citizen with citizenAddr, revert the transaction\\n     *\\n     * @param citizenAddr address of that citizen that you want to check\\n     */\\n    modifier onlyBelongingCity(address citizenAddr) {\\n        if (pt.getPreviousSender(citizenAddr) != msg.sender) {\\n            revert CityCitizen__Citizen_Not_Found();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x180ec48235c8fc260741357d5dc6867a5760e75560c2713afec640dfcd84176a\",\"license\":\"MIT\"},\"contracts/Classes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary classes {\\n    struct State {\\n        string name;\\n        string iso;\\n        uint256 numberOfCities;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct City {\\n        string name;\\n        uint256 population;\\n        uint256 numberOfIndustries;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct Citizen {\\n        string name;\\n        uint256 checkedTimestamp;\\n        string surname;\\n        string email;\\n        string dateOfBirth;\\n        uint256 telephone;\\n        string physicalAddress;\\n        string id; //used for bip44 wallet\\n    } /*\\n    struct Industry {\\n        string name;\\n        uint256 registrationTimestamp;\\n    }*/\\n}\\n\",\"keccak256\":\"0x49aad76d8c59ef127d9a485de666600177dd7962fbc9ab3f0db7abbbe6f00710\",\"license\":\"MIT\"},\"contracts/Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n//import \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary methods {\\n    function dayTimestamp(\\n        uint256 numberOfDays\\n    ) internal pure returns (uint256) {\\n        return numberOfDays * 86400; //86400 is the number of seconds in one day\\n    }\\n}\\n\\nlibrary conversionMethods {\\n    /*\\n    function getPrice(address currencyAddress) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            //0x694AA1769357215DE4FAC081bf1f309aDC325306\\n            currencyAddress\\n        );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        int256 convertValue = int256(10 ** (18 - priceFeed.decimals()));\\n        return uint256(answer * convertValue); //it has 8 decimals precisions, so need to add 10 decimals\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        address currencyAddress\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(currencyAddress);\\n        uint256 ethAmountInCurrency = (ethPrice * ethAmount) / 1e18;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInCurrency;\\n    }*/\\n}\\n\",\"keccak256\":\"0x877ee3c6770b0b714874c4da6bd9bebcf0d8f4d99ade2b8167671981f7fe37cd\",\"license\":\"MIT\"},\"contracts/interfaces/IDSESCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"../Classes.sol\\\";\\n\\ninterface IDSESCenter {\\n    function getCityByAddr(\\n        address cityAddr\\n    ) external view returns (classes.City memory);\\n\\n    function checkExistingCity(address cityAddr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xae9557919ffee5b25fcb016ed925f56f28f3233c04a6d857560b4a6c2d006527\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionNft {\\n    function mintNftIndustry(address to, uint256 level) external;\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function mintNftCitizen(address to, uint256 level) external;\\n}\\n\",\"keccak256\":\"0xa40b3b917229cf13af49f57fa2559a960001869b5f554913000e49307edbdd11\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionToken {\\n    function transferExtended(address from, address to, uint256 value) external;\\n\\n    function getPreviousSender(address from) external view returns (address);\\n\\n    function deletePreviousSender(address receiver) external;\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transferForAddingEntities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getPTtoEthRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x471563c2e3fdd71c874b31cf9e02476c5bc0902729447ef8698430b870e57d02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b6126e180620001e26000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c0c53b8b11610066578063c0c53b8b14610147578063c2411dab14610163578063c335963d14610193578063c6e92e6a146101c3578063f907306e146101df5761009e565b806301487ecc146100a35780638d68d807146100bf578063b2e6b912146100db578063b6325b15146100f9578063b7e39a4314610129575b600080fd5b6100bd60048036038101906100b89190611a7d565b6101fb565b005b6100d960048036038101906100d49190611c04565b6105d9565b005b6100e3610949565b6040516100f09190611c40565b60405180910390f35b610113600480360381019061010e9190611c5b565b610973565b6040516101209190611caa565b60405180910390f35b610131610a57565b60405161013e9190611cd4565b60405180910390f35b610161600480360381019061015c9190611da9565b610a73565b005b61017d60048036038101906101789190611c04565b610dce565b60405161018a9190611f5d565b60405180910390f35b6101ad60048036038101906101a89190611c04565b6111e7565b6040516101ba9190611caa565b60405180910390f35b6101dd60048036038101906101d89190611f7f565b611241565b005b6101f960048036038101906101f49190611f7f565b6113e3565b005b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b81526004016102589190611c40565b602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611fc1565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac058c6040518263ffffffff1660e01b81526004016102f89190611c40565b602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190612003565b90508180156103455750825b801561037c57503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b806103c6575081801561038d575082155b80156103c55750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc906120b3565b60405180910390fd5b826104a757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea64b234338d610452610a57565b6040518463ffffffff1660e01b8152600401610470939291906120d3565b600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b505050506104b7565b6104b08b610dce565b60e0015193505b6040518061010001604052808d81526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815250600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816105459190612316565b506020820151816001015560408201518160020190816105659190612316565b50606082015181600301908161057b9190612316565b5060808201518160040190816105919190612316565b5060a0820151816005015560c08201518160060190816105b19190612316565b5060e08201518160070190816105c79190612316565b50905050505050505050505050505050565b803373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05836040518263ffffffff1660e01b815260040161064c9190611c40565b602060405180830381865afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190612003565b73ffffffffffffffffffffffffffffffffffffffff16146106da576040517f54a6a82f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28333600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016107759190611c40565b602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906123fd565b6040518463ffffffff1660e01b81526004016107d4939291906120d3565b600060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b50505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061085691906117b5565b600182016000905560028201600061086e91906117b5565b60038201600061087e91906117b5565b60048201600061088e91906117b5565b60058201600090556006820160006108a691906117b5565b6007820160006108b691906117b5565b5050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cd7e43836040518263ffffffff1660e01b81526004016109139190611c40565b600060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008173ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05856040518263ffffffff1660e01b81526004016109e79190611c40565b602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190612003565b73ffffffffffffffffffffffffffffffffffffffff1603610a4c5760019050610a51565b600090505b92915050565b6000670de0b6b3a7640000601e610a6e9190612459565b905090565b60008060019054906101000a900460ff16159050808015610aa45750600160008054906101000a900460ff1660ff16105b80610ad15750610ab330611625565b158015610ad05750600160008054906101000a900460ff1660ff16145b5b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b079061250d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b4d576001600060016101000a81548160ff0219169083151502179055505b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610cae92919061252d565b600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610d3d92919061252d565b600060405180830381600087803b158015610d5757600080fd5b505af1158015610d6b573d6000803e3d6000fd5b505050508015610dc85760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610dbf919061259e565b60405180910390a15b50505050565b610dd66117f5565b610ddf826111e7565b610e15576040517f54a6a82f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610e7090612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9c90612139565b8015610ee95780601f10610ebe57610100808354040283529160200191610ee9565b820191906000526020600020905b815481529060010190602001808311610ecc57829003601f168201915b5050505050815260200160018201548152602001600282018054610f0c90612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3890612139565b8015610f855780601f10610f5a57610100808354040283529160200191610f85565b820191906000526020600020905b815481529060010190602001808311610f6857829003601f168201915b50505050508152602001600382018054610f9e90612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca90612139565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b5050505050815260200160048201805461103090612139565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90612139565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b50505050508152602001600582015481526020016006820180546110cc90612139565b80601f01602080910402602001604051908101604052809291908181526020018280546110f890612139565b80156111455780601f1061111a57610100808354040283529160200191611145565b820191906000526020600020905b81548152906001019060200180831161112857829003601f168201915b5050505050815260200160078201805461115e90612139565b80601f016020809104026020016040519081016040528092919081815260200182805461118a90612139565b80156111d75780601f106111ac576101008083540402835291602001916111d7565b820191906000526020600020905b8154815290600101906020018083116111ba57829003601f168201915b5050505050815250509050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461123790612139565b9050119050919050565b670de0b6b3a764000060056112569190612459565b811180156112785750670de0b6b3a7640000600a6112749190612459565b8111155b1561131257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360006040518363ffffffff1660e01b81526004016112db9291906125f4565b600060405180830381600087803b1580156112f557600080fd5b505af1158015611309573d6000803e3d6000fd5b505050506113e0565b670de0b6b3a7640000600a6113279190612459565b811180156113495750670de0b6b3a7640000601d6113459190612459565b8111155b156113df57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360016040518363ffffffff1660e01b81526004016113ac92919061264e565b600060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050505b5b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114409190611c40565b602060405180830381865afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148191906123fd565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b81526004016114e09190611c40565b602060405180830381865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190612003565b905061152d8282611648565b600082146115cb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23383866040518463ffffffff1660e01b8152600401611594939291906120d3565b600060405180830381600087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b50505050611620565b60004290503373ffffffffffffffffffffffffffffffffffffffff167fc4ce9a02dc70fc3595f43e3c08ce1e5b880f4be6f33a04831ea249077ece6077826040516116169190611cd4565b60405180910390a2505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611652601e61179d565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426116a09190612677565b10611799576116ae82611241565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233856116f7610a57565b6117019190612677565b6040518463ffffffff1660e01b815260040161171f939291906120d3565b600060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b5050505042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5050565b600062015180826117ae9190612459565b9050919050565b5080546117c190612139565b6000825580601f106117d357506117f2565b601f0160209004906000526020600020908101906117f1919061183a565b5b50565b60405180610100016040528060608152602001600081526020016060815260200160608152602001606081526020016000815260200160608152602001606081525090565b5b8082111561185357600081600090555060010161183b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118be82611875565b810181811067ffffffffffffffff821117156118dd576118dc611886565b5b80604052505050565b60006118f0611857565b90506118fc82826118b5565b919050565b600067ffffffffffffffff82111561191c5761191b611886565b5b61192582611875565b9050602081019050919050565b82818337600083830152505050565b600061195461194f84611901565b6118e6565b9050828152602081018484840111156119705761196f611870565b5b61197b848285611932565b509392505050565b600082601f8301126119985761199761186b565b5b81356119a8848260208601611941565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119dc826119b1565b9050919050565b6119ec816119d1565b81146119f757600080fd5b50565b600081359050611a09816119e3565b92915050565b6000819050919050565b611a2281611a0f565b8114611a2d57600080fd5b50565b600081359050611a3f81611a19565b92915050565b60008115159050919050565b611a5a81611a45565b8114611a6557600080fd5b50565b600081359050611a7781611a51565b92915050565b6000806000806000806000806000806101408b8d031215611aa157611aa0611861565b5b60008b013567ffffffffffffffff811115611abf57611abe611866565b5b611acb8d828e01611983565b9a50506020611adc8d828e016119fa565b9950506040611aed8d828e01611a30565b98505060608b013567ffffffffffffffff811115611b0e57611b0d611866565b5b611b1a8d828e01611983565b97505060808b013567ffffffffffffffff811115611b3b57611b3a611866565b5b611b478d828e01611983565b96505060a08b013567ffffffffffffffff811115611b6857611b67611866565b5b611b748d828e01611983565b95505060c0611b858d828e01611a30565b94505060e08b013567ffffffffffffffff811115611ba657611ba5611866565b5b611bb28d828e01611983565b9350506101008b013567ffffffffffffffff811115611bd457611bd3611866565b5b611be08d828e01611983565b925050610120611bf28d828e01611a68565b9150509295989b9194979a5092959850565b600060208284031215611c1a57611c19611861565b5b6000611c28848285016119fa565b91505092915050565b611c3a816119d1565b82525050565b6000602082019050611c556000830184611c31565b92915050565b60008060408385031215611c7257611c71611861565b5b6000611c80858286016119fa565b9250506020611c91858286016119fa565b9150509250929050565b611ca481611a45565b82525050565b6000602082019050611cbf6000830184611c9b565b92915050565b611cce81611a0f565b82525050565b6000602082019050611ce96000830184611cc5565b92915050565b6000611cfa826119d1565b9050919050565b611d0a81611cef565b8114611d1557600080fd5b50565b600081359050611d2781611d01565b92915050565b6000611d38826119d1565b9050919050565b611d4881611d2d565b8114611d5357600080fd5b50565b600081359050611d6581611d3f565b92915050565b6000611d76826119d1565b9050919050565b611d8681611d6b565b8114611d9157600080fd5b50565b600081359050611da381611d7d565b92915050565b600080600060608486031215611dc257611dc1611861565b5b6000611dd086828701611d18565b9350506020611de186828701611d56565b9250506040611df286828701611d94565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e36578082015181840152602081019050611e1b565b60008484015250505050565b6000611e4d82611dfc565b611e578185611e07565b9350611e67818560208601611e18565b611e7081611875565b840191505092915050565b611e8481611a0f565b82525050565b6000610100830160008301518482036000860152611ea88282611e42565b9150506020830151611ebd6020860182611e7b565b5060408301518482036040860152611ed58282611e42565b91505060608301518482036060860152611eef8282611e42565b91505060808301518482036080860152611f098282611e42565b91505060a0830151611f1e60a0860182611e7b565b5060c083015184820360c0860152611f368282611e42565b91505060e083015184820360e0860152611f508282611e42565b9150508091505092915050565b60006020820190508181036000830152611f778184611e8a565b905092915050565b600060208284031215611f9557611f94611861565b5b6000611fa384828501611a30565b91505092915050565b600081519050611fbb81611a51565b92915050565b600060208284031215611fd757611fd6611861565b5b6000611fe584828501611fac565b91505092915050565b600081519050611ffd816119e3565b92915050565b60006020828403121561201957612018611861565b5b600061202784828501611fee565b91505092915050565b600082825260208201905092915050565b7f596f7520617265206e6f7420612063697479206f7220636974697a656e20616c60008201527f7265616479206578697374000000000000000000000000000000000000000000602082015250565b600061209d602b83612030565b91506120a882612041565b604082019050919050565b600060208201905081810360008301526120cc81612090565b9050919050565b60006060820190506120e86000830186611c31565b6120f56020830185611c31565b6121026040830184611cc5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061215157607f821691505b6020821081036121645761216361210a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026121cc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261218f565b6121d6868361218f565b95508019841693508086168417925050509392505050565b6000819050919050565b600061221361220e61220984611a0f565b6121ee565b611a0f565b9050919050565b6000819050919050565b61222d836121f8565b6122416122398261221a565b84845461219c565b825550505050565b600090565b612256612249565b612261818484612224565b505050565b5b818110156122855761227a60008261224e565b600181019050612267565b5050565b601f8211156122ca5761229b8161216a565b6122a48461217f565b810160208510156122b3578190505b6122c76122bf8561217f565b830182612266565b50505b505050565b600082821c905092915050565b60006122ed600019846008026122cf565b1980831691505092915050565b600061230683836122dc565b9150826002028217905092915050565b61231f82611dfc565b67ffffffffffffffff81111561233857612337611886565b5b6123428254612139565b61234d828285612289565b600060209050601f831160018114612380576000841561236e578287015190505b61237885826122fa565b8655506123e0565b601f19841661238e8661216a565b60005b828110156123b657848901518255600182019150602085019450602081019050612391565b868310156123d357848901516123cf601f8916826122dc565b8355505b6001600288020188555050505b505050505050565b6000815190506123f781611a19565b92915050565b60006020828403121561241357612412611861565b5b6000612421848285016123e8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061246482611a0f565b915061246f83611a0f565b925082820261247d81611a0f565b915082820484148315176124945761249361242a565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006124f7602e83612030565b91506125028261249b565b604082019050919050565b60006020820190508181036000830152612526816124ea565b9050919050565b60006040820190506125426000830185611c31565b61254f6020830184611c31565b9392505050565b6000819050919050565b600060ff82169050919050565b600061258861258361257e84612556565b6121ee565b612560565b9050919050565b6125988161256d565b82525050565b60006020820190506125b3600083018461258f565b92915050565b6000819050919050565b60006125de6125d96125d4846125b9565b6121ee565b611a0f565b9050919050565b6125ee816125c3565b82525050565b60006040820190506126096000830185611c31565b61261660208301846125e5565b9392505050565b600061263861263361262e84612556565b6121ee565b611a0f565b9050919050565b6126488161261d565b82525050565b60006040820190506126636000830185611c31565b612670602083018461263f565b9392505050565b600061268282611a0f565b915061268d83611a0f565b92508282039050818111156126a5576126a461242a565b5b9291505056fea2646970667358221220c00c4ac428715065822a9b343e74ff29ff354dd43c3d023df1be40d8b6e9fec764736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c0c53b8b11610066578063c0c53b8b14610147578063c2411dab14610163578063c335963d14610193578063c6e92e6a146101c3578063f907306e146101df5761009e565b806301487ecc146100a35780638d68d807146100bf578063b2e6b912146100db578063b6325b15146100f9578063b7e39a4314610129575b600080fd5b6100bd60048036038101906100b89190611a7d565b6101fb565b005b6100d960048036038101906100d49190611c04565b6105d9565b005b6100e3610949565b6040516100f09190611c40565b60405180910390f35b610113600480360381019061010e9190611c5b565b610973565b6040516101209190611caa565b60405180910390f35b610131610a57565b60405161013e9190611cd4565b60405180910390f35b610161600480360381019061015c9190611da9565b610a73565b005b61017d60048036038101906101789190611c04565b610dce565b60405161018a9190611f5d565b60405180910390f35b6101ad60048036038101906101a89190611c04565b6111e7565b6040516101ba9190611caa565b60405180910390f35b6101dd60048036038101906101d89190611f7f565b611241565b005b6101f960048036038101906101f49190611f7f565b6113e3565b005b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a376e4d8336040518263ffffffff1660e01b81526004016102589190611c40565b602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611fc1565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac058c6040518263ffffffff1660e01b81526004016102f89190611c40565b602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190612003565b90508180156103455750825b801561037c57503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b806103c6575081801561038d575082155b80156103c55750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc906120b3565b60405180910390fd5b826104a757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea64b234338d610452610a57565b6040518463ffffffff1660e01b8152600401610470939291906120d3565b600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b505050506104b7565b6104b08b610dce565b60e0015193505b6040518061010001604052808d81526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815250600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816105459190612316565b506020820151816001015560408201518160020190816105659190612316565b50606082015181600301908161057b9190612316565b5060808201518160040190816105919190612316565b5060a0820151816005015560c08201518160060190816105b19190612316565b5060e08201518160070190816105c79190612316565b50905050505050505050505050505050565b803373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05836040518263ffffffff1660e01b815260040161064c9190611c40565b602060405180830381865afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190612003565b73ffffffffffffffffffffffffffffffffffffffff16146106da576040517f54a6a82f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28333600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016107759190611c40565b602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906123fd565b6040518463ffffffff1660e01b81526004016107d4939291906120d3565b600060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b50505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061085691906117b5565b600182016000905560028201600061086e91906117b5565b60038201600061087e91906117b5565b60048201600061088e91906117b5565b60058201600090556006820160006108a691906117b5565b6007820160006108b691906117b5565b5050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cd7e43836040518263ffffffff1660e01b81526004016109139190611c40565b600060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008173ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05856040518263ffffffff1660e01b81526004016109e79190611c40565b602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190612003565b73ffffffffffffffffffffffffffffffffffffffff1603610a4c5760019050610a51565b600090505b92915050565b6000670de0b6b3a7640000601e610a6e9190612459565b905090565b60008060019054906101000a900460ff16159050808015610aa45750600160008054906101000a900460ff1660ff16105b80610ad15750610ab330611625565b158015610ad05750600160008054906101000a900460ff1660ff16145b5b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b079061250d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b4d576001600060016101000a81548160ff0219169083151502179055505b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610cae92919061252d565b600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401610d3d92919061252d565b600060405180830381600087803b158015610d5757600080fd5b505af1158015610d6b573d6000803e3d6000fd5b505050508015610dc85760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610dbf919061259e565b60405180910390a15b50505050565b610dd66117f5565b610ddf826111e7565b610e15576040517f54a6a82f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610e7090612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9c90612139565b8015610ee95780601f10610ebe57610100808354040283529160200191610ee9565b820191906000526020600020905b815481529060010190602001808311610ecc57829003601f168201915b5050505050815260200160018201548152602001600282018054610f0c90612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3890612139565b8015610f855780601f10610f5a57610100808354040283529160200191610f85565b820191906000526020600020905b815481529060010190602001808311610f6857829003601f168201915b50505050508152602001600382018054610f9e90612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca90612139565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b5050505050815260200160048201805461103090612139565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90612139565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b50505050508152602001600582015481526020016006820180546110cc90612139565b80601f01602080910402602001604051908101604052809291908181526020018280546110f890612139565b80156111455780601f1061111a57610100808354040283529160200191611145565b820191906000526020600020905b81548152906001019060200180831161112857829003601f168201915b5050505050815260200160078201805461115e90612139565b80601f016020809104026020016040519081016040528092919081815260200182805461118a90612139565b80156111d75780601f106111ac576101008083540402835291602001916111d7565b820191906000526020600020905b8154815290600101906020018083116111ba57829003601f168201915b5050505050815250509050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461123790612139565b9050119050919050565b670de0b6b3a764000060056112569190612459565b811180156112785750670de0b6b3a7640000600a6112749190612459565b8111155b1561131257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360006040518363ffffffff1660e01b81526004016112db9291906125f4565b600060405180830381600087803b1580156112f557600080fd5b505af1158015611309573d6000803e3d6000fd5b505050506113e0565b670de0b6b3a7640000600a6113279190612459565b811180156113495750670de0b6b3a7640000601d6113459190612459565b8111155b156113df57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373da80103360016040518363ffffffff1660e01b81526004016113ac92919061264e565b600060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050505b5b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114409190611c40565b602060405180830381865afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148191906123fd565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05336040518263ffffffff1660e01b81526004016114e09190611c40565b602060405180830381865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190612003565b905061152d8282611648565b600082146115cb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f23383866040518463ffffffff1660e01b8152600401611594939291906120d3565b600060405180830381600087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b50505050611620565b60004290503373ffffffffffffffffffffffffffffffffffffffff167fc4ce9a02dc70fc3595f43e3c08ce1e5b880f4be6f33a04831ea249077ece6077826040516116169190611cd4565b60405180910390a2505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611652601e61179d565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426116a09190612677565b10611799576116ae82611241565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233856116f7610a57565b6117019190612677565b6040518463ffffffff1660e01b815260040161171f939291906120d3565b600060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b5050505042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b5050565b600062015180826117ae9190612459565b9050919050565b5080546117c190612139565b6000825580601f106117d357506117f2565b601f0160209004906000526020600020908101906117f1919061183a565b5b50565b60405180610100016040528060608152602001600081526020016060815260200160608152602001606081526020016000815260200160608152602001606081525090565b5b8082111561185357600081600090555060010161183b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118be82611875565b810181811067ffffffffffffffff821117156118dd576118dc611886565b5b80604052505050565b60006118f0611857565b90506118fc82826118b5565b919050565b600067ffffffffffffffff82111561191c5761191b611886565b5b61192582611875565b9050602081019050919050565b82818337600083830152505050565b600061195461194f84611901565b6118e6565b9050828152602081018484840111156119705761196f611870565b5b61197b848285611932565b509392505050565b600082601f8301126119985761199761186b565b5b81356119a8848260208601611941565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119dc826119b1565b9050919050565b6119ec816119d1565b81146119f757600080fd5b50565b600081359050611a09816119e3565b92915050565b6000819050919050565b611a2281611a0f565b8114611a2d57600080fd5b50565b600081359050611a3f81611a19565b92915050565b60008115159050919050565b611a5a81611a45565b8114611a6557600080fd5b50565b600081359050611a7781611a51565b92915050565b6000806000806000806000806000806101408b8d031215611aa157611aa0611861565b5b60008b013567ffffffffffffffff811115611abf57611abe611866565b5b611acb8d828e01611983565b9a50506020611adc8d828e016119fa565b9950506040611aed8d828e01611a30565b98505060608b013567ffffffffffffffff811115611b0e57611b0d611866565b5b611b1a8d828e01611983565b97505060808b013567ffffffffffffffff811115611b3b57611b3a611866565b5b611b478d828e01611983565b96505060a08b013567ffffffffffffffff811115611b6857611b67611866565b5b611b748d828e01611983565b95505060c0611b858d828e01611a30565b94505060e08b013567ffffffffffffffff811115611ba657611ba5611866565b5b611bb28d828e01611983565b9350506101008b013567ffffffffffffffff811115611bd457611bd3611866565b5b611be08d828e01611983565b925050610120611bf28d828e01611a68565b9150509295989b9194979a5092959850565b600060208284031215611c1a57611c19611861565b5b6000611c28848285016119fa565b91505092915050565b611c3a816119d1565b82525050565b6000602082019050611c556000830184611c31565b92915050565b60008060408385031215611c7257611c71611861565b5b6000611c80858286016119fa565b9250506020611c91858286016119fa565b9150509250929050565b611ca481611a45565b82525050565b6000602082019050611cbf6000830184611c9b565b92915050565b611cce81611a0f565b82525050565b6000602082019050611ce96000830184611cc5565b92915050565b6000611cfa826119d1565b9050919050565b611d0a81611cef565b8114611d1557600080fd5b50565b600081359050611d2781611d01565b92915050565b6000611d38826119d1565b9050919050565b611d4881611d2d565b8114611d5357600080fd5b50565b600081359050611d6581611d3f565b92915050565b6000611d76826119d1565b9050919050565b611d8681611d6b565b8114611d9157600080fd5b50565b600081359050611da381611d7d565b92915050565b600080600060608486031215611dc257611dc1611861565b5b6000611dd086828701611d18565b9350506020611de186828701611d56565b9250506040611df286828701611d94565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e36578082015181840152602081019050611e1b565b60008484015250505050565b6000611e4d82611dfc565b611e578185611e07565b9350611e67818560208601611e18565b611e7081611875565b840191505092915050565b611e8481611a0f565b82525050565b6000610100830160008301518482036000860152611ea88282611e42565b9150506020830151611ebd6020860182611e7b565b5060408301518482036040860152611ed58282611e42565b91505060608301518482036060860152611eef8282611e42565b91505060808301518482036080860152611f098282611e42565b91505060a0830151611f1e60a0860182611e7b565b5060c083015184820360c0860152611f368282611e42565b91505060e083015184820360e0860152611f508282611e42565b9150508091505092915050565b60006020820190508181036000830152611f778184611e8a565b905092915050565b600060208284031215611f9557611f94611861565b5b6000611fa384828501611a30565b91505092915050565b600081519050611fbb81611a51565b92915050565b600060208284031215611fd757611fd6611861565b5b6000611fe584828501611fac565b91505092915050565b600081519050611ffd816119e3565b92915050565b60006020828403121561201957612018611861565b5b600061202784828501611fee565b91505092915050565b600082825260208201905092915050565b7f596f7520617265206e6f7420612063697479206f7220636974697a656e20616c60008201527f7265616479206578697374000000000000000000000000000000000000000000602082015250565b600061209d602b83612030565b91506120a882612041565b604082019050919050565b600060208201905081810360008301526120cc81612090565b9050919050565b60006060820190506120e86000830186611c31565b6120f56020830185611c31565b6121026040830184611cc5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061215157607f821691505b6020821081036121645761216361210a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026121cc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261218f565b6121d6868361218f565b95508019841693508086168417925050509392505050565b6000819050919050565b600061221361220e61220984611a0f565b6121ee565b611a0f565b9050919050565b6000819050919050565b61222d836121f8565b6122416122398261221a565b84845461219c565b825550505050565b600090565b612256612249565b612261818484612224565b505050565b5b818110156122855761227a60008261224e565b600181019050612267565b5050565b601f8211156122ca5761229b8161216a565b6122a48461217f565b810160208510156122b3578190505b6122c76122bf8561217f565b830182612266565b50505b505050565b600082821c905092915050565b60006122ed600019846008026122cf565b1980831691505092915050565b600061230683836122dc565b9150826002028217905092915050565b61231f82611dfc565b67ffffffffffffffff81111561233857612337611886565b5b6123428254612139565b61234d828285612289565b600060209050601f831160018114612380576000841561236e578287015190505b61237885826122fa565b8655506123e0565b601f19841661238e8661216a565b60005b828110156123b657848901518255600182019150602085019450602081019050612391565b868310156123d357848901516123cf601f8916826122dc565b8355505b6001600288020188555050505b505050505050565b6000815190506123f781611a19565b92915050565b60006020828403121561241357612412611861565b5b6000612421848285016123e8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061246482611a0f565b915061246f83611a0f565b925082820261247d81611a0f565b915082820484148315176124945761249361242a565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006124f7602e83612030565b91506125028261249b565b604082019050919050565b60006020820190508181036000830152612526816124ea565b9050919050565b60006040820190506125426000830185611c31565b61254f6020830184611c31565b9392505050565b6000819050919050565b600060ff82169050919050565b600061258861258361257e84612556565b6121ee565b612560565b9050919050565b6125988161256d565b82525050565b60006020820190506125b3600083018461258f565b92915050565b6000819050919050565b60006125de6125d96125d4846125b9565b6121ee565b611a0f565b9050919050565b6125ee816125c3565b82525050565b60006040820190506126096000830185611c31565b61261660208301846125e5565b9392505050565b600061263861263361262e84612556565b6121ee565b611a0f565b9050919050565b6126488161261d565b82525050565b60006040820190506126636000830185611c31565b612670602083018461263f565b9392505050565b600061268282611a0f565b915061268d83611a0f565b92508282039050818111156126a5576126a461242a565b5b9291505056fea2646970667358221220c00c4ac428715065822a9b343e74ff29ff354dd43c3d023df1be40d8b6e9fec764736f6c63430008150033",
  "devdoc": {
    "author": "Giuseppe La Vecchia",
    "custom:experimental": "This is an experimental contract.",
    "details": "for testing the checkingForExpiredToken function, it is needed to the \"if\" statement, because it will trigger the content only once every 30 days",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addCitizen(string,address,uint256,string,string,string,uint256,string,string,bool)": {
        "details": "all the require means that you can enter the function in 2 cases: 1)if you are a city and you are going to modify an existing citizen (added previously by the city) 2)If you are a city and you want to add a non-existing citizen, so you are not going to modifyif it is not a modify action, the getUserCount is called. In the other case, the citizen with an already id is provided (in id = getCitizen(citizenAddr).id; code line)",
        "params": {
          "isModify": "if true, it means that the caller of this function want to change something in a Citizen. Otherwise it is an addition operation."
        }
      },
      "checkExistingCitizenOfACity(address,address)": {
        "params": {
          "citizenAddr": "address of that citizen to check"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "consumePTFromCitizen(uint256)": {
        "params": {
          "amountUsed": "the contract address of the PollutionToken contract, used by this contract."
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "dsesCenterAddress": "the contract address of the DSESCenter contract, used by this contract.",
          "pnftAddress": "the contract address of the PollutionNft contract, used by this contract.",
          "ptContractAddress": "the contract address of the PollutionToken contract, used by this contract."
        }
      }
    },
    "title": "A contract to be used by Cities and Citizens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCitizen(string,address,uint256,string,string,string,uint256,string,string,bool)": {
        "notice": "Add a new citizen instanceAllows a City to add a new citizen giving an initial amount of PollutionTokens. It can also be used for editing purpose of the Citizen's parameters."
      },
      "checkExistingCitizenOfACity(address,address)": {
        "notice": "This will return true if citizen was added by a city, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like city add citizen."
      },
      "consumePTFromCitizen(uint256)": {
        "notice": "Consume PollutionToken by Citizena Citizen equipped with a sensor will send a certain amount of data produced ('amountUsed') periodically. If its PollutionToken balance is not 0, he send back to the City that amountUsed of PT, otherwise he emit an Event notifying States that he finished his tokens. Before doing that,it is necessary to check that 1 month has not passed since the beginning of a new cycle (Start of the cycle->consumingPT->end of a month->give back to city the remaining PT->if any, give NFTs to Citizen)."
      },
      "initialize(address,address,address)": {
        "notice": "Initialize function for the proxy upgradable pattern by OpenZeppelinInitialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract and pollution nft contract, allowing this contract to call its functions"
      }
    },
    "notice": "Used for CRUD operations and for consuming PT by the Citizen",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 515,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "citizens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Citizen)1065_storage)"
      },
      {
        "astId": 523,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "pt",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPollutionToken)1680"
      },
      {
        "astId": 525,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 528,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "dsesCenter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDSESCenter)1599"
      },
      {
        "astId": 531,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "pnft",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPollutionNft)1623"
      },
      {
        "astId": 541,
        "contract": "contracts/CityCitizen.sol:CityCitizen",
        "label": "locked",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDSESCenter)1599": {
        "encoding": "inplace",
        "label": "contract IDSESCenter",
        "numberOfBytes": "20"
      },
      "t_contract(IPollutionNft)1623": {
        "encoding": "inplace",
        "label": "contract IPollutionNft",
        "numberOfBytes": "20"
      },
      "t_contract(IPollutionToken)1680": {
        "encoding": "inplace",
        "label": "contract IPollutionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Citizen)1065_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.Citizen)",
        "numberOfBytes": "32",
        "value": "t_struct(Citizen)1065_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Citizen)1065_storage": {
        "encoding": "inplace",
        "label": "struct classes.Citizen",
        "members": [
          {
            "astId": 1050,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1052,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "checkedTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1054,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "surname",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1056,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1058,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "dateOfBirth",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1060,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "telephone",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1062,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "physicalAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1064,
            "contract": "contracts/CityCitizen.sol:CityCitizen",
            "label": "id",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}