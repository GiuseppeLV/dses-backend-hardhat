{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DSESCenter__City_Not_Found",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSESCenter__Only_Admin_Allowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DSESCenter__State_Not_Found",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "population",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfIndustries",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "attorneyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneySurname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneyEmail",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "telephone",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalAddress",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModify",
          "type": "bool"
        }
      ],
      "name": "addCity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "iso",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfCities",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "attorneyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneySurname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "attorneyEmail",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "telephone",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalAddress",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModify",
          "type": "bool"
        }
      ],
      "name": "addState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkExistingAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingCity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        }
      ],
      "name": "checkExistingCityOfAState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkExistingState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "deleteCity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        }
      ],
      "name": "deleteState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "getCity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "population",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfIndustries",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "attorneyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneySurname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneyEmail",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            }
          ],
          "internalType": "struct classes.City",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cityAddr",
          "type": "address"
        }
      ],
      "name": "getCityByAddr",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "population",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfIndustries",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "attorneyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneySurname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneyEmail",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            }
          ],
          "internalType": "struct classes.City",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateAddr",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iso",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "numberOfCities",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "attorneyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneySurname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "attorneyEmail",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "telephone",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "physicalAddress",
              "type": "string"
            }
          ],
          "internalType": "struct classes.State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPollutionToken",
          "name": "ptContractAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "ad285fe72c307a87df03b844c5953281",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DSESCenter__City_Not_Found\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSESCenter__Only_Admin_Allowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DSESCenter__State_Not_Found\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIndustries\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModify\",\"type\":\"bool\"}],\"name\":\"addCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iso\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCities\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModify\",\"type\":\"bool\"}],\"name\":\"addState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkExistingAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"checkExistingCity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"}],\"name\":\"checkExistingCityOfAState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkExistingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"deleteCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"}],\"name\":\"deleteState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"getCity\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIndustries\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct classes.City\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cityAddr\",\"type\":\"address\"}],\"name\":\"getCityByAddr\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIndustries\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct classes.City\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateAddr\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iso\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCities\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attorneyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneySurname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attorneyEmail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"telephone\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct classes.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPollutionToken\",\"name\":\"ptContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Giuseppe La Vecchia\",\"custom:experimental\":\"This is an experimental contract.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addCity(string,uint256,uint256,address,string,string,string,uint256,string,bool)\":{\"details\":\"all the require means that you can enter the function in 2 cases: 1)if you are a state and you are going to modify an existing city (added previously by an state) 2)If you are a state and you want to add a non-existing city, so you are not going to modify\",\"params\":{\"isModify\":\"if true, it means that the caller of this function want to change something in a City. Otherwise it is an addition operation and a transfer of PT will be done\"}},\"addState(string,string,address,uint256,string,string,string,uint256,string,bool)\":{\"details\":\"all the require means that you can enter the function in 2 cases: 1)if you are an admin and you are going to modify an existing state (added previously by an Admin) 2)If you are an admin and you want to add a non-existing state, so you are not going to modify\",\"params\":{\"isModify\":\"if true, it means that the caller of this function want to change something in a State. Otherwise it is an addition operation.\"}},\"checkExistingCityOfAState(address,address)\":{\"params\":{\"cityAddr\":\"address of that city to check\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deleteState(address)\":{\"details\":\"deletes mapping location here and in the previousSender mapping. PreviousSenderMapping is a relation between a sender of PT(the one who add an entity, like the admin) and a receiver of PT (the one who was added by an entity, like a state)\",\"params\":{\"stateAddr\":\"stateAddress to delete\"}},\"initialize(address)\":{\"params\":{\"ptContractAddress\":\"the contract address of the PollutionToken contract, used by this contract.\"}}},\"title\":\"A contract to be used by Admin(deployer) and States\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCity(string,uint256,uint256,address,string,string,string,uint256,string,bool)\":{\"notice\":\"Add a new city instanceAllows a State to add a new city giving an initial amount of PollutionTokens.It can also be used for editing purpose of the City's parameters.\"},\"addState(string,string,address,uint256,string,string,string,uint256,string,bool)\":{\"notice\":\"Add a new state instanceAllows an Admin to add a new state giving an initial amount of PollutionTokens.It can also be used for editing purpose of the State's parameters.\"},\"checkExistingCityOfAState(address,address)\":{\"notice\":\"This will return true if city was added by a state, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like state add city.\"},\"deleteState(address)\":{\"notice\":\"Allows an admin to delete a state\"},\"initialize(address)\":{\"notice\":\"Initialize function for the proxy upgradable pattern by OpenZeppelinInitialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract, allowing this contract to call its functions\"}},\"notice\":\"Used for CRUD operations by States and Admin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DSESCenter.sol\":\"DSESCenter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Classes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nlibrary classes {\\n    struct State {\\n        string name;\\n        string iso;\\n        uint256 numberOfCities;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct City {\\n        string name;\\n        uint256 population;\\n        uint256 numberOfIndustries;\\n        string attorneyName;\\n        string attorneySurname;\\n        string attorneyEmail;\\n        uint256 telephone;\\n        string physicalAddress;\\n    }\\n\\n    struct Citizen {\\n        string name;\\n        uint256 checkedTimestamp;\\n        string surname;\\n        string email;\\n        string dateOfBirth;\\n        uint256 telephone;\\n        string physicalAddress;\\n        string id; //used for bip44 wallet\\n    } /*\\n    struct Industry {\\n        string name;\\n        uint256 registrationTimestamp;\\n    }*/\\n}\\n\",\"keccak256\":\"0x49aad76d8c59ef127d9a485de666600177dd7962fbc9ab3f0db7abbbe6f00710\",\"license\":\"MIT\"},\"contracts/DSESCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"./interfaces/IPollutionToken.sol\\\";\\nimport \\\"./Classes.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title A contract to be used by Admin(deployer) and States\\n/// @author Giuseppe La Vecchia\\n/// @notice Used for CRUD operations by States and Admin\\n/// @custom:experimental This is an experimental contract.\\n\\ncontract DSESCenter is Initializable {\\n    address private admin;\\n    IPollutionToken private pt;\\n    //ChainlinkTools private ct;\\n    uint256 private constant multiplier = 10 ** 18;\\n\\n    mapping(address => classes.State) private states; //for login purposes\\n    mapping(address => classes.City) private cities;\\n\\n    error DSESCenter__Only_Admin_Allowed();\\n    error DSESCenter__State_Not_Found();\\n    error DSESCenter__City_Not_Found();\\n\\n    /*\\n    constructor(PollutionToken ptContractAddress) {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pt.storeContractAddress(address(this), msg.sender);\\n        ct = new ChainlinkTools();\\n    }\\n*/\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers(); //An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. This function in the constructor automatically lock it when it is deployed.\\n        //to get further information you can visit https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable\\n    }\\n\\n    /**\\n     * Initialize function for the proxy upgradable pattern by OpenZeppelin\\n     *\\n     * @notice Initialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract, allowing this contract to call its functions\\n     *\\n     * @param ptContractAddress the contract address of the PollutionToken contract, used by this contract.\\n     *\\n     *\\n     */\\n    function initialize(IPollutionToken ptContractAddress) public initializer {\\n        admin = msg.sender;\\n        pt = ptContractAddress;\\n        pt.storeContractAddress(address(this), msg.sender);\\n    }\\n\\n    function getCityByAddr(\\n        address cityAddr\\n    ) public view returns (classes.City memory) {\\n        return cities[cityAddr];\\n    }\\n\\n    function getContractAddress() public view returns (address) {\\n        return address(pt);\\n    }\\n\\n    /**\\n     * Add a new state instance\\n     *\\n     * @notice Allows an Admin to add a new state giving an initial amount of PollutionTokens.It can also be used for editing purpose of the State's parameters.\\n     * @dev all the require means that you can enter the function in 2 cases: 1)if you are an admin and you are going to modify an existing state (added previously by an Admin) 2)If you are an admin and you want to add a non-existing state, so you are not going to modify\\n     * @param isModify if true, it means that the caller of this function want to change something in a State. Otherwise it is an addition operation.\\n     */\\n\\n    function addState(\\n        string memory name,\\n        string memory iso,\\n        address stateAddr,\\n        uint256 numberOfCities,\\n        string memory attorneyName,\\n        string memory attorneySurname,\\n        string memory attorneyEmail,\\n        uint256 telephone,\\n        string memory physicalAddress,\\n        bool isModify\\n    ) external {\\n        bool isAdmin = (msg.sender == admin);\\n        address adminAddrExisting = pt.getPreviousSender(stateAddr);\\n        require(\\n            (isAdmin && isModify && adminAddrExisting == admin) ||\\n                (isAdmin && !isModify && adminAddrExisting == address(0)),\\n            \\\"Error while adding a new state. Maybe you are not the owner or the state already exist\\\"\\n        );\\n        states[stateAddr] = classes.State(\\n            name,\\n            iso,\\n            numberOfCities,\\n            attorneyName,\\n            attorneySurname,\\n            attorneyEmail,\\n            telephone,\\n            physicalAddress\\n        );\\n        if (!isModify) {\\n            pt.transferForAddingEntities(\\n                msg.sender,\\n                stateAddr,\\n                300000 * multiplier\\n            ); //modificable}\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @notice Allows an admin to delete a state\\n     * @dev deletes mapping location here and in the previousSender mapping. PreviousSenderMapping is a relation between a sender of PT(the one who add an entity, like the admin) and a receiver of PT (the one who was added by an entity, like a state)\\n     * @param stateAddr stateAddress to delete\\n     */\\n\\n    function deleteState(address stateAddr) external onlyAdmin {\\n        if (checkExistingState(stateAddr)) {\\n            pt.transferExtended(stateAddr, msg.sender, pt.balanceOf(stateAddr));\\n            delete states[stateAddr];\\n            pt.deletePreviousSender(stateAddr);\\n        } else {\\n            revert DSESCenter__State_Not_Found();\\n        }\\n    }\\n\\n    function getState(\\n        address stateAddr\\n    ) public view returns (classes.State memory) {\\n        return states[stateAddr];\\n    }\\n\\n    function checkExistingState(address addr) public view returns (bool) {\\n        return bytes(states[addr].name).length > 0; //mapping are initialized as 0.\\n    }\\n\\n    function checkExistingAdmin(address addr) public view returns (bool) {\\n        return admin == addr;\\n    }\\n\\n    /**\\n     * Add a new city instance\\n     *\\n     * @notice Allows a State to add a new city giving an initial amount of PollutionTokens.It can also be used for editing purpose of the City's parameters.\\n     * @dev all the require means that you can enter the function in 2 cases: 1)if you are a state and you are going to modify an existing city (added previously by an state) 2)If you are a state and you want to add a non-existing city, so you are not going to modify\\n     * @param isModify if true, it means that the caller of this function want to change something in a City. Otherwise it is an addition operation and a transfer of PT will be done\\n     */\\n    function addCity(\\n        string memory name,\\n        uint256 population,\\n        uint256 numberOfIndustries,\\n        address cityAddr,\\n        string memory attorneyName,\\n        string memory attorneySurname,\\n        string memory attorneyEmail,\\n        uint256 telephone,\\n        string memory physicalAddress,\\n        bool isModify\\n    ) external {\\n        bool isStateExisting = checkExistingState(msg.sender);\\n        address stateAddrExisting = pt.getPreviousSender(cityAddr);\\n        require(\\n            (isStateExisting && isModify && stateAddrExisting == msg.sender) ||\\n                (isStateExisting &&\\n                    !isModify &&\\n                    stateAddrExisting == address(0)),\\n            \\\"Error while adding a new city. Maybe you are not a state or the city already exist\\\"\\n        );\\n        cities[cityAddr] = classes.City(\\n            name,\\n            population,\\n            numberOfIndustries,\\n            attorneyName,\\n            attorneySurname,\\n            attorneyEmail,\\n            telephone,\\n            physicalAddress\\n        );\\n        if (!isModify) {\\n            uint256 tokenAssigned = 10000 * multiplier;\\n            pt.transferForAddingEntities(msg.sender, cityAddr, tokenAssigned);\\n        }\\n    }\\n\\n    /*\\n        uint256 tokenAssigned = (\\n            (pt.balanceOf(msg.sender) / states[msg.sender].numberOfCities)\\n        ) * multiplier; //#(tokenState/numberOfCitiesState)/cityPopulation\\n        */\\n\\n    function checkExistingCity(address cityAddr) public view returns (bool) {\\n        return bytes(cities[cityAddr].name).length > 0; //mapping are initialized as 0 for uint256 as default.\\n    }\\n\\n    function deleteCity(\\n        address cityAddr\\n    ) external onlyBelongingState(cityAddr) {\\n        pt.transferExtended(cityAddr, msg.sender, pt.balanceOf(cityAddr));\\n        delete cities[cityAddr];\\n        pt.deletePreviousSender(cityAddr);\\n    }\\n\\n    function getCity(\\n        address cityAddr\\n    ) public view returns (classes.City memory) {\\n        return cities[cityAddr];\\n    }\\n\\n    /**\\n     *\\n     * @notice This will return true if city was added by a state, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like state add city.\\n     *\\n     * @param cityAddr address of that city to check\\n     */\\n    function checkExistingCityOfAState(\\n        address cityAddr,\\n        address stateAddr\\n    ) public view returns (bool) {\\n        if (pt.getPreviousSender(cityAddr) == stateAddr) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if ((msg.sender != admin)) {\\n            revert DSESCenter__Only_Admin_Allowed();\\n        }\\n        _;\\n    }\\n    /**\\n     *\\n     * @notice if State (the msg.sender) isn't the same that added that specific city with cityAddr, revert the transaction\\n     *\\n     * @param cityAddr address of that city that you want to check\\n     */\\n    modifier onlyBelongingState(address cityAddr) {\\n        if (pt.getPreviousSender(cityAddr) != msg.sender) {\\n            revert DSESCenter__City_Not_Found();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4ddeb1b1839c75921e545f8b3da5423fad3c7a10e06268c2e8de45bb5e4fda76\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionToken {\\n    function transferExtended(address from, address to, uint256 value) external;\\n\\n    function getPreviousSender(address from) external view returns (address);\\n\\n    function deletePreviousSender(address receiver) external;\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transferForAddingEntities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getPTtoEthRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x471563c2e3fdd71c874b31cf9e02476c5bc0902729447ef8698430b870e57d02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b612fed80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806352a3ca021161008c578063a376e4d811610066578063a376e4d814610222578063b8f2eac114610252578063c4d66de814610282578063f8a298b01461029e576100cf565b806352a3ca02146101ba5780635a9c0e8c146101ea578063a0e3720a14610206576100cf565b80631142bd4e146100d45780631bab58f5146100f05780631fef660914610120578063259ed8a11461015057806332a2c5d01461018057806338a2b9f91461019e575b600080fd5b6100ee60048036038101906100e99190612270565b6102ce565b005b61010a600480360381019061010591906123f7565b61067d565b6040516101179190612585565b60405180910390f35b61013a600480360381019061013591906123f7565b610a57565b60405161014791906125b6565b60405180910390f35b61016a600480360381019061016591906123f7565b610ab1565b604051610177919061269d565b60405180910390f35b610188610e03565b60405161019591906126ce565b60405180910390f35b6101b860048036038101906101b391906123f7565b610e2d565b005b6101d460048036038101906101cf91906123f7565b611195565b6040516101e1919061269d565b60405180910390f35b61020460048036038101906101ff91906126e9565b6114e7565b005b610220600480360381019061021b91906123f7565b611826565b005b61023c600480360381019061023791906123f7565b611b60565b60405161024991906125b6565b60405180910390f35b61026c600480360381019061026791906123f7565b611bba565b60405161027991906125b6565b60405180910390f35b61029c60048036038101906102979190612892565b611c14565b005b6102b860048036038101906102b391906128bf565b611e5c565b6040516102c591906125b6565b60405180910390f35b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac058b6040518263ffffffff1660e01b815260040161037f91906126ce565b602060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c09190612914565b90508180156103cc5750825b80156104255750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061046f5750818015610436575082155b801561046e5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b6104ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a5906129ea565b60405180910390fd5b6040518061010001604052808d81526020018c81526020018a815260200189815260200188815260200187815260200186815260200185815250600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161053c9190612c16565b5060208201518160010190816105529190612c16565b506040820151816002015560608201518160030190816105729190612c16565b5060808201518160040190816105889190612c16565b5060a082015181600501908161059e9190612c16565b5060c0820151816006015560e08201518160070190816105be9190612c16565b509050508261066f57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea64b234338c670de0b6b3a7640000620493e061061e9190612d17565b6040518463ffffffff1660e01b815260040161063c93929190612d68565b600060405180830381600087803b15801561065657600080fd5b505af115801561066a573d6000803e3d6000fd5b505050505b505050505050505050505050565b610685611f63565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820180546106e090612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461070c90612a39565b80156107595780601f1061072e57610100808354040283529160200191610759565b820191906000526020600020905b81548152906001019060200180831161073c57829003601f168201915b5050505050815260200160018201805461077290612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612a39565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b505050505081526020016002820154815260200160038201805461080e90612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461083a90612a39565b80156108875780601f1061085c57610100808354040283529160200191610887565b820191906000526020600020905b81548152906001019060200180831161086a57829003601f168201915b505050505081526020016004820180546108a090612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546108cc90612a39565b80156109195780601f106108ee57610100808354040283529160200191610919565b820191906000526020600020905b8154815290600101906020018083116108fc57829003601f168201915b5050505050815260200160058201805461093290612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461095e90612a39565b80156109ab5780601f10610980576101008083540402835291602001916109ab565b820191906000526020600020905b81548152906001019060200180831161098e57829003601f168201915b50505050508152602001600682015481526020016007820180546109ce90612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546109fa90612a39565b8015610a475780601f10610a1c57610100808354040283529160200191610a47565b820191906000526020600020905b815481529060010190602001808311610a2a57829003601f168201915b5050505050815250509050919050565b60008173ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b610ab9611fa8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610b1490612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090612a39565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382018054610bba90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610be690612a39565b8015610c335780601f10610c0857610100808354040283529160200191610c33565b820191906000526020600020905b815481529060010190602001808311610c1657829003601f168201915b50505050508152602001600482018054610c4c90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7890612a39565b8015610cc55780601f10610c9a57610100808354040283529160200191610cc5565b820191906000526020600020905b815481529060010190602001808311610ca857829003601f168201915b50505050508152602001600582018054610cde90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0a90612a39565b8015610d575780601f10610d2c57610100808354040283529160200191610d57565b820191906000526020600020905b815481529060010190602001808311610d3a57829003601f168201915b5050505050815260200160068201548152602001600782018054610d7a90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610da690612a39565b8015610df35780601f10610dc857610100808354040283529160200191610df3565b820191906000526020600020905b815481529060010190602001808311610dd657829003601f168201915b5050505050815250509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b803373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05836040518263ffffffff1660e01b8152600401610ea091906126ce565b602060405180830381865afa158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190612914565b73ffffffffffffffffffffffffffffffffffffffff1614610f2e576040517ffba73c2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28333600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401610fc991906126ce565b602060405180830381865afa158015610fe6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100a9190612db4565b6040518463ffffffff1660e01b815260040161102893929190612d68565b600060405180830381600087803b15801561104257600080fd5b505af1158015611056573d6000803e3d6000fd5b50505050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006110aa9190611fed565b600182016000905560028201600090556003820160006110ca9190611fed565b6004820160006110da9190611fed565b6005820160006110ea9190611fed565b60068201600090556007820160006111029190611fed565b5050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cd7e43836040518263ffffffff1660e01b815260040161115f91906126ce565b600060405180830381600087803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b505050505050565b61119d611fa8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820180546111f890612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461122490612a39565b80156112715780601f1061124657610100808354040283529160200191611271565b820191906000526020600020905b81548152906001019060200180831161125457829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201805461129e90612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546112ca90612a39565b80156113175780601f106112ec57610100808354040283529160200191611317565b820191906000526020600020905b8154815290600101906020018083116112fa57829003601f168201915b5050505050815260200160048201805461133090612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461135c90612a39565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b505050505081526020016005820180546113c290612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546113ee90612a39565b801561143b5780601f106114105761010080835404028352916020019161143b565b820191906000526020600020905b81548152906001019060200180831161141e57829003601f168201915b505050505081526020016006820154815260200160078201805461145e90612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461148a90612a39565b80156114d75780601f106114ac576101008083540402835291602001916114d7565b820191906000526020600020905b8154815290600101906020018083116114ba57829003601f168201915b5050505050815250509050919050565b60006114f233611bba565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac058a6040518263ffffffff1660e01b815260040161155191906126ce565b602060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612914565b905081801561159e5750825b80156115d557503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061161f57508180156115e6575082155b801561161e5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b61165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165590612e79565b60405180910390fd5b6040518061010001604052808d81526020018c81526020018b815260200189815260200188815260200187815260200186815260200185815250600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816116ec9190612c16565b50602082015181600101556040820151816002015560608201518160030190816117169190612c16565b50608082015181600401908161172c9190612c16565b5060a08201518160050190816117429190612c16565b5060c0820151816006015560e08201518160070190816117629190612c16565b5090505082611818576000670de0b6b3a76400006127106117839190612d17565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea64b234338c846040518463ffffffff1660e01b81526004016117e493929190612d68565b600060405180830381600087803b1580156117fe57600080fd5b505af1158015611812573d6000803e3d6000fd5b50505050505b505050505050505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118ad576040517ffc7b657100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118b681611bba565b15611b2b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b815260040161195691906126ce565b602060405180830381865afa158015611973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190612db4565b6040518463ffffffff1660e01b81526004016119b593929190612d68565b600060405180830381600087803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b50505050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611a379190611fed565b600182016000611a479190611fed565b6002820160009055600382016000611a5f9190611fed565b600482016000611a6f9190611fed565b600582016000611a7f9190611fed565b6006820160009055600782016000611a979190611fed565b5050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cd7e43826040518263ffffffff1660e01b8152600401611af491906126ce565b600060405180830381600087803b158015611b0e57600080fd5b505af1158015611b22573d6000803e3d6000fd5b50505050611b5d565b6040517f70f1a5c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054611bb090612a39565b9050119050919050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054611c0a90612a39565b9050119050919050565b60008060019054906101000a900460ff16159050808015611c455750600160008054906101000a900460ff1660ff16105b80611c725750611c5430611f40565b158015611c715750600160008054906101000a900460ff1660ff16145b5b611cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca890612f0b565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611cee576001600060016101000a81548160ff0219169083151502179055505b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401611dcd929190612f2b565b600060405180830381600087803b158015611de757600080fd5b505af1158015611dfb573d6000803e3d6000fd5b505050508015611e585760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611e4f9190612f9c565b60405180910390a15b5050565b60008173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05856040518263ffffffff1660e01b8152600401611ed091906126ce565b602060405180830381865afa158015611eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f119190612914565b73ffffffffffffffffffffffffffffffffffffffff1603611f355760019050611f3a565b600090505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60405180610100016040528060608152602001606081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b60405180610100016040528060608152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b508054611ff990612a39565b6000825580601f1061200b575061202a565b601f016020900490600052602060002090810190612029919061202d565b5b50565b5b8082111561204657600081600090555060010161202e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120b182612068565b810181811067ffffffffffffffff821117156120d0576120cf612079565b5b80604052505050565b60006120e361204a565b90506120ef82826120a8565b919050565b600067ffffffffffffffff82111561210f5761210e612079565b5b61211882612068565b9050602081019050919050565b82818337600083830152505050565b6000612147612142846120f4565b6120d9565b90508281526020810184848401111561216357612162612063565b5b61216e848285612125565b509392505050565b600082601f83011261218b5761218a61205e565b5b813561219b848260208601612134565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121cf826121a4565b9050919050565b6121df816121c4565b81146121ea57600080fd5b50565b6000813590506121fc816121d6565b92915050565b6000819050919050565b61221581612202565b811461222057600080fd5b50565b6000813590506122328161220c565b92915050565b60008115159050919050565b61224d81612238565b811461225857600080fd5b50565b60008135905061226a81612244565b92915050565b6000806000806000806000806000806101408b8d03121561229457612293612054565b5b60008b013567ffffffffffffffff8111156122b2576122b1612059565b5b6122be8d828e01612176565b9a505060208b013567ffffffffffffffff8111156122df576122de612059565b5b6122eb8d828e01612176565b99505060406122fc8d828e016121ed565b985050606061230d8d828e01612223565b97505060808b013567ffffffffffffffff81111561232e5761232d612059565b5b61233a8d828e01612176565b96505060a08b013567ffffffffffffffff81111561235b5761235a612059565b5b6123678d828e01612176565b95505060c08b013567ffffffffffffffff81111561238857612387612059565b5b6123948d828e01612176565b94505060e06123a58d828e01612223565b9350506101008b013567ffffffffffffffff8111156123c7576123c6612059565b5b6123d38d828e01612176565b9250506101206123e58d828e0161225b565b9150509295989b9194979a5092959850565b60006020828403121561240d5761240c612054565b5b600061241b848285016121ed565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561245e578082015181840152602081019050612443565b60008484015250505050565b600061247582612424565b61247f818561242f565b935061248f818560208601612440565b61249881612068565b840191505092915050565b6124ac81612202565b82525050565b60006101008301600083015184820360008601526124d0828261246a565b915050602083015184820360208601526124ea828261246a565b91505060408301516124ff60408601826124a3565b5060608301518482036060860152612517828261246a565b91505060808301518482036080860152612531828261246a565b91505060a083015184820360a086015261254b828261246a565b91505060c083015161256060c08601826124a3565b5060e083015184820360e0860152612578828261246a565b9150508091505092915050565b6000602082019050818103600083015261259f81846124b2565b905092915050565b6125b081612238565b82525050565b60006020820190506125cb60008301846125a7565b92915050565b60006101008301600083015184820360008601526125ef828261246a565b915050602083015161260460208601826124a3565b50604083015161261760408601826124a3565b506060830151848203606086015261262f828261246a565b91505060808301518482036080860152612649828261246a565b91505060a083015184820360a0860152612663828261246a565b91505060c083015161267860c08601826124a3565b5060e083015184820360e0860152612690828261246a565b9150508091505092915050565b600060208201905081810360008301526126b781846125d1565b905092915050565b6126c8816121c4565b82525050565b60006020820190506126e360008301846126bf565b92915050565b6000806000806000806000806000806101408b8d03121561270d5761270c612054565b5b60008b013567ffffffffffffffff81111561272b5761272a612059565b5b6127378d828e01612176565b9a505060206127488d828e01612223565b99505060406127598d828e01612223565b985050606061276a8d828e016121ed565b97505060808b013567ffffffffffffffff81111561278b5761278a612059565b5b6127978d828e01612176565b96505060a08b013567ffffffffffffffff8111156127b8576127b7612059565b5b6127c48d828e01612176565b95505060c08b013567ffffffffffffffff8111156127e5576127e4612059565b5b6127f18d828e01612176565b94505060e06128028d828e01612223565b9350506101008b013567ffffffffffffffff81111561282457612823612059565b5b6128308d828e01612176565b9250506101206128428d828e0161225b565b9150509295989b9194979a5092959850565b600061285f826121c4565b9050919050565b61286f81612854565b811461287a57600080fd5b50565b60008135905061288c81612866565b92915050565b6000602082840312156128a8576128a7612054565b5b60006128b68482850161287d565b91505092915050565b600080604083850312156128d6576128d5612054565b5b60006128e4858286016121ed565b92505060206128f5858286016121ed565b9150509250929050565b60008151905061290e816121d6565b92915050565b60006020828403121561292a57612929612054565b5b6000612938848285016128ff565b91505092915050565b600082825260208201905092915050565b7f4572726f72207768696c6520616464696e672061206e65772073746174652e2060008201527f4d6179626520796f7520617265206e6f7420746865206f776e6572206f72207460208201527f686520737461746520616c726561647920657869737400000000000000000000604082015250565b60006129d4605683612941565b91506129df82612952565b606082019050919050565b60006020820190508181036000830152612a03816129c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a5157607f821691505b602082108103612a6457612a63612a0a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612acc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a8f565b612ad68683612a8f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b13612b0e612b0984612202565b612aee565b612202565b9050919050565b6000819050919050565b612b2d83612af8565b612b41612b3982612b1a565b848454612a9c565b825550505050565b600090565b612b56612b49565b612b61818484612b24565b505050565b5b81811015612b8557612b7a600082612b4e565b600181019050612b67565b5050565b601f821115612bca57612b9b81612a6a565b612ba484612a7f565b81016020851015612bb3578190505b612bc7612bbf85612a7f565b830182612b66565b50505b505050565b600082821c905092915050565b6000612bed60001984600802612bcf565b1980831691505092915050565b6000612c068383612bdc565b9150826002028217905092915050565b612c1f82612424565b67ffffffffffffffff811115612c3857612c37612079565b5b612c428254612a39565b612c4d828285612b89565b600060209050601f831160018114612c805760008415612c6e578287015190505b612c788582612bfa565b865550612ce0565b601f198416612c8e86612a6a565b60005b82811015612cb657848901518255600182019150602085019450602081019050612c91565b86831015612cd35784890151612ccf601f891682612bdc565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d2282612202565b9150612d2d83612202565b9250828202612d3b81612202565b91508282048414831517612d5257612d51612ce8565b5b5092915050565b612d6281612202565b82525050565b6000606082019050612d7d60008301866126bf565b612d8a60208301856126bf565b612d976040830184612d59565b949350505050565b600081519050612dae8161220c565b92915050565b600060208284031215612dca57612dc9612054565b5b6000612dd884828501612d9f565b91505092915050565b7f4572726f72207768696c6520616464696e672061206e657720636974792e204d60008201527f6179626520796f7520617265206e6f742061207374617465206f72207468652060208201527f6369747920616c72656164792065786973740000000000000000000000000000604082015250565b6000612e63605283612941565b9150612e6e82612de1565b606082019050919050565b60006020820190508181036000830152612e9281612e56565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ef5602e83612941565b9150612f0082612e99565b604082019050919050565b60006020820190508181036000830152612f2481612ee8565b9050919050565b6000604082019050612f4060008301856126bf565b612f4d60208301846126bf565b9392505050565b6000819050919050565b600060ff82169050919050565b6000612f86612f81612f7c84612f54565b612aee565b612f5e565b9050919050565b612f9681612f6b565b82525050565b6000602082019050612fb16000830184612f8d565b9291505056fea2646970667358221220ffeab08f35ce6f0f2c026116f6297cc38d235bf99fb169c623c16d355338855a64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806352a3ca021161008c578063a376e4d811610066578063a376e4d814610222578063b8f2eac114610252578063c4d66de814610282578063f8a298b01461029e576100cf565b806352a3ca02146101ba5780635a9c0e8c146101ea578063a0e3720a14610206576100cf565b80631142bd4e146100d45780631bab58f5146100f05780631fef660914610120578063259ed8a11461015057806332a2c5d01461018057806338a2b9f91461019e575b600080fd5b6100ee60048036038101906100e99190612270565b6102ce565b005b61010a600480360381019061010591906123f7565b61067d565b6040516101179190612585565b60405180910390f35b61013a600480360381019061013591906123f7565b610a57565b60405161014791906125b6565b60405180910390f35b61016a600480360381019061016591906123f7565b610ab1565b604051610177919061269d565b60405180910390f35b610188610e03565b60405161019591906126ce565b60405180910390f35b6101b860048036038101906101b391906123f7565b610e2d565b005b6101d460048036038101906101cf91906123f7565b611195565b6040516101e1919061269d565b60405180910390f35b61020460048036038101906101ff91906126e9565b6114e7565b005b610220600480360381019061021b91906123f7565b611826565b005b61023c600480360381019061023791906123f7565b611b60565b60405161024991906125b6565b60405180910390f35b61026c600480360381019061026791906123f7565b611bba565b60405161027991906125b6565b60405180910390f35b61029c60048036038101906102979190612892565b611c14565b005b6102b860048036038101906102b391906128bf565b611e5c565b6040516102c591906125b6565b60405180910390f35b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac058b6040518263ffffffff1660e01b815260040161037f91906126ce565b602060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c09190612914565b90508180156103cc5750825b80156104255750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061046f5750818015610436575082155b801561046e5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b6104ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a5906129ea565b60405180910390fd5b6040518061010001604052808d81526020018c81526020018a815260200189815260200188815260200187815260200186815260200185815250600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161053c9190612c16565b5060208201518160010190816105529190612c16565b506040820151816002015560608201518160030190816105729190612c16565b5060808201518160040190816105889190612c16565b5060a082015181600501908161059e9190612c16565b5060c0820151816006015560e08201518160070190816105be9190612c16565b509050508261066f57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea64b234338c670de0b6b3a7640000620493e061061e9190612d17565b6040518463ffffffff1660e01b815260040161063c93929190612d68565b600060405180830381600087803b15801561065657600080fd5b505af115801561066a573d6000803e3d6000fd5b505050505b505050505050505050505050565b610685611f63565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820180546106e090612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461070c90612a39565b80156107595780601f1061072e57610100808354040283529160200191610759565b820191906000526020600020905b81548152906001019060200180831161073c57829003601f168201915b5050505050815260200160018201805461077290612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612a39565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b505050505081526020016002820154815260200160038201805461080e90612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461083a90612a39565b80156108875780601f1061085c57610100808354040283529160200191610887565b820191906000526020600020905b81548152906001019060200180831161086a57829003601f168201915b505050505081526020016004820180546108a090612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546108cc90612a39565b80156109195780601f106108ee57610100808354040283529160200191610919565b820191906000526020600020905b8154815290600101906020018083116108fc57829003601f168201915b5050505050815260200160058201805461093290612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461095e90612a39565b80156109ab5780601f10610980576101008083540402835291602001916109ab565b820191906000526020600020905b81548152906001019060200180831161098e57829003601f168201915b50505050508152602001600682015481526020016007820180546109ce90612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546109fa90612a39565b8015610a475780601f10610a1c57610100808354040283529160200191610a47565b820191906000526020600020905b815481529060010190602001808311610a2a57829003601f168201915b5050505050815250509050919050565b60008173ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b610ab9611fa8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610b1490612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090612a39565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382018054610bba90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610be690612a39565b8015610c335780601f10610c0857610100808354040283529160200191610c33565b820191906000526020600020905b815481529060010190602001808311610c1657829003601f168201915b50505050508152602001600482018054610c4c90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7890612a39565b8015610cc55780601f10610c9a57610100808354040283529160200191610cc5565b820191906000526020600020905b815481529060010190602001808311610ca857829003601f168201915b50505050508152602001600582018054610cde90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0a90612a39565b8015610d575780601f10610d2c57610100808354040283529160200191610d57565b820191906000526020600020905b815481529060010190602001808311610d3a57829003601f168201915b5050505050815260200160068201548152602001600782018054610d7a90612a39565b80601f0160208091040260200160405190810160405280929190818152602001828054610da690612a39565b8015610df35780601f10610dc857610100808354040283529160200191610df3565b820191906000526020600020905b815481529060010190602001808311610dd657829003601f168201915b5050505050815250509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b803373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05836040518263ffffffff1660e01b8152600401610ea091906126ce565b602060405180830381865afa158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190612914565b73ffffffffffffffffffffffffffffffffffffffff1614610f2e576040517ffba73c2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28333600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401610fc991906126ce565b602060405180830381865afa158015610fe6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100a9190612db4565b6040518463ffffffff1660e01b815260040161102893929190612d68565b600060405180830381600087803b15801561104257600080fd5b505af1158015611056573d6000803e3d6000fd5b50505050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006110aa9190611fed565b600182016000905560028201600090556003820160006110ca9190611fed565b6004820160006110da9190611fed565b6005820160006110ea9190611fed565b60068201600090556007820160006111029190611fed565b5050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cd7e43836040518263ffffffff1660e01b815260040161115f91906126ce565b600060405180830381600087803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b505050505050565b61119d611fa8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820180546111f890612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461122490612a39565b80156112715780601f1061124657610100808354040283529160200191611271565b820191906000526020600020905b81548152906001019060200180831161125457829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201805461129e90612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546112ca90612a39565b80156113175780601f106112ec57610100808354040283529160200191611317565b820191906000526020600020905b8154815290600101906020018083116112fa57829003601f168201915b5050505050815260200160048201805461133090612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461135c90612a39565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b505050505081526020016005820180546113c290612a39565b80601f01602080910402602001604051908101604052809291908181526020018280546113ee90612a39565b801561143b5780601f106114105761010080835404028352916020019161143b565b820191906000526020600020905b81548152906001019060200180831161141e57829003601f168201915b505050505081526020016006820154815260200160078201805461145e90612a39565b80601f016020809104026020016040519081016040528092919081815260200182805461148a90612a39565b80156114d75780601f106114ac576101008083540402835291602001916114d7565b820191906000526020600020905b8154815290600101906020018083116114ba57829003601f168201915b5050505050815250509050919050565b60006114f233611bba565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac058a6040518263ffffffff1660e01b815260040161155191906126ce565b602060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612914565b905081801561159e5750825b80156115d557503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061161f57508180156115e6575082155b801561161e5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b5b61165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165590612e79565b60405180910390fd5b6040518061010001604052808d81526020018c81526020018b815260200189815260200188815260200187815260200186815260200185815250600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816116ec9190612c16565b50602082015181600101556040820151816002015560608201518160030190816117169190612c16565b50608082015181600401908161172c9190612c16565b5060a08201518160050190816117429190612c16565b5060c0820151816006015560e08201518160070190816117629190612c16565b5090505082611818576000670de0b6b3a76400006127106117839190612d17565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea64b234338c846040518463ffffffff1660e01b81526004016117e493929190612d68565b600060405180830381600087803b1580156117fe57600080fd5b505af1158015611812573d6000803e3d6000fd5b50505050505b505050505050505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118ad576040517ffc7b657100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118b681611bba565b15611b2b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc5314f28233600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b815260040161195691906126ce565b602060405180830381865afa158015611973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190612db4565b6040518463ffffffff1660e01b81526004016119b593929190612d68565b600060405180830381600087803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b50505050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000611a379190611fed565b600182016000611a479190611fed565b6002820160009055600382016000611a5f9190611fed565b600482016000611a6f9190611fed565b600582016000611a7f9190611fed565b6006820160009055600782016000611a979190611fed565b5050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cd7e43826040518263ffffffff1660e01b8152600401611af491906126ce565b600060405180830381600087803b158015611b0e57600080fd5b505af1158015611b22573d6000803e3d6000fd5b50505050611b5d565b6040517f70f1a5c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054611bb090612a39565b9050119050919050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054611c0a90612a39565b9050119050919050565b60008060019054906101000a900460ff16159050808015611c455750600160008054906101000a900460ff1660ff16105b80611c725750611c5430611f40565b158015611c715750600160008054906101000a900460ff1660ff16145b5b611cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca890612f0b565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611cee576001600060016101000a81548160ff0219169083151502179055505b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401611dcd929190612f2b565b600060405180830381600087803b158015611de757600080fd5b505af1158015611dfb573d6000803e3d6000fd5b505050508015611e585760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611e4f9190612f9c565b60405180910390a15b5050565b60008173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e94ac05856040518263ffffffff1660e01b8152600401611ed091906126ce565b602060405180830381865afa158015611eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f119190612914565b73ffffffffffffffffffffffffffffffffffffffff1603611f355760019050611f3a565b600090505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60405180610100016040528060608152602001606081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b60405180610100016040528060608152602001600081526020016000815260200160608152602001606081526020016060815260200160008152602001606081525090565b508054611ff990612a39565b6000825580601f1061200b575061202a565b601f016020900490600052602060002090810190612029919061202d565b5b50565b5b8082111561204657600081600090555060010161202e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120b182612068565b810181811067ffffffffffffffff821117156120d0576120cf612079565b5b80604052505050565b60006120e361204a565b90506120ef82826120a8565b919050565b600067ffffffffffffffff82111561210f5761210e612079565b5b61211882612068565b9050602081019050919050565b82818337600083830152505050565b6000612147612142846120f4565b6120d9565b90508281526020810184848401111561216357612162612063565b5b61216e848285612125565b509392505050565b600082601f83011261218b5761218a61205e565b5b813561219b848260208601612134565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121cf826121a4565b9050919050565b6121df816121c4565b81146121ea57600080fd5b50565b6000813590506121fc816121d6565b92915050565b6000819050919050565b61221581612202565b811461222057600080fd5b50565b6000813590506122328161220c565b92915050565b60008115159050919050565b61224d81612238565b811461225857600080fd5b50565b60008135905061226a81612244565b92915050565b6000806000806000806000806000806101408b8d03121561229457612293612054565b5b60008b013567ffffffffffffffff8111156122b2576122b1612059565b5b6122be8d828e01612176565b9a505060208b013567ffffffffffffffff8111156122df576122de612059565b5b6122eb8d828e01612176565b99505060406122fc8d828e016121ed565b985050606061230d8d828e01612223565b97505060808b013567ffffffffffffffff81111561232e5761232d612059565b5b61233a8d828e01612176565b96505060a08b013567ffffffffffffffff81111561235b5761235a612059565b5b6123678d828e01612176565b95505060c08b013567ffffffffffffffff81111561238857612387612059565b5b6123948d828e01612176565b94505060e06123a58d828e01612223565b9350506101008b013567ffffffffffffffff8111156123c7576123c6612059565b5b6123d38d828e01612176565b9250506101206123e58d828e0161225b565b9150509295989b9194979a5092959850565b60006020828403121561240d5761240c612054565b5b600061241b848285016121ed565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561245e578082015181840152602081019050612443565b60008484015250505050565b600061247582612424565b61247f818561242f565b935061248f818560208601612440565b61249881612068565b840191505092915050565b6124ac81612202565b82525050565b60006101008301600083015184820360008601526124d0828261246a565b915050602083015184820360208601526124ea828261246a565b91505060408301516124ff60408601826124a3565b5060608301518482036060860152612517828261246a565b91505060808301518482036080860152612531828261246a565b91505060a083015184820360a086015261254b828261246a565b91505060c083015161256060c08601826124a3565b5060e083015184820360e0860152612578828261246a565b9150508091505092915050565b6000602082019050818103600083015261259f81846124b2565b905092915050565b6125b081612238565b82525050565b60006020820190506125cb60008301846125a7565b92915050565b60006101008301600083015184820360008601526125ef828261246a565b915050602083015161260460208601826124a3565b50604083015161261760408601826124a3565b506060830151848203606086015261262f828261246a565b91505060808301518482036080860152612649828261246a565b91505060a083015184820360a0860152612663828261246a565b91505060c083015161267860c08601826124a3565b5060e083015184820360e0860152612690828261246a565b9150508091505092915050565b600060208201905081810360008301526126b781846125d1565b905092915050565b6126c8816121c4565b82525050565b60006020820190506126e360008301846126bf565b92915050565b6000806000806000806000806000806101408b8d03121561270d5761270c612054565b5b60008b013567ffffffffffffffff81111561272b5761272a612059565b5b6127378d828e01612176565b9a505060206127488d828e01612223565b99505060406127598d828e01612223565b985050606061276a8d828e016121ed565b97505060808b013567ffffffffffffffff81111561278b5761278a612059565b5b6127978d828e01612176565b96505060a08b013567ffffffffffffffff8111156127b8576127b7612059565b5b6127c48d828e01612176565b95505060c08b013567ffffffffffffffff8111156127e5576127e4612059565b5b6127f18d828e01612176565b94505060e06128028d828e01612223565b9350506101008b013567ffffffffffffffff81111561282457612823612059565b5b6128308d828e01612176565b9250506101206128428d828e0161225b565b9150509295989b9194979a5092959850565b600061285f826121c4565b9050919050565b61286f81612854565b811461287a57600080fd5b50565b60008135905061288c81612866565b92915050565b6000602082840312156128a8576128a7612054565b5b60006128b68482850161287d565b91505092915050565b600080604083850312156128d6576128d5612054565b5b60006128e4858286016121ed565b92505060206128f5858286016121ed565b9150509250929050565b60008151905061290e816121d6565b92915050565b60006020828403121561292a57612929612054565b5b6000612938848285016128ff565b91505092915050565b600082825260208201905092915050565b7f4572726f72207768696c6520616464696e672061206e65772073746174652e2060008201527f4d6179626520796f7520617265206e6f7420746865206f776e6572206f72207460208201527f686520737461746520616c726561647920657869737400000000000000000000604082015250565b60006129d4605683612941565b91506129df82612952565b606082019050919050565b60006020820190508181036000830152612a03816129c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a5157607f821691505b602082108103612a6457612a63612a0a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612acc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a8f565b612ad68683612a8f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b13612b0e612b0984612202565b612aee565b612202565b9050919050565b6000819050919050565b612b2d83612af8565b612b41612b3982612b1a565b848454612a9c565b825550505050565b600090565b612b56612b49565b612b61818484612b24565b505050565b5b81811015612b8557612b7a600082612b4e565b600181019050612b67565b5050565b601f821115612bca57612b9b81612a6a565b612ba484612a7f565b81016020851015612bb3578190505b612bc7612bbf85612a7f565b830182612b66565b50505b505050565b600082821c905092915050565b6000612bed60001984600802612bcf565b1980831691505092915050565b6000612c068383612bdc565b9150826002028217905092915050565b612c1f82612424565b67ffffffffffffffff811115612c3857612c37612079565b5b612c428254612a39565b612c4d828285612b89565b600060209050601f831160018114612c805760008415612c6e578287015190505b612c788582612bfa565b865550612ce0565b601f198416612c8e86612a6a565b60005b82811015612cb657848901518255600182019150602085019450602081019050612c91565b86831015612cd35784890151612ccf601f891682612bdc565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d2282612202565b9150612d2d83612202565b9250828202612d3b81612202565b91508282048414831517612d5257612d51612ce8565b5b5092915050565b612d6281612202565b82525050565b6000606082019050612d7d60008301866126bf565b612d8a60208301856126bf565b612d976040830184612d59565b949350505050565b600081519050612dae8161220c565b92915050565b600060208284031215612dca57612dc9612054565b5b6000612dd884828501612d9f565b91505092915050565b7f4572726f72207768696c6520616464696e672061206e657720636974792e204d60008201527f6179626520796f7520617265206e6f742061207374617465206f72207468652060208201527f6369747920616c72656164792065786973740000000000000000000000000000604082015250565b6000612e63605283612941565b9150612e6e82612de1565b606082019050919050565b60006020820190508181036000830152612e9281612e56565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ef5602e83612941565b9150612f0082612e99565b604082019050919050565b60006020820190508181036000830152612f2481612ee8565b9050919050565b6000604082019050612f4060008301856126bf565b612f4d60208301846126bf565b9392505050565b6000819050919050565b600060ff82169050919050565b6000612f86612f81612f7c84612f54565b612aee565b612f5e565b9050919050565b612f9681612f6b565b82525050565b6000602082019050612fb16000830184612f8d565b9291505056fea2646970667358221220ffeab08f35ce6f0f2c026116f6297cc38d235bf99fb169c623c16d355338855a64736f6c63430008150033",
  "devdoc": {
    "author": "Giuseppe La Vecchia",
    "custom:experimental": "This is an experimental contract.",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addCity(string,uint256,uint256,address,string,string,string,uint256,string,bool)": {
        "details": "all the require means that you can enter the function in 2 cases: 1)if you are a state and you are going to modify an existing city (added previously by an state) 2)If you are a state and you want to add a non-existing city, so you are not going to modify",
        "params": {
          "isModify": "if true, it means that the caller of this function want to change something in a City. Otherwise it is an addition operation and a transfer of PT will be done"
        }
      },
      "addState(string,string,address,uint256,string,string,string,uint256,string,bool)": {
        "details": "all the require means that you can enter the function in 2 cases: 1)if you are an admin and you are going to modify an existing state (added previously by an Admin) 2)If you are an admin and you want to add a non-existing state, so you are not going to modify",
        "params": {
          "isModify": "if true, it means that the caller of this function want to change something in a State. Otherwise it is an addition operation."
        }
      },
      "checkExistingCityOfAState(address,address)": {
        "params": {
          "cityAddr": "address of that city to check"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deleteState(address)": {
        "details": "deletes mapping location here and in the previousSender mapping. PreviousSenderMapping is a relation between a sender of PT(the one who add an entity, like the admin) and a receiver of PT (the one who was added by an entity, like a state)",
        "params": {
          "stateAddr": "stateAddress to delete"
        }
      },
      "initialize(address)": {
        "params": {
          "ptContractAddress": "the contract address of the PollutionToken contract, used by this contract."
        }
      }
    },
    "title": "A contract to be used by Admin(deployer) and States",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCity(string,uint256,uint256,address,string,string,string,uint256,string,bool)": {
        "notice": "Add a new city instanceAllows a State to add a new city giving an initial amount of PollutionTokens.It can also be used for editing purpose of the City's parameters."
      },
      "addState(string,string,address,uint256,string,string,string,uint256,string,bool)": {
        "notice": "Add a new state instanceAllows an Admin to add a new state giving an initial amount of PollutionTokens.It can also be used for editing purpose of the State's parameters."
      },
      "checkExistingCityOfAState(address,address)": {
        "notice": "This will return true if city was added by a state, otherwise false. getPreviousSender contains a mapping(addressOfEntityChildren=>addressOfEntityFather) where father is the entity that add the children, like state add city."
      },
      "deleteState(address)": {
        "notice": "Allows an admin to delete a state"
      },
      "initialize(address)": {
        "notice": "Initialize function for the proxy upgradable pattern by OpenZeppelinInitialize variables. The address of this contract is passed to the storeContractAddress function of the ptContract, allowing this contract to call its functions"
      }
    },
    "notice": "Used for CRUD operations by States and Admin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1076,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1079,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "pt",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPollutionToken)1680"
      },
      {
        "astId": 1089,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "states",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(State)1031_storage)"
      },
      {
        "astId": 1094,
        "contract": "contracts/DSESCenter.sol:DSESCenter",
        "label": "cities",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(City)1048_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPollutionToken)1680": {
        "encoding": "inplace",
        "label": "contract IPollutionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(City)1048_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.City)",
        "numberOfBytes": "32",
        "value": "t_struct(City)1048_storage"
      },
      "t_mapping(t_address,t_struct(State)1031_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct classes.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)1031_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(City)1048_storage": {
        "encoding": "inplace",
        "label": "struct classes.City",
        "members": [
          {
            "astId": 1033,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1035,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "population",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1037,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "numberOfIndustries",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1039,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1041,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneySurname",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1043,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyEmail",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1045,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "telephone",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1047,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "physicalAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(State)1031_storage": {
        "encoding": "inplace",
        "label": "struct classes.State",
        "members": [
          {
            "astId": 1016,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1018,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "iso",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1020,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "numberOfCities",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1022,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1024,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneySurname",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1026,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "attorneyEmail",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1028,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "telephone",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1030,
            "contract": "contracts/DSESCenter.sol:DSESCenter",
            "label": "physicalAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}