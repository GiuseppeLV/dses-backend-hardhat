{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PollutionToken__Not_Enough_PT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PollutionToken__Only_Allowed_Contracts",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deletePreviousSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "master",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "slave",
          "type": "address"
        }
      ],
      "name": "getAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPTtoEthRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getPreviousSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reversePartecipants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "setPTtoEthRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "storeContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferExtended",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferForAddingEntities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "07f7b3e8522170003136c015d3166299",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PollutionToken__Not_Enough_PT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PollutionToken__Only_Allowed_Contracts\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deletePreviousSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slave\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTtoEthRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getPreviousSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reversePartecipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setPTtoEthRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"storeContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferExtended\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferForAddingEntities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Giuseppe La Vecchia\",\"custom:experimental\":\"This is an experimental contract.\",\"details\":\"ERC721Enumerable is used because of tokenOfOwnerByIndex method.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The address authorized to spend\",\"_value\":\"the max amount they can spend\"}},\"burn(uint256)\":{\"params\":{\"_value\":\"the amount of money to burn\"}},\"burnFrom(address,uint256)\":{\"params\":{\"_from\":\"the address of the sender\",\"_value\":\"the amount of money to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPreviousSender(address)\":{\"params\":{\"receiver\":\"the address of the one who received tokens in transferForAddingEntities function\"}},\"initialize(uint256,string,string)\":{\"params\":{\"_tokenName\":\"token name\",\"_tokenSymbol\":\"token symbol\",\"initialSupply\":\"the initial supply number of tokens\"}},\"storeContractAddress(address,address)\":{\"params\":{\"contractAddr\":\"The contract address authorized\",\"sender\":\"the admin address\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The address of the recipient\",\"_value\":\"the amount to send\"}},\"transferExtended(address,address,uint256)\":{\"params\":{\"from\":\"the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol\",\"to\":\"The address of the recipient\",\"value\":\"the amount to send\"}},\"transferForAddingEntities(address,address,uint256)\":{\"params\":{\"from\":\"the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol\",\"to\":\"The address of the recipient\",\"value\":\"the amount to send\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"The address of the sender\",\"_to\":\"The address of the recipient\",\"_value\":\"the amount to send\"}}},\"title\":\"ERC-20 Contract for Pollution Tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set allowance for other address Allows `_spender` to spend no more than `_value` tokens on your behalf\"},\"burn(uint256)\":{\"notice\":\"Destroy tokens Remove `_value` tokens from the system irreversibly\"},\"burnFrom(address,uint256)\":{\"notice\":\"Destroy tokens from other account Remove `_value` tokens from the system irreversibly on behalf of `_from`.\"},\"getPreviousSender(address)\":{\"notice\":\"Set allowance for other address Allows `_spender` to spend no more than `_value` tokens on your behalf\"},\"initialize(uint256,string,string)\":{\"notice\":\"Initialize function for the proxy upgradable pattern by OpenZeppelinInitialize variables\"},\"storeContractAddress(address,address)\":{\"notice\":\"Store contract addresses that will interact with this contractAllows 'contractAddr' to call some special function on behalf of the original msg.sender user.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer tokens Send `_value` tokens to `_to` from your account\"},\"transferExtended(address,address,uint256)\":{\"notice\":\"Transfer tokens with the \\\"from\\\" parameter Send `value` tokens to `to` 'from' your account\"},\"transferForAddingEntities(address,address,uint256)\":{\"notice\":\"Transfer tokens with the \\\"from\\\" parameter, used only for adding new entities to the system, like States,Cities or Citizens. Send `value` tokens to `to` 'from' your accountuserCount is used to count how many entities get registered to the system. It is used also for Citizens to generate a wallet for them with BIP44. ReversePartecipants is used to map the added entity (like Citizen) with the adding entity (like City) for rollback purpose, like giving back tokens to the \\\"from\\\" entity from the \\\"to\\\" entity.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer tokens from other address Send `_value` tokens to `_to` on behalf of `_from`\"}},\"notice\":\"It contains ERC-20 methods to maintain interoperability with other contracts or users, but it implement some methods for use in DSES dApp\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PollutionToken.sol\":\"PollutionToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/PollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nerror PollutionToken__Only_Allowed_Contracts();\\nerror PollutionToken__Not_Enough_PT();\\nerror Not_Your_Entity();\\n\\n/// @title ERC-20 Contract for Pollution Tokens\\n/// @author Giuseppe La Vecchia\\n/// @notice It contains ERC-20 methods to maintain interoperability with other contracts or users, but it implement some methods for use in DSES dApp\\n/// @dev ERC721Enumerable is used because of tokenOfOwnerByIndex method.\\n/// @custom:experimental This is an experimental contract.\\n\\ncontract PollutionToken is Initializable {\\n    string private tokenName;\\n    string private tokenSymbol;\\n    uint8 private tokenDecimals;\\n    uint256 public _totalSupply;\\n    address private admin;\\n    uint256 private userCount; //number of DSES users\\n    mapping(address => address) contractAddresses; //used to store contract addresses allowed by admin that interact with this contract\\n\\n    mapping(address => uint256) public balances;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => address) public reversePartecipants; //used for the transfer from citizens/industry back to city and from city to state\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    event Burn(address indexed from, uint256 value);\\n    uint256 private ptInEthRate; //rate conversion PT to ETH\\n\\n    /**\\n     * Constructor function\\n     *\\n     * Initializes contract with initial supply tokens to the creator of the contract\\n     */\\n\\n    /*\\n    constructor(\\n        uint256 initialSupply,\\n        string memory _tokenName,\\n        string memory _tokenSymbol\\n    ) {\\n        _totalSupply = initialSupply * 10 ** uint256(tokenDecimals); // Update total supply with the decimal amount\\n        balances[msg.sender] = _totalSupply; // Give the creator all initial tokens\\n        admin = msg.sender;\\n        name = _tokenName; // Set the name for display purposes\\n        symbol = _tokenSymbol; // Set the symbol for display purposes\\n    }*/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers(); //An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. This function in the constructor automatically lock it when it is deployed.\\n        //to get further information you can visit https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable\\n    }\\n\\n    /**\\n     * Initialize function for the proxy upgradable pattern by OpenZeppelin\\n     *\\n     * @notice Initialize variables\\n     *\\n     * @param initialSupply the initial supply number of tokens\\n     * @param _tokenName token name\\n     * @param _tokenSymbol token symbol\\n     *\\n     */\\n    function initialize(\\n        uint256 initialSupply,\\n        string memory _tokenName,\\n        string memory _tokenSymbol\\n    ) public initializer {\\n        tokenDecimals = 18;\\n        _totalSupply = initialSupply * 10 ** uint256(tokenDecimals); // Update total supply with the decimal amount\\n        balances[msg.sender] = _totalSupply; // Give the creator all initial tokens\\n        admin = msg.sender;\\n        tokenName = _tokenName; // Set the name for display purposes\\n        tokenSymbol = _tokenSymbol; // Set the symbol for display purposes\\n        ptInEthRate = 23 * 10 ** 12; //1 PT is equal to 0.0000023ETH, so 10**14 gwei\\n    }\\n\\n    function getAdminAddress() public view returns (address) {\\n        return admin;\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return tokenName;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return tokenSymbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return tokenDecimals;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * Transfer tokens sub-function\\n     *\\n     * Send `_value` tokens to `_to` from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     * @param _from the sender address\\n     * @notice the content of the second \\\"if\\\" condition is used by entities that will consume PT (actually citizens) to make them reach exactly 0 also when they consume more than that balance\\n     * while the else condition is for every other user\\n     *\\n     */\\n\\n    function _transfer(address _from, address _to, uint256 _value) internal {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0));\\n\\n        if (\\n            balances[_from] <= _value && contractAddresses[msg.sender] != admin\\n        ) {\\n            revert PollutionToken__Not_Enough_PT();\\n        }\\n\\n        require(balances[_to] + _value >= balances[_to]);\\n        uint256 previousBalances = balances[_from] + balances[_to];\\n        if (\\n            balances[_from] <= _value && contractAddresses[msg.sender] == admin\\n        ) {\\n            balances[_to] = balances[_to] + balances[_from];\\n            emit Transfer(_from, _to, balances[_from]);\\n            balances[_from] = 0;\\n        } else {\\n            // Subtract from the sender\\n            balances[_from] -= _value;\\n            // Add the same to the recipient\\n            balances[_to] += _value;\\n            emit Transfer(_from, _to, _value);\\n        }\\n        assert(balances[_from] + balances[_to] == previousBalances);\\n        // Asserts are used to use static analysis to find bugs in the code. They should never fail\\n    }\\n\\n    /**\\n     * Transfer tokens\\n     *\\n     * Send `_value` tokens to `_to` from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Transfer tokens with the \\\"from\\\" parameter\\n     *\\n     * Send `value` tokens to `to` 'from' your account\\n     *\\n     * @param to The address of the recipient\\n     * @param value the amount to send\\n     * @param from the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol\\n     */\\n    function transferExtended(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public onlyAllowedContracts {\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * Transfer tokens with the \\\"from\\\" parameter, used only for adding new entities to the system, like States,Cities or Citizens.\\n     *\\n     * Send `value` tokens to `to` 'from' your account\\n     *\\n     * @param to The address of the recipient\\n     * @param value the amount to send\\n     * @param from the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol\\n     * @notice userCount is used to count how many entities get registered to the system. It is used also for Citizens to generate a wallet for them with BIP44. ReversePartecipants is used to map the added entity (like Citizen) with the adding entity (like City) for rollback purpose, like giving back tokens to the \\\"from\\\" entity from the \\\"to\\\" entity.\\n     */\\n\\n    function transferForAddingEntities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public onlyAllowedContracts {\\n        if (balances[from] <= value) {\\n            revert PollutionToken__Not_Enough_PT();\\n        }\\n        reversePartecipants[to] = from;\\n        userCount = userCount + 1;\\n        transferExtended(from, to, value);\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return userCount;\\n    }\\n\\n    /**\\n     * Transfer tokens from other address\\n     *\\n     * Send `_value` tokens to `_to` on behalf of `_from`\\n     *\\n     * @param _from The address of the sender\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        //require(_value <= allowance[_from][msg.sender]); // Check allowance\\n        require(\\n            (_value <= allowance[_from][_to]) &&\\n                contractAddresses[msg.sender] == admin,\\n            \\\"you are not allowed to do transferFrom function\\\"\\n        );\\n        //allowance[_from][msg.sender] -= _value;\\n        allowance[_from][_to] -= _value;\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Set allowance for other address\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\\n     *\\n     *\\n     * @param receiver the address of the one who received tokens in transferForAddingEntities function\\n     */\\n    function getPreviousSender(address receiver) public view returns (address) {\\n        return reversePartecipants[receiver];\\n    }\\n\\n    function deletePreviousSender(\\n        address receiver\\n    ) public onlyAllowedContracts {\\n        delete reversePartecipants[receiver];\\n    }\\n\\n    /**\\n     * Set allowance for other address\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     */\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        //allowance[msg.sender][_spender] = _value;\\n        require(contractAddresses[msg.sender] == admin, \\\"you are not approved\\\");\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Store contract addresses that will interact with this contract\\n     *\\n     * @notice Allows 'contractAddr' to call some special function on behalf of the original msg.sender user.\\n     *\\n     * @param contractAddr The contract address authorized\\n     * @param sender the admin address\\n     */\\n\\n    function storeContractAddress(address contractAddr, address sender) public {\\n        //sender will be msg.sender that has to be the admin\\n        require(\\n            sender == admin,\\n            \\\"you are not allowed to do that, you are not the admin\\\"\\n        );\\n        contractAddresses[contractAddr] = sender;\\n    }\\n\\n    function getContractAddress() public view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * Destroy tokens\\n     *\\n     * Remove `_value` tokens from the system irreversibly\\n     *\\n     * @param _value the amount of money to burn\\n     */\\n    function burn(uint256 _value) public returns (bool success) {\\n        require(balances[msg.sender] >= _value); // Check if the sender has enough\\n        balances[msg.sender] -= _value; // Subtract from the sender\\n        _totalSupply -= _value; // Updates _totalSupply\\n        emit Burn(msg.sender, _value);\\n        return true;\\n    }\\n\\n    function getAllowance(\\n        address master,\\n        address slave\\n    ) public view returns (uint256) {\\n        return allowance[master][slave];\\n    }\\n\\n    /**\\n     * Destroy tokens from other account\\n     *\\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\\n     *\\n     * @param _from the address of the sender\\n     * @param _value the amount of money to burn\\n     */\\n    function burnFrom(\\n        address _from,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        require(balances[_from] >= _value); // Check if the targeted balance is enough\\n        require(_value <= allowance[_from][msg.sender]); // Check allowance\\n        balances[_from] -= _value; // Subtract from the targeted balance\\n        allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\\n        _totalSupply -= _value; // Update _totalSupply\\n        emit Burn(_from, _value); //updat\\n        return true;\\n    }\\n\\n    function getPTtoEthRate() public view returns (uint256) {\\n        return ptInEthRate;\\n    }\\n\\n    function setPTtoEthRate(uint256 newRate) public onlyAllowedContracts {\\n        ptInEthRate = newRate;\\n    }\\n\\n    modifier onlyAllowedContracts() {\\n        if (contractAddresses[msg.sender] != admin) {\\n            revert PollutionToken__Only_Allowed_Contracts();\\n        }\\n        _;\\n    }\\n\\n    /*\\n    function getPTValueInCurrency(\\n        uint256 ptAmount,\\n        address currencyAddress\\n    ) public view returns (uint256) {\\n        uint256 ethAmount = ptAmount * ptInEthRate;\\n        uint256 ethAmountConverted = conversionMethods.getConversionRate(\\n            ethAmount,\\n            currencyAddress\\n        );\\n        return ethAmountConverted;\\n    }*/\\n}\\n\",\"keccak256\":\"0x068ca9c9eae27fbfc10e19e4da4ce9bca058e3c5852ae919f748250feb93b4cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b612ca880620001e26000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80635e94ac05116100de578063b5cb15f711610097578063dd62ed3e11610071578063dd62ed3e146104d5578063e1cd7e4314610505578063ea64b23414610521578063eedfca5f1461053d5761018e565b8063b5cb15f71461047f578063c697a7c81461049d578063dc5314f2146104b95761018e565b80635e94ac051461038357806370a08231146103b357806379cc6790146103e357806395d89b4114610413578063a9059cbb14610431578063b2e6b912146104615761018e565b806323b872dd1161014b57806332a2c5d01161012557806332a2c5d0146102fb5780633eaaf86b1461031957806342966c6814610337578063434dd142146103675761018e565b806323b872dd1461027d57806327e235e3146102ad578063313ce567146102dd5761018e565b806306fdde0314610193578063095ea7b3146101b15780630af4187d146101e157806315b317ac1461021157806315d17c1f1461024157806318160ddd1461025f575b600080fd5b61019b610559565b6040516101a8919061201e565b60405180910390f35b6101cb60048036038101906101c691906120e8565b6105eb565b6040516101d89190612143565b60405180910390f35b6101fb60048036038101906101f6919061215e565b6107cc565b60405161020891906121ad565b60405180910390f35b61022b600480360381019061022691906121c8565b610853565b6040516102389190612204565b60405180910390f35b610249610886565b60405161025691906121ad565b60405180910390f35b610267610890565b60405161027491906121ad565b60405180910390f35b6102976004803603810190610292919061221f565b61089a565b6040516102a49190612143565b60405180910390f35b6102c760048036038101906102c291906121c8565b610abc565b6040516102d491906121ad565b60405180910390f35b6102e5610ad4565b6040516102f2919061228e565b60405180910390f35b610303610aeb565b6040516103109190612204565b60405180910390f35b610321610af3565b60405161032e91906121ad565b60405180910390f35b610351600480360381019061034c91906122a9565b610af9565b60405161035e9190612143565b60405180910390f35b610381600480360381019061037c91906122a9565b610c0d565b005b61039d600480360381019061039891906121c8565b610cfd565b6040516103aa9190612204565b60405180910390f35b6103cd60048036038101906103c891906121c8565b610d66565b6040516103da91906121ad565b60405180910390f35b6103fd60048036038101906103f891906120e8565b610daf565b60405161040a9190612143565b60405180910390f35b61041b610fe0565b604051610428919061201e565b60405180910390f35b61044b600480360381019061044691906120e8565b611072565b6040516104589190612143565b60405180910390f35b610469611089565b6040516104769190612204565b60405180910390f35b6104876110b3565b60405161049491906121ad565b60405180910390f35b6104b760048036038101906104b2919061215e565b6110bd565b005b6104d360048036038101906104ce919061221f565b6111cf565b005b6104ef60048036038101906104ea919061215e565b6112c5565b6040516104fc91906121ad565b60405180910390f35b61051f600480360381019061051a91906121c8565b6112ea565b005b61053b6004803603810190610536919061221f565b611435565b005b6105576004803603810190610552919061240b565b611636565b005b606060018054610568906124c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610594906124c5565b80156105e15780601f106105b6576101008083540402835291602001916105e1565b820191906000526020600020905b8154815290600101906020018083116105c457829003601f168201915b5050505050905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d390612542565b60405180910390fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107ba91906121ad565b60405180910390a36001905092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b54905090565b6000600454905090565b6000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111580156109d45750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a906125d4565b60405180910390fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a9f9190612623565b92505081905550610ab184848461186f565b600190509392505050565b60086020528060005260406000206000915090505481565b6000600360009054906101000a900460ff16905090565b600033905090565b60045481565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b4757600080fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b969190612623565b925050819055508160046000828254610baf9190612623565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca583604051610bfc91906121ad565b60405180910390a260019050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cf3576040517f15213d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600b8190555050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610dfd57600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610e8657600080fd5b81600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ed59190612623565b9250508190555081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f689190612623565b925050819055508160046000828254610f819190612623565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca583604051610fce91906121ad565b60405180910390a26001905092915050565b606060028054610fef906124c5565b80601f016020809104026020016040519081016040528092919081815260200182805461101b906124c5565b80156110685780601f1061103d57610100808354040283529160200191611068565b820191906000526020600020905b81548152906001019060200180831161104b57829003601f168201915b5050505050905090565b600061107f33848461186f565b6001905092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461114d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611144906126c9565b60405180910390fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112b5576040517f15213d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112c083838361186f565b505050565b6009602052816000526040600020602052806000526040600020600091509150505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113d0576040517f15213d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461151b576040517f15213d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611593576040517f50b9b74800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160065461162091906126e9565b6006819055506116318383836111cf565b505050565b60008060019054906101000a900460ff161590508080156116675750600160008054906101000a900460ff1660ff16105b80611694575061167630611f6b565b1580156116935750600160008054906101000a900460ff1660ff16145b5b6116d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ca9061278f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611710576001600060016101000a81548160ff0219169083151502179055505b6012600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a61174b91906128e2565b84611756919061292d565b600481905550600454600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600190816117f29190612b1b565b5081600290816118029190612b1b565b506514eb1ad47000600b8190555080156118695760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118609190612c28565b60405180910390a15b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118a857600080fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111580156119a45750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156119db576040517f50b9b74800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a6691906126e9565b1015611a7157600080fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611afd91906126e9565b905081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411158015611bfa5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611dba57600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c8991906126e9565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051611d6891906121ad565b60405180910390a36000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ecc565b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e099190612623565b9250508190555081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e5f91906126e9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ec391906121ad565b60405180910390a35b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5791906126e9565b14611f6557611f64612c43565b5b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fc8578082015181840152602081019050611fad565b60008484015250505050565b6000601f19601f8301169050919050565b6000611ff082611f8e565b611ffa8185611f99565b935061200a818560208601611faa565b61201381611fd4565b840191505092915050565b600060208201905081810360008301526120388184611fe5565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061207f82612054565b9050919050565b61208f81612074565b811461209a57600080fd5b50565b6000813590506120ac81612086565b92915050565b6000819050919050565b6120c5816120b2565b81146120d057600080fd5b50565b6000813590506120e2816120bc565b92915050565b600080604083850312156120ff576120fe61204a565b5b600061210d8582860161209d565b925050602061211e858286016120d3565b9150509250929050565b60008115159050919050565b61213d81612128565b82525050565b60006020820190506121586000830184612134565b92915050565b600080604083850312156121755761217461204a565b5b60006121838582860161209d565b92505060206121948582860161209d565b9150509250929050565b6121a7816120b2565b82525050565b60006020820190506121c2600083018461219e565b92915050565b6000602082840312156121de576121dd61204a565b5b60006121ec8482850161209d565b91505092915050565b6121fe81612074565b82525050565b600060208201905061221960008301846121f5565b92915050565b6000806000606084860312156122385761223761204a565b5b60006122468682870161209d565b93505060206122578682870161209d565b9250506040612268868287016120d3565b9150509250925092565b600060ff82169050919050565b61228881612272565b82525050565b60006020820190506122a3600083018461227f565b92915050565b6000602082840312156122bf576122be61204a565b5b60006122cd848285016120d3565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61231882611fd4565b810181811067ffffffffffffffff82111715612337576123366122e0565b5b80604052505050565b600061234a612040565b9050612356828261230f565b919050565b600067ffffffffffffffff821115612376576123756122e0565b5b61237f82611fd4565b9050602081019050919050565b82818337600083830152505050565b60006123ae6123a98461235b565b612340565b9050828152602081018484840111156123ca576123c96122db565b5b6123d584828561238c565b509392505050565b600082601f8301126123f2576123f16122d6565b5b813561240284826020860161239b565b91505092915050565b6000806000606084860312156124245761242361204a565b5b6000612432868287016120d3565b935050602084013567ffffffffffffffff8111156124535761245261204f565b5b61245f868287016123dd565b925050604084013567ffffffffffffffff8111156124805761247f61204f565b5b61248c868287016123dd565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124dd57607f821691505b6020821081036124f0576124ef612496565b5b50919050565b7f796f7520617265206e6f7420617070726f766564000000000000000000000000600082015250565b600061252c601483611f99565b9150612537826124f6565b602082019050919050565b6000602082019050818103600083015261255b8161251f565b9050919050565b7f796f7520617265206e6f7420616c6c6f77656420746f20646f207472616e736660008201527f657246726f6d2066756e6374696f6e0000000000000000000000000000000000602082015250565b60006125be602f83611f99565b91506125c982612562565b604082019050919050565b600060208201905081810360008301526125ed816125b1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061262e826120b2565b9150612639836120b2565b9250828203905081811115612651576126506125f4565b5b92915050565b7f796f7520617265206e6f7420616c6c6f77656420746f20646f20746861742c2060008201527f796f7520617265206e6f74207468652061646d696e0000000000000000000000602082015250565b60006126b3603583611f99565b91506126be82612657565b604082019050919050565b600060208201905081810360008301526126e2816126a6565b9050919050565b60006126f4826120b2565b91506126ff836120b2565b9250828201905080821115612717576127166125f4565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612779602e83611f99565b91506127848261271d565b604082019050919050565b600060208201905081810360008301526127a88161276c565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115612806578086048111156127e2576127e16125f4565b5b60018516156127f15780820291505b80810290506127ff856127af565b94506127c6565b94509492505050565b60008261281f57600190506128db565b8161282d57600090506128db565b8160018114612843576002811461284d5761287c565b60019150506128db565b60ff84111561285f5761285e6125f4565b5b8360020a915084821115612876576128756125f4565b5b506128db565b5060208310610133831016604e8410600b84101617156128b15782820a9050838111156128ac576128ab6125f4565b5b6128db565b6128be84848460016127bc565b925090508184048111156128d5576128d46125f4565b5b81810290505b9392505050565b60006128ed826120b2565b91506128f8836120b2565b92506129257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461280f565b905092915050565b6000612938826120b2565b9150612943836120b2565b9250828202612951816120b2565b91508282048414831517612968576129676125f4565b5b5092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612994565b6129db8683612994565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a18612a13612a0e846120b2565b6129f3565b6120b2565b9050919050565b6000819050919050565b612a32836129fd565b612a46612a3e82612a1f565b8484546129a1565b825550505050565b600090565b612a5b612a4e565b612a66818484612a29565b505050565b5b81811015612a8a57612a7f600082612a53565b600181019050612a6c565b5050565b601f821115612acf57612aa08161296f565b612aa984612984565b81016020851015612ab8578190505b612acc612ac485612984565b830182612a6b565b50505b505050565b600082821c905092915050565b6000612af260001984600802612ad4565b1980831691505092915050565b6000612b0b8383612ae1565b9150826002028217905092915050565b612b2482611f8e565b67ffffffffffffffff811115612b3d57612b3c6122e0565b5b612b4782546124c5565b612b52828285612a8e565b600060209050601f831160018114612b855760008415612b73578287015190505b612b7d8582612aff565b865550612be5565b601f198416612b938661296f565b60005b82811015612bbb57848901518255600182019150602085019450602081019050612b96565b86831015612bd85784890151612bd4601f891682612ae1565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6000612c12612c0d612c0884612bed565b6129f3565b612272565b9050919050565b612c2281612bf7565b82525050565b6000602082019050612c3d6000830184612c19565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220e3be0535d9c0ec56498ec9f0194d83692169f27bfa8c1d2b55484239fbb7a82664736f6c63430008150033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Giuseppe La Vecchia",
    "custom:experimental": "This is an experimental contract.",
    "details": "ERC721Enumerable is used because of tokenOfOwnerByIndex method.",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "_spender": "The address authorized to spend",
          "_value": "the max amount they can spend"
        }
      },
      "burn(uint256)": {
        "params": {
          "_value": "the amount of money to burn"
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "_from": "the address of the sender",
          "_value": "the amount of money to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getPreviousSender(address)": {
        "params": {
          "receiver": "the address of the one who received tokens in transferForAddingEntities function"
        }
      },
      "initialize(uint256,string,string)": {
        "params": {
          "_tokenName": "token name",
          "_tokenSymbol": "token symbol",
          "initialSupply": "the initial supply number of tokens"
        }
      },
      "storeContractAddress(address,address)": {
        "params": {
          "contractAddr": "The contract address authorized",
          "sender": "the admin address"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "The address of the recipient",
          "_value": "the amount to send"
        }
      },
      "transferExtended(address,address,uint256)": {
        "params": {
          "from": "the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol",
          "to": "The address of the recipient",
          "value": "the amount to send"
        }
      },
      "transferForAddingEntities(address,address,uint256)": {
        "params": {
          "from": "the address of the sender. This is added to allow this contract to forward transactions from other contracts, like from DSESCenter.sol or CityCitizen.sol",
          "to": "The address of the recipient",
          "value": "the amount to send"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "_from": "The address of the sender",
          "_to": "The address of the recipient",
          "_value": "the amount to send"
        }
      }
    },
    "title": "ERC-20 Contract for Pollution Tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set allowance for other address Allows `_spender` to spend no more than `_value` tokens on your behalf"
      },
      "burn(uint256)": {
        "notice": "Destroy tokens Remove `_value` tokens from the system irreversibly"
      },
      "burnFrom(address,uint256)": {
        "notice": "Destroy tokens from other account Remove `_value` tokens from the system irreversibly on behalf of `_from`."
      },
      "getPreviousSender(address)": {
        "notice": "Set allowance for other address Allows `_spender` to spend no more than `_value` tokens on your behalf"
      },
      "initialize(uint256,string,string)": {
        "notice": "Initialize function for the proxy upgradable pattern by OpenZeppelinInitialize variables"
      },
      "storeContractAddress(address,address)": {
        "notice": "Store contract addresses that will interact with this contractAllows 'contractAddr' to call some special function on behalf of the original msg.sender user."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer tokens Send `_value` tokens to `_to` from your account"
      },
      "transferExtended(address,address,uint256)": {
        "notice": "Transfer tokens with the \"from\" parameter Send `value` tokens to `to` 'from' your account"
      },
      "transferForAddingEntities(address,address,uint256)": {
        "notice": "Transfer tokens with the \"from\" parameter, used only for adding new entities to the system, like States,Cities or Citizens. Send `value` tokens to `to` 'from' your accountuserCount is used to count how many entities get registered to the system. It is used also for Citizens to generate a wallet for them with BIP44. ReversePartecipants is used to map the added entity (like Citizen) with the adding entity (like City) for rollback purpose, like giving back tokens to the \"from\" entity from the \"to\" entity."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer tokens from other address Send `_value` tokens to `_to` on behalf of `_from`"
      }
    },
    "notice": "It contains ERC-20 methods to maintain interoperability with other contracts or users, but it implement some methods for use in DSES dApp",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1598,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "tokenName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1600,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "tokenSymbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1602,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 1604,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1606,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1608,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "userCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "contractAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1616,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1622,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "allowance",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1626,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "reversePartecipants",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1650,
        "contract": "contracts/PollutionToken.sol:PollutionToken",
        "label": "ptInEthRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}