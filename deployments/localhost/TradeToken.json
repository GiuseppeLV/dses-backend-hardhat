{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPollutionToken",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Trade__Need_Receiver_Differ_From_Sender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Trade__Only_Receiver_Allowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasSucceded",
          "type": "bool"
        }
      ],
      "name": "TradeCompleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isSucceded",
          "type": "bool"
        }
      ],
      "name": "endTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getTradeById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ptAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeToken.TradeData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "returnTrades",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ptAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeToken.TradeData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ptAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "startTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4abbc0fb7622f5f2b8594ae5b4910b92abdc1298626101954f8971818df47f60",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1366097",
    "logsBloom": "0x
    "blockHash": "0xec65cbe39e066209201a8ed31f68f1d1d37d3cca5a829aa78562384e7d16957e",
    "transactionHash": "0x4abbc0fb7622f5f2b8594ae5b4910b92abdc1298626101954f8971818df47f60",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1366097",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "b5904abc43e4f57f16f81cf07bd0d186",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPollutionToken\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Trade__Need_Receiver_Differ_From_Sender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Trade__Only_Receiver_Allowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasSucceded\",\"type\":\"bool\"}],\"name\":\"TradeCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSucceded\",\"type\":\"bool\"}],\"name\":\"endTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getTradeById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeToken.TradeData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"returnTrades\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeToken.TradeData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ptAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Giuseppe La Vecchia\",\"custom:experimental\":\"This is an experimental contract.\",\"kind\":\"dev\",\"methods\":{\"endTrade(uint256,address,bool)\":{\"details\":\"a new require is added at before the transfer and payment because the sender can finish his tokens while waiting for receiver decision\",\"params\":{\"_id\":\"the trade identificator\",\"isSucceded\":\"true if 'receiver' accept the trade, false if he refuse\",\"receiver\":\"the receiver address\"}},\"returnTrades(address)\":{\"params\":{\"receiver\":\"the receiver address\"}},\"startTrade(uint256,address)\":{\"params\":{\"ptAmount\":\"amount of PollutionToken that you want to trade\",\"receiver\":\"the receiver address\"}}},\"title\":\"Contract for trading PollutionTokens for ETH\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endTrade(uint256,address,bool)\":{\"notice\":\"Ending the trade instance This follow the startTrade execution. When a startTrade is called by a sender, the receiver must respond to the request, accepting and paying in ETH that ptAmount. or refusing, simply emitting an event. In both cases the trade instance will be removed from the trade list.\"},\"returnTrades(address)\":{\"notice\":\"Returning instances of all the trades of the 'receiver'\"},\"startTrade(uint256,address)\":{\"notice\":\"Begin a PollutionToken trade Allows 'sender' to start a trade of 'ptAmount' of tokens with the 'receiver'\"}},\"notice\":\"It can be possible to start a new trade by a sender, accept or refuse it by a receiver.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradeToken.sol\":\"TradeToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TradeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"./interfaces/IPollutionToken.sol\\\";\\nerror Trade__Only_Receiver_Allowed();\\nerror Trade__Need_Receiver_Differ_From_Sender();\\n\\n/// @title Contract for trading PollutionTokens for ETH\\n/// @author Giuseppe La Vecchia\\n/// @notice It can be possible to start a new trade by a sender, accept or refuse it by a receiver.\\n/// @custom:experimental This is an experimental contract.\\ncontract TradeToken {\\n    struct TradeData {\\n        address sender;\\n        address receiver;\\n        uint256 ptAmount;\\n        uint256 id;\\n    }\\n\\n    mapping(address => TradeData[]) private receiverTrades;\\n    IPollutionToken private immutable tokenAddress;\\n    uint256 private id = 1; //used for trades instance identification\\n    event TradeCompleted(uint256 indexed id, bool hasSucceded);\\n\\n    constructor(IPollutionToken _tokenAddress) {\\n        tokenAddress = IPollutionToken(_tokenAddress);\\n        tokenAddress.storeContractAddress(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * Begin a PollutionToken trade\\n     *\\n     * Allows 'sender' to start a trade of 'ptAmount' of tokens with the 'receiver'\\n     *\\n     * @param ptAmount amount of PollutionToken that you want to trade\\n     * @param receiver the receiver address\\n     */\\n\\n    function startTrade(uint256 ptAmount, address receiver) public {\\n        require(\\n            tokenAddress.balanceOf(msg.sender) >= ptAmount,\\n            \\\"Not enough tokens\\\"\\n        );\\n        if (msg.sender == receiver) {\\n            revert Trade__Need_Receiver_Differ_From_Sender();\\n        }\\n        TradeData memory tdInstance = TradeData(\\n            msg.sender,\\n            receiver,\\n            ptAmount,\\n            id\\n        );\\n        id = id + 1;\\n        receiverTrades[receiver].push(tdInstance);\\n    }\\n\\n    /**\\n     * Returning instances of all the trades of the 'receiver'\\n     *\\n     * @param receiver the receiver address\\n     */\\n\\n    function returnTrades(\\n        address receiver\\n    ) public view returns (TradeData[] memory) {\\n        TradeData[] memory _receiverTrades = receiverTrades[receiver];\\n        return _receiverTrades;\\n    }\\n\\n    function getTradeById(\\n        uint256 _id,\\n        address receiver\\n    ) public view returns (TradeData memory) {\\n        TradeData memory tdInstance;\\n        for (uint256 i = 0; i < receiverTrades[receiver].length; i++) {\\n            if (receiverTrades[receiver][i].id == _id) {\\n                tdInstance = receiverTrades[receiver][i];\\n                break;\\n            }\\n        }\\n        return tdInstance;\\n    }\\n\\n    /**\\n     * Ending the trade instance\\n     *\\n     * This follow the startTrade execution. When a startTrade is called by a sender, the receiver must respond to the request, accepting and paying in ETH that ptAmount.\\n     * or refusing, simply emitting an event. In both cases the trade instance will be removed from the trade list.\\n     *\\n     * @param _id the trade identificator\\n     * @param receiver the receiver address\\n     * @param isSucceded true if 'receiver' accept the trade, false if he refuse\\n     * @dev a new require is added at before the transfer and payment because the sender can finish his tokens while waiting for receiver decision\\n     *\\n     */\\n    function endTrade(\\n        uint256 _id,\\n        address receiver,\\n        bool isSucceded\\n    ) public payable {\\n        if ((receiver != msg.sender)) {\\n            revert Trade__Only_Receiver_Allowed();\\n        }\\n\\n        TradeData[] memory _receiverTrades = receiverTrades[receiver];\\n        TradeData memory tdInstance;\\n        //uint256 ethCost = tdInstance.ptAmount * tokenAddress.getPTtoEthRate();\\n        for (uint256 i = 0; i < _receiverTrades.length; i++) {\\n            if (_receiverTrades[i].id == _id) {\\n                tdInstance = _receiverTrades[i];\\n                removeIndex(i, receiver);\\n                break;\\n            }\\n        }\\n\\n        if (isSucceded) {\\n            require(\\n                tokenAddress.balanceOf(tdInstance.sender) >=\\n                    tdInstance.ptAmount,\\n                \\\"Sender hasn't got enough tokens\\\"\\n            );\\n            //if accepted\\n            (bool sent, ) = payable(tdInstance.sender).call{value: msg.value}(\\n                \\\"\\\"\\n            );\\n            require(sent, \\\"Failed to send Ether\\\");\\n\\n            tokenAddress.transferExtended(\\n                tdInstance.sender,\\n                receiver,\\n                tdInstance.ptAmount * 10 ** 18\\n            );\\n\\n            emit TradeCompleted(tdInstance.id, true);\\n        } else {\\n            emit TradeCompleted(tdInstance.id, false);\\n        }\\n    }\\n\\n    /**\\n     * Removing a specific index from a list\\n     *\\n     * For a better and safer delete without using the 'delete' keyword, the last element of the array replace the one in the 'index' position of the array.\\n     * Then the pop function is called, deleting the trade instance in the previous 'index' position.\\n     *\\n     * @param index the index of the array of trades of the trade instance that we want to delete\\n     * @param receiver the receiver address\\n     *\\n     */\\n    function removeIndex(uint256 index, address receiver) private {\\n        receiverTrades[receiver][index] = receiverTrades[receiver][\\n            receiverTrades[receiver].length - 1\\n        ];\\n        receiverTrades[receiver].pop();\\n    }\\n}\\n\",\"keccak256\":\"0x4c11d56aa6abe886bb2dd9fc884fd62579bb41539a5f3c3101ee877a76938661\",\"license\":\"MIT\"},\"contracts/interfaces/IPollutionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPollutionToken {\\n    function transferExtended(address from, address to, uint256 value) external;\\n\\n    function getPreviousSender(address from) external view returns (address);\\n\\n    function deletePreviousSender(address receiver) external;\\n\\n    function storeContractAddress(\\n        address contractAddr,\\n        address sender\\n    ) external;\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transferForAddingEntities(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getPTtoEthRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x471563c2e3fdd71c874b31cf9e02476c5bc0902729447ef8698430b870e57d02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600180553480156200001557600080fd5b50604051620018b0380380620018b083398181016040528101906200003b919062000167565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663c697a7c830336040518363ffffffff1660e01b8152600401620000ae929190620001aa565b600060405180830381600087803b158015620000c957600080fd5b505af1158015620000de573d6000803e3d6000fd5b5050505050620001d7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011b82620000ee565b9050919050565b60006200012f826200010e565b9050919050565b620001418162000122565b81146200014d57600080fd5b50565b600081519050620001618162000136565b92915050565b60006020828403121562000180576200017f620000e9565b5b6000620001908482850162000150565b91505092915050565b620001a4816200010e565b82525050565b6000604082019050620001c1600083018562000199565b620001d0602083018462000199565b9392505050565b6080516116af62000201600039600081816106bb0152818161084a015261097d01526116af6000f3fe60806040526004361061003f5760003560e01c8063477f9e341461004457806369bbabe6146100815780636f07a535146100be578063b6368eda146100da575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610fa1565b610103565b60405161007891906110fa565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190611148565b610266565b6040516100b591906111dd565b60405180910390f35b6100d860048036038101906100d39190611230565b610478565b005b3480156100e657600080fd5b5061010160048036038101906100fc9190611148565b61097a565b005b606060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561025757838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610165565b50505050905080915050919050565b61026e610eea565b610276610eea565b60005b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561046d57846000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061031357610312611283565b5b9060005260206000209060040201600301540361045a576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061037a57610379611283565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050915061046d565b8080610465906112e1565b915050610279565b508091505092915050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104dd576040517ff78b4ebc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561062f57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250508152602001906001019061053d565b50505050905061063d610eea565b60005b82518110156106ad578583828151811061065d5761065c611283565b5b6020026020010151606001510361069a5782818151811061068157610680611283565b5b602002602001015191506106958186610c33565b6106ad565b80806106a5906112e1565b915050610640565b5082156109355780604001517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a0823183600001516040518263ffffffff1660e01b81526004016107169190611338565b602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190611368565b1015610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f906113f2565b60405180910390fd5b6000816000015173ffffffffffffffffffffffffffffffffffffffff16346040516107c290611443565b60006040518083038185875af1925050503d80600081146107ff576040519150601f19603f3d011682016040523d82523d6000602084013e610804565b606091505b5050905080610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f906114a4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dc5314f2836000015187670de0b6b3a764000086604001516108a291906114c4565b6040518463ffffffff1660e01b81526004016108c093929190611515565b600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b5050505081606001517f28d4259847c7163ce37fc67a0fbf41b63b8431ba070e54818ad971f075ed053b6001604051610927919061155b565b60405180910390a250610973565b80606001517f28d4259847c7163ce37fc67a0fbf41b63b8431ba070e54818ad971f075ed053b600060405161096a919061155b565b60405180910390a25b5050505050565b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109d49190611338565b602060405180830381865afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190611368565b1015610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d906115c2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610abb576040517fca32050000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600154815250905060018054610b1c91906115e2565b6001819055506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050610cbf9190611616565b81548110610cd057610ccf611283565b5b90600052602060002090600402016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610d2e57610d2d611283565b5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155600382015481600301559050506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480610e6f57610e6e61164a565b5b6001900381819060005260206000209060040201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055505090555050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6e82610f43565b9050919050565b610f7e81610f63565b8114610f8957600080fd5b50565b600081359050610f9b81610f75565b92915050565b600060208284031215610fb757610fb6610f3e565b5b6000610fc584828501610f8c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61100381610f63565b82525050565b6000819050919050565b61101c81611009565b82525050565b6080820160008201516110386000850182610ffa565b50602082015161104b6020850182610ffa565b50604082015161105e6040850182611013565b5060608201516110716060850182611013565b50505050565b60006110838383611022565b60808301905092915050565b6000602082019050919050565b60006110a782610fce565b6110b18185610fd9565b93506110bc83610fea565b8060005b838110156110ed5781516110d48882611077565b97506110df8361108f565b9250506001810190506110c0565b5085935050505092915050565b60006020820190508181036000830152611114818461109c565b905092915050565b61112581611009565b811461113057600080fd5b50565b6000813590506111428161111c565b92915050565b6000806040838503121561115f5761115e610f3e565b5b600061116d85828601611133565b925050602061117e85828601610f8c565b9150509250929050565b60808201600082015161119e6000850182610ffa565b5060208201516111b16020850182610ffa565b5060408201516111c46040850182611013565b5060608201516111d76060850182611013565b50505050565b60006080820190506111f26000830184611188565b92915050565b60008115159050919050565b61120d816111f8565b811461121857600080fd5b50565b60008135905061122a81611204565b92915050565b60008060006060848603121561124957611248610f3e565b5b600061125786828701611133565b935050602061126886828701610f8c565b92505060406112798682870161121b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ec82611009565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361131e5761131d6112b2565b5b600182019050919050565b61133281610f63565b82525050565b600060208201905061134d6000830184611329565b92915050565b6000815190506113628161111c565b92915050565b60006020828403121561137e5761137d610f3e565b5b600061138c84828501611353565b91505092915050565b600082825260208201905092915050565b7f53656e646572206861736e277420676f7420656e6f75676820746f6b656e7300600082015250565b60006113dc601f83611395565b91506113e7826113a6565b602082019050919050565b6000602082019050818103600083015261140b816113cf565b9050919050565b600081905092915050565b50565b600061142d600083611412565b91506114388261141d565b600082019050919050565b600061144e82611420565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061148e601483611395565b915061149982611458565b602082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60006114cf82611009565b91506114da83611009565b92508282026114e881611009565b915082820484148315176114ff576114fe6112b2565b5b5092915050565b61150f81611009565b82525050565b600060608201905061152a6000830186611329565b6115376020830185611329565b6115446040830184611506565b949350505050565b611555816111f8565b82525050565b6000602082019050611570600083018461154c565b92915050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b60006115ac601183611395565b91506115b782611576565b602082019050919050565b600060208201905081810360008301526115db8161159f565b9050919050565b60006115ed82611009565b91506115f883611009565b92508282019050808211156116105761160f6112b2565b5b92915050565b600061162182611009565b915061162c83611009565b9250828203905081811115611644576116436112b2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212202b15a1e282d70639ce94182b067b4e839b8eaee3ea8c3932c7b77afd1bb15e7364736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c8063477f9e341461004457806369bbabe6146100815780636f07a535146100be578063b6368eda146100da575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610fa1565b610103565b60405161007891906110fa565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190611148565b610266565b6040516100b591906111dd565b60405180910390f35b6100d860048036038101906100d39190611230565b610478565b005b3480156100e657600080fd5b5061010160048036038101906100fc9190611148565b61097a565b005b606060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561025757838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610165565b50505050905080915050919050565b61026e610eea565b610276610eea565b60005b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561046d57846000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061031357610312611283565b5b9060005260206000209060040201600301540361045a576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061037a57610379611283565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050915061046d565b8080610465906112e1565b915050610279565b508091505092915050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104dd576040517ff78b4ebc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561062f57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250508152602001906001019061053d565b50505050905061063d610eea565b60005b82518110156106ad578583828151811061065d5761065c611283565b5b6020026020010151606001510361069a5782818151811061068157610680611283565b5b602002602001015191506106958186610c33565b6106ad565b80806106a5906112e1565b915050610640565b5082156109355780604001517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a0823183600001516040518263ffffffff1660e01b81526004016107169190611338565b602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190611368565b1015610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f906113f2565b60405180910390fd5b6000816000015173ffffffffffffffffffffffffffffffffffffffff16346040516107c290611443565b60006040518083038185875af1925050503d80600081146107ff576040519150601f19603f3d011682016040523d82523d6000602084013e610804565b606091505b5050905080610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f906114a4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dc5314f2836000015187670de0b6b3a764000086604001516108a291906114c4565b6040518463ffffffff1660e01b81526004016108c093929190611515565b600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b5050505081606001517f28d4259847c7163ce37fc67a0fbf41b63b8431ba070e54818ad971f075ed053b6001604051610927919061155b565b60405180910390a250610973565b80606001517f28d4259847c7163ce37fc67a0fbf41b63b8431ba070e54818ad971f075ed053b600060405161096a919061155b565b60405180910390a25b5050505050565b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109d49190611338565b602060405180830381865afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190611368565b1015610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d906115c2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610abb576040517fca32050000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600154815250905060018054610b1c91906115e2565b6001819055506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050610cbf9190611616565b81548110610cd057610ccf611283565b5b90600052602060002090600402016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610d2e57610d2d611283565b5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155600382015481600301559050506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480610e6f57610e6e61164a565b5b6001900381819060005260206000209060040201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055505090555050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6e82610f43565b9050919050565b610f7e81610f63565b8114610f8957600080fd5b50565b600081359050610f9b81610f75565b92915050565b600060208284031215610fb757610fb6610f3e565b5b6000610fc584828501610f8c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61100381610f63565b82525050565b6000819050919050565b61101c81611009565b82525050565b6080820160008201516110386000850182610ffa565b50602082015161104b6020850182610ffa565b50604082015161105e6040850182611013565b5060608201516110716060850182611013565b50505050565b60006110838383611022565b60808301905092915050565b6000602082019050919050565b60006110a782610fce565b6110b18185610fd9565b93506110bc83610fea565b8060005b838110156110ed5781516110d48882611077565b97506110df8361108f565b9250506001810190506110c0565b5085935050505092915050565b60006020820190508181036000830152611114818461109c565b905092915050565b61112581611009565b811461113057600080fd5b50565b6000813590506111428161111c565b92915050565b6000806040838503121561115f5761115e610f3e565b5b600061116d85828601611133565b925050602061117e85828601610f8c565b9150509250929050565b60808201600082015161119e6000850182610ffa565b5060208201516111b16020850182610ffa565b5060408201516111c46040850182611013565b5060608201516111d76060850182611013565b50505050565b60006080820190506111f26000830184611188565b92915050565b60008115159050919050565b61120d816111f8565b811461121857600080fd5b50565b60008135905061122a81611204565b92915050565b60008060006060848603121561124957611248610f3e565b5b600061125786828701611133565b935050602061126886828701610f8c565b92505060406112798682870161121b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ec82611009565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361131e5761131d6112b2565b5b600182019050919050565b61133281610f63565b82525050565b600060208201905061134d6000830184611329565b92915050565b6000815190506113628161111c565b92915050565b60006020828403121561137e5761137d610f3e565b5b600061138c84828501611353565b91505092915050565b600082825260208201905092915050565b7f53656e646572206861736e277420676f7420656e6f75676820746f6b656e7300600082015250565b60006113dc601f83611395565b91506113e7826113a6565b602082019050919050565b6000602082019050818103600083015261140b816113cf565b9050919050565b600081905092915050565b50565b600061142d600083611412565b91506114388261141d565b600082019050919050565b600061144e82611420565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061148e601483611395565b915061149982611458565b602082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60006114cf82611009565b91506114da83611009565b92508282026114e881611009565b915082820484148315176114ff576114fe6112b2565b5b5092915050565b61150f81611009565b82525050565b600060608201905061152a6000830186611329565b6115376020830185611329565b6115446040830184611506565b949350505050565b611555816111f8565b82525050565b6000602082019050611570600083018461154c565b92915050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b60006115ac601183611395565b91506115b782611576565b602082019050919050565b600060208201905081810360008301526115db8161159f565b9050919050565b60006115ed82611009565b91506115f883611009565b92508282019050808211156116105761160f6112b2565b5b92915050565b600061162182611009565b915061162c83611009565b9250828203905081811115611644576116436112b2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212202b15a1e282d70639ce94182b067b4e839b8eaee3ea8c3932c7b77afd1bb15e7364736f6c63430008150033",
  "devdoc": {
    "author": "Giuseppe La Vecchia",
    "custom:experimental": "This is an experimental contract.",
    "kind": "dev",
    "methods": {
      "endTrade(uint256,address,bool)": {
        "details": "a new require is added at before the transfer and payment because the sender can finish his tokens while waiting for receiver decision",
        "params": {
          "_id": "the trade identificator",
          "isSucceded": "true if 'receiver' accept the trade, false if he refuse",
          "receiver": "the receiver address"
        }
      },
      "returnTrades(address)": {
        "params": {
          "receiver": "the receiver address"
        }
      },
      "startTrade(uint256,address)": {
        "params": {
          "ptAmount": "amount of PollutionToken that you want to trade",
          "receiver": "the receiver address"
        }
      }
    },
    "title": "Contract for trading PollutionTokens for ETH",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "endTrade(uint256,address,bool)": {
        "notice": "Ending the trade instance This follow the startTrade execution. When a startTrade is called by a sender, the receiver must respond to the request, accepting and paying in ETH that ptAmount. or refusing, simply emitting an event. In both cases the trade instance will be removed from the trade list."
      },
      "returnTrades(address)": {
        "notice": "Returning instances of all the trades of the 'receiver'"
      },
      "startTrade(uint256,address)": {
        "notice": "Begin a PollutionToken trade Allows 'sender' to start a trade of 'ptAmount' of tokens with the 'receiver'"
      }
    },
    "notice": "It can be possible to start a new trade by a sender, accept or refuse it by a receiver.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/TradeToken.sol:TradeToken",
        "label": "receiverTrades",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(TradeData)16_storage)dyn_storage)"
      },
      {
        "astId": 28,
        "contract": "contracts/TradeToken.sol:TradeToken",
        "label": "id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TradeData)16_storage)dyn_storage": {
        "base": "t_struct(TradeData)16_storage",
        "encoding": "dynamic_array",
        "label": "struct TradeToken.TradeData[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(TradeData)16_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TradeToken.TradeData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TradeData)16_storage)dyn_storage"
      },
      "t_struct(TradeData)16_storage": {
        "encoding": "inplace",
        "label": "struct TradeToken.TradeData",
        "members": [
          {
            "astId": 9,
            "contract": "contracts/TradeToken.sol:TradeToken",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11,
            "contract": "contracts/TradeToken.sol:TradeToken",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13,
            "contract": "contracts/TradeToken.sol:TradeToken",
            "label": "ptAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15,
            "contract": "contracts/TradeToken.sol:TradeToken",
            "label": "id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}